<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.Linux</name>
    </assembly>
    <members>
        <member name="T:Sels.Core.Linux.Components.FileSystem.LinuxDirectory">
            <summary>
            Linux specific implementation for <see cref="T:Sels.Core.Templates.FileSystem.CrossPlatformDirectory"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.FileSystem.LinuxDirectory.FreeSpace">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Linux.Components.FileSystem.LinuxDirectory.MountPoint">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Components.FileSystem.LinuxDirectory.#ctor(System.String)">
            <summary>
            Linux specific implementation for <see cref="T:Sels.Core.Templates.FileSystem.CrossPlatformDirectory"/>.
            </summary>
            <param name="path">Path to the directory</param>
        </member>
        <member name="M:Sels.Core.Linux.Components.FileSystem.LinuxDirectory.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Linux specific implementation for <see cref="T:Sels.Core.Templates.FileSystem.CrossPlatformDirectory"/>.
            </summary>
            <param name="info">Directory info to wrap</param>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.CommandArgument">
            <summary>
            Creates argument by calling the <see cref="M:Sels.Core.Contracts.Commands.ICommand.BuildCommand"/> method.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.CommandArgument.#ctor(System.Int32,System.Boolean)">
            <summary>
            Defines an argument on a <see cref="T:Sels.Core.Contracts.Commands.ICommand"/> that will use <see cref="M:Sels.Core.Contracts.Commands.ICommand.BuildCommand"/> to build the argument.
            </summary>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.FlagArgument">
            <summary>
            Creates argument with flag when source property can be converted to bool and returns true
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.FlagArgument.Flag">
            <summary>
            Argument value that is used when the source property value is true
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.FlagArgument.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Defines an argument that will create a flag when the property value can be converted to true.
            </summary>
            <param name="flag">String value to generate</param>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxArgument.Order">
            <summary>
            Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxArgument.Required">
            <summary>
            Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxArgument.#ctor(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Default constructor for this template.
            </summary>
            <param name="convertToPrimitive">If all non primitive types should be converted to string. If enabled all non primitive types and non primitive elements in collections will be converted to string using <see cref="M:System.Object.ToString"/></param>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxValueAttribute">
            <summary>
            Can be used to give a value to an object or enum when using it as an LinuxArgument. Value will be fetched using <see cref="M:Sels.Core.Linux.Extensions.Argument.LinuxArgumentExtensions.GetArgumentValue(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxValueAttribute.#ctor(System.Object)">
            <summary>
            Defines a custom value for an object.
            </summary>
            <param name="value">Value for the object</param>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.ObjectArgument">
            <summary>
            Creates argument by calling a property getter, field or method on the property. Uses <see cref="M:System.Object.ToString"/> or the value defined in the <see cref="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxValueAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.ObjectArgument.#ctor(Sels.Core.Linux.Components.LinuxCommand.Attributes.Selector,System.String,System.Object,System.String,System.String,Sels.Core.Linux.Components.LinuxCommand.Attributes.TextParsingOptions,System.Int32,System.Boolean)">
            <summary>
            Defines an argument whose value will be created by calling a property getter, field or method on the property. Uses <see cref="M:System.Object.ToString"/> or the value defined in the <see cref="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxValueAttribute"/>.
            </summary>
            <param name="selector">What member type to get argument value from</param>
            <param name="target">Where to get argument value from</param>
            <param name="argument">Optional argument for method</param>
            <param name="prefix">Optional prefix that will be placed along side the property value based on <paramref name="format"/></param>
            <param name="format">How the <paramref name="prefix"/> and property value should be formatted. Use <see cref="!:PrefixFormat"/> for the <paramref name="prefix"/> and <see cref="!:ValueFormat"/> for the property value</param>
            <param name="parsingOption">Optional parsing for the property value</param>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.Selector.Field">
            <summary>
            Get value from a public field.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.Selector.Property">
            <summary>
            Get Value from a public property.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.Selector.Method">
            <summary>
            Get value from calling a method.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument">
            <summary>
            Creates argument with property value based on optional prefix and format. Uses ToString of object or the value defined in the <see cref="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxValueAttribute"/>. Each value in a list will be join together using the following format: "{Flag} {ItemValue}, {Flag} {ItemValue}, {Flag} {ItemValue}, ..."
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.Prefix">
            <summary>
            Optional prefix that gets added to the argument using the defined Format
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.Format">
            <summary>
            How to join the prefix and property value together if Prefix is defined. Prefix:<see cref="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.PrefixFormat"/> | Value: <see cref="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.ValueFormat"/>
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.ParsingOption">
            <summary>
            Optional parsing option for formatting any property values
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.AllowEmpty">
            <summary>
            Allow null values to be parsed. If they aren't allowed no argument value gets generated if property value is null
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.#ctor(System.String,System.String,Sels.Core.Linux.Components.LinuxCommand.Attributes.TextParsingOptions,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Defines an argument for a linux command that will be sourced from the property <see cref="M:System.Object.ToString"/> value. Collection elements will be joined together using a space.
            </summary>
            <param name="prefix">Optional prefix that will be placed along side the property value based on <paramref name="format"/></param>
            <param name="format">How the <paramref name="prefix"/> and property value should be formatted. Use <see cref="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.PrefixFormat"/> for the <paramref name="prefix"/> and <see cref="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.ValueFormat"/> for the property value</param>
            <param name="parsingOption">Optional parsing for the property value</param>
            <param name="allowEmpty">If an argument should be generated when the property value string is empty. If not allowed and the property value string is <see cref="F:System.String.Empty"/> null will be returned</param>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.#ctor(System.String,System.String,Sels.Core.Linux.Components.LinuxCommand.Attributes.TextParsingOptions,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Defines an argument for a linux command that will be sourced from the property <see cref="M:System.Object.ToString"/> value. Collection elements will be joined together using a space.
            </summary>
            <param name="prefix">Optional prefix that will be placed along side the property value based on <paramref name="format"/></param>
            <param name="format">How the <paramref name="prefix"/> and property value should be formatted. Use <see cref="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.PrefixFormat"/> for the <paramref name="prefix"/> and <see cref="F:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextArgument.ValueFormat"/> for the property value</param>
            <param name="parsingOption">Optional parsing for the property value</param>
            <param name="allowEmpty">If an argument should be generated when the property value string is empty. If not allowed and the property value string is <see cref="F:System.String.Empty"/> null will be returned</param>
            <param name="convertToPrimitive">If all non primitive types should be converted to string. If enabled all non primitive types and non primitive elements in collections will be converted to string using <see cref="M:System.Object.ToString"/></param>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextListArgument">
            <summary>
            Joins list values using a single format. So the end result becomes "{Flag} {Value} {Value} {Value} {Value}".
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextListArgument.ElementJoinVlaue">
            <summary>
            String value used to join together all the values from the property values if it's a list
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Attributes.TextListArgument.#ctor(System.String,System.String,System.String,Sels.Core.Linux.Components.LinuxCommand.Attributes.TextParsingOptions,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Defines an argument whose value will be created from parsing the elements in a <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="prefix">Optional prefix that will be placed along side the property value based on <paramref name="format"/></param>
            <param name="format">How the <paramref name="prefix"/> and the element values should be formatted. Use <see cref="!:PrefixFormat"/> for the <paramref name="prefix"/> and <see cref="!:ValueFormat"/> for the joined element values</param>
            <param name="elementJoinValue">String that will join together all the elements in the property collection</param>
            <param name="parsingOption">Optional parsing for the element value</param>
            <param name="allowEmpty">If the argument should be generated when the property collection is empty</param>
            <param name="order">Used to order argument. Lower means it will get placed in the argument list first. Negative gets placed last in the argument list.</param>
            <param name="required">Indicates if this property must be set. Throws InvalidOperation when Required is true but property value is null.</param>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Awk.DynamicAwkCommand.Script">
            <summary>
            Script text to execute with awk.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Awk.DynamicAwkCommand.InputFile">
            <summary>
            Optional file where awk will get it's input from. If null awk will expect the input from a chained command.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Bash.DynamicBashCommand">
            <summary>
            Used to execute commands with bash. 
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Bash.DynamicBashCommand.Command">
            <summary>
            Command to execute with bash.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer">
            <summary>
            How 2 commands should be chained together.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer.Always">
            <summary>
            Always chain regardless of exit code of previous command.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer.OnSuccess">
            <summary>
            Only chain if previous command was executed succesfully.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer.OnFail">
            <summary>
            Only chain if previous command failed to execute properly.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer.Pipe">
            <summary>
            Pipe output from previous command to current command.
            </summary>
        </member>
        <member name="F:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer.None">
            <summary>
            Links commands with a space
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1">
            <summary>
            Command that chains together multiple commands.
            </summary>
            <typeparam name="TCommandResult">Result of final command</typeparam>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.StartCommand">
            <summary>
            First command in the chain that will be executed first.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.IntermediateCommands">
            <summary>
            List of ordered commands that will be executed in order after <see cref="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.StartCommand"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.FinalChain">
            <summary>
            How <see cref="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.StartCommand"/> or the last command in <see cref="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.IntermediateCommands"/> should be linked to <see cref="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.FinalCommand"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand`1.FinalCommand">
            <summary>
            Final command in the chain that will be executed and will parse the result for this command.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.ChainCommand">
            <summary>
            Command that chains together multiple commands.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.DynamicCommand">
            <summary>
            Execute string commands with shell.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.DynamicCommand.Command">
            <summary>
            Command to run.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.EchoCommand">
            <summary>
            Command that displays text.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.EchoCommand.Message">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.EchoCommand.DoInterpreteBackslash">
            <summary>
            Enables the interpretation of backslash escapes in <see cref="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.EchoCommand.Message"/>.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.GrepCommand">
            <summary>
            Used to filter results from other commands / files matching the pattern
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1">
            <summary>
            Executes other commands as super user.
            </summary>
            <typeparam name="TResult">Type of command result</typeparam>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1.Command">
            <summary>
            Command to run as super user.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1.ForceAskForPassword">
            <summary>
            Forces sudo to ask for a password.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1.ReadPasswordFromInput">
            <summary>
            Tells sudo to read password from stdin.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1.#ctor">
            <summary>
            Executes other commands as super user.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1.#ctor(Sels.Core.Contracts.Commands.ICommand{`0})">
            <summary>
            Executes other commands as super user.
            </summary>
            <param name="command">The command to execute as sudo</param>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand`1.CreateResult(System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand">
            <summary>
            Executes other commands as super user.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand.#ctor">
            <summary>
            Executes other commands as super user.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand.#ctor(System.String)">
            <summary>
            Executes other commands as super user.
            </summary>
            <param name="command">The command to execute as sudo</param>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand.#ctor(Sels.Core.Contracts.Commands.ICommand{Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult{System.String,System.String}})">
            <summary>
            Executes other commands as super user.
            </summary>
            <param name="command">The command to execute as sudo</param>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.SudoCommand.#ctor(Sels.Core.Linux.Contracts.LinuxCommand.ILinuxCommand)">
            <summary>
            Executes other commands as super user.
            </summary>
            <param name="command">The command to execute as sudo</param>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.TeeCommand">
            <summary>
            Captures input and streams it to 1 or more files and the standard output 
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.TeeCommand.Append">
            <summary>
            Append output to end of file instead of overwriting.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Core.TeeCommand.IgnoreInterrupts">
            <summary>
            Ignore interrupt signals.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfFreeSpaceCommand`1">
            <summary>
            Command that checks how much free disk space a file system member has.
            </summary>
            <typeparam name="TFileSize">Type of filesize format to display the free disk space in</typeparam>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfFreeSpaceCommand`1.Member">
            <summary>
            File system member to get info about.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfFreeSpaceCommand`1.#ctor">
            <summary>
            Command that checks how much free disk space a file system member has.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfFreeSpaceCommand`1.CreateResult(System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfFreeSpaceCommand`1.BuildCommandChain(Sels.Core.Contracts.Commands.IMultiCommandStartSetup{Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfInfoCommand">
            <summary>
            Gets info about a file system member. 
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfInfoCommand.Member">
            <summary>
            File system member to get info about.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfMountPointCommand">
            <summary>
            Gets the mount point for a file system member.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfMountPointCommand.Member">
            <summary>
            File system member to get info about.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfMountPointCommand.CreateResult(System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DfMountPointCommand.BuildCommandChain(Sels.Core.Contracts.Commands.IMultiCommandStartSetup{Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo">
            <summary>
            Info about a file system member.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo.FileSystem">
            <summary>
            Mounted file system.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo.Blocks">
            <summary>
            Amount of 1k blocks.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo.UsedSpace">
            <summary>
            Total used file size.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo.FreeSpace">
            <summary>
            Total amount of free space.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo.TotalSize">
            <summary>
            Total file size.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.FileSystem.DiskFreeInfo.MountPoint">
            <summary>
            Directory that file system is mounted on.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Components.LinuxCommand.Commands.PackageManager.DpkgInfoCommand">
            <summary>
            Used to list package information on Debian/Ubuntu systems.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Screen.ScreenRunCommand.Command">
            <summary>
            Command to run in a screen session.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Screen.ScreenRunCommand.SessionName">
            <summary>
            Name of the screen session.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Screen.ScreenRunCommand.Detached">
            <summary>
            If the new screen instance should run detached when created.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Components.LinuxCommand.Commands.Screen.ScreenRunCommand.EnforcedCreation">
            <summary>
            Always create a new screen even when called from another screen.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult`2">
            <summary>
            Simple bash command result containing the result and/or error
            </summary>
            <typeparam name="TResult">Type of result</typeparam>
            <typeparam name="TError">Type of error</typeparam>
        </member>
        <member name="P:Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult`2.Failed">
            <summary>
            Indicates if the command failed.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult`2.ExitCode">
            <summary>
            Exit code of the executed command.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult`2.Output">
            <summary>
            Standard output of executed command.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult`2.Error">
            <summary>
            Error output of executed command.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Contracts.LinuxCommand.ILinuxCommand">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Exceptions.LinuxCommand.LinuxCommandExecutionFailedException.ExitCode">
            <summary>
            Exit code returned by the command. 
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Exceptions.LinuxCommand.LinuxCommandExecutionFailedException.Error">
            <summary>
            Error output of command.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Extensions.Argument.LinuxArgumentExtensions.GetArgumentValue(System.Object)">
            <summary>
            Returns value from <see cref="T:Sels.Core.Linux.Components.LinuxCommand.Attributes.LinuxValueAttribute"/> if it's defined on <paramref name="propertyValue"/>, otherwise return ToString() of <paramref name="propertyValue"/>.
            </summary>
            <param name="propertyValue">Object to get value from</param>
            <returns>Argument value</returns>
        </member>
        <member name="M:Sels.Core.Linux.Extensions.LinuxCommandExtensions.GetResult``2(Sels.Core.Linux.Contracts.LinuxCommand.Commands.ILinuxCommandResult{``0,``1})">
            <summary>
            Returns the result if the command was executed successfully. Throws <see cref="T:Sels.Core.Linux.Exceptions.LinuxCommand.LinuxCommandExecutionFailedException"/> if the command failed containing the error object.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Extensions.LinuxCommandExtensions.ExecuteAsSuperUser``1(Sels.Core.Contracts.Commands.ICommand{``0},System.Int32@)">
            <summary>
            Executes <paramref name="command"/> as super user.
            </summary>
            <typeparam name="TResult">Type of command result</typeparam>
            <param name="command">Command to execute</param>
            <param name="exitCode">Exit code returned from executing the command</param>
            <returns>Command result</returns>
        </member>
        <member name="M:Sels.Core.Linux.Extensions.LinuxCommandExtensions.ExecuteAsSuperUser``1(Sels.Core.Contracts.Commands.ICommand{``0})">
            <summary>
            Executes <paramref name="command"/> as super user.
            </summary>
            <typeparam name="TResult">Type of command result</typeparam>
            <param name="command">Command to execute</param>
            <returns>Command result</returns>
        </member>
        <member name="M:Sels.Core.Linux.Extensions.LinuxCommandExtensions.ExecuteAsSuperUser``1(Sels.Core.Contracts.Commands.ICommand{``0},System.String,System.Int32@)">
            <summary>
            Executes <paramref name="command"/> as super user with <paramref name="password"/>.
            </summary>
            <typeparam name="TResult">Type of command result</typeparam>
            <param name="command">Command to execute</param>
            <param name="password">Password for sudo</param>
            <param name="exitCode">Exit code returned from executing the command</param>
            <returns>Command result</returns>
        </member>
        <member name="M:Sels.Core.Linux.Extensions.LinuxCommandExtensions.ExecuteAsSuperUser``1(Sels.Core.Contracts.Commands.ICommand{``0},System.String)">
            <summary>
            Executes <paramref name="command"/> as super user with <paramref name="password"/>.
            </summary>
            <typeparam name="TResult">Type of command result</typeparam>
            <param name="password">Password for sudo</param>
            <param name="command">Command to execute</param>
            <returns>Command result</returns>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Command.BuildLinuxArguments(Sels.Core.Contracts.Commands.ICommand,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Int32}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Builds an argument string using the LinuxArgument attributes on the properties of the supplied bashCommand 
            </summary>
            <param name="command">Bash command to build arguments for</param>
            <param name="additionalArguments">Optional arguments that should also be added</param>
            <typeparam name="TName">Type of object that represents the command name</typeparam>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Command.BuildLinuxCommandString(Sels.Core.Contracts.Commands.ICommand,Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer,Sels.Core.Contracts.Commands.ICommand)">
            <summary>
            Builds a command string by chaining all the provided commands together using a <see cref="T:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer"/>.
            </summary>
            <param name="firstCommand">First command in the chain</param>
            <param name="chain">How to chain together <paramref name="firstCommand"/> and <paramref name="finalCommand"/></param>
            <param name="finalCommand">Final command to chain</param>
            <returns>Command string of all chained command</returns>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Command.BuildLinuxCommandString(Sels.Core.Contracts.Commands.ICommand,System.Collections.Generic.IEnumerable{System.ValueTuple{Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer,Sels.Core.Contracts.Commands.ICommand}},Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer,Sels.Core.Contracts.Commands.ICommand)">
            <summary>
            Builds a command string by chaining all the provided commands together using a <see cref="T:Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer"/>.
            </summary>
            <param name="firstCommand">First command in the chain</param>
            <param name="intermediateCommands">List of ordered commands that will be chained after <paramref name="firstCommand"/></param>
            <param name="chain">How to chain together <paramref name="firstCommand"/> and <paramref name="finalCommand"/></param>
            <param name="finalCommand">Final command to chain</param>
            <returns>Command string of all chained command</returns>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Program.Run(System.String,System.String,System.String@,System.String@,System.Int32@,System.Int32,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Runs <paramref name="program"/> with <paramref name="arguments"/>.
            </summary>
            <param name="program">Program to run</param>
            <param name="arguments">Arguments for <paramref name="program"/></param>
            <param name="output">Stout of command</param>
            <param name="error">Sterr of command</param>
            <param name="exitCode">Exit code of command</param>
            <param name="succesExitCode">Exit code indicating succesful execution</param>
            <returns>Boolean indicating if the command was executed successfully</returns>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Program.Run(System.String,System.String@,System.String@,System.Int32@,System.Int32,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Runs <paramref name="command"/> with Shell.
            </summary>
            <param name="command">Command to run</param>
            <param name="output">Stout of command</param>
            <param name="error">Sterr of command</param>
            <param name="exitCode">Exit code of command</param>
            <param name="succesExitCode">Exit code indicating succesful execution</param>
            <returns>Boolean indicating if the command was executed successfully</returns>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Program.FormatStringCommand(System.String)">
            <summary>
            Format the command so it can be run with Bash/Shell.
            </summary>
            <param name="command">Command to format</param>
            <returns>Formatted command</returns>
        </member>
        <member name="M:Sels.Core.Linux.LinuxHelper.Program.Bash.Run(System.String,System.String@,System.String@,System.Int32@,System.Int32,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Runs <paramref name="command"/> with Bash.
            </summary>
            <param name="command">Command to run</param>
            <param name="output">Stout of command</param>
            <param name="error">Sterr of command</param>
            <param name="exitCode">Exit code of command</param>
            <param name="succesExitCode">Exit code indicating succesful execution</param>
            <returns>Boolean indicating if the command was executed successfully</returns>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand.#ctor(System.String)">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
            <param name="name">The name of the command to execute</param>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`1">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
            <typeparam name="TName">Type of object that represents the command name</typeparam>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`1.#ctor(`0)">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
            <param name="name">The name of the command to execute</param>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`1.CreateResult(System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
            <typeparam name="TName">Type of object that represents the command name</typeparam>
            <typeparam name="TCommandResult">Type of result that the command returns</typeparam>
        </member>
        <member name="P:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.Name">
            <summary>
            The name of the command to execute.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.LoggerName">
            <summary>
            Name that can be used for logging.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.#ctor(`0)">
            <summary>
            Used to run linux commands or build linux command strings.
            </summary>
            <param name="name">The name of the command to execute</param>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.RunCommand(System.String@,System.String@,System.Int32@,Sels.Core.Components.Commands.CommandExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.BuildCommand">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.BuildArguments(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Builds arguments for running the linux command.
            </summary>
            <param name="loggers">Optional loggers for tracing</param>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.GetStaticArguments(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Optional method for providing additional arguments who aren't created from properties.
            </summary>
            <param name="loggers">Optional loggers for tracing</param>
            <returns>List of additional properties</returns>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.Execute(Sels.Core.Components.Commands.CommandExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.Execute(System.Int32@,Sels.Core.Components.Commands.CommandExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.SuccessExitCode">
            <summary>
            Default exit code returned from executing the command that indicates it executed succesfully.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.CreateResult(System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.BaseLinuxCommand`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.Commands.Awk.AwkCommand">
            <summary>
            Command for manipulating data with the awk scripting language.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.Commands.Bash.BashCommand`1">
            <summary>
            Base class for bash.
            </summary>
            <typeparam name="TCommandResult">Type of command result</typeparam>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.Commands.Bash.BashCommand">
            <summary>
            Base class for bash.
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.Commands.FileSystem.DfCommand`1">
            <summary>
            Linux command for getting information about a file system member.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Templates.LinuxCommand.Commands.FileSystem.DfCommand`1.OnlyLocal">
            <summary>
            Only list local file systems.
            </summary>
        </member>
        <member name="P:Sels.Core.Linux.Templates.LinuxCommand.Commands.FileSystem.DfCommand`1.DoSync">
            <summary>
            Sync the file systems before getting the info
            </summary>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.Commands.PackageManager.DpkgCommand`1">
            <summary>
            Base class for the dpkg command.
            </summary>
            <typeparam name="TCommandResult">Type of command result</typeparam>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.Commands.Screen.ScreenCommand`1">
            <summary>
            The screen command a terminal multiplexer used to manage several terminals.
            </summary>
            <typeparam name="TCommandResult">Type of result returned by this command</typeparam>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.MultiCommand`1">
            <summary>
            Template for creating commands that consists of other commands.
            </summary>
            <typeparam name="TCommandResult">Result from executing the command</typeparam>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.MultiCommand`1.#ctor">
            <summary>
            Template for creating commands that consists of other commands.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.MultiCommand`1.BuildArguments(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.MultiCommand`1.BuildCommandChain(Sels.Core.Contracts.Commands.IMultiCommandStartSetup{Sels.Core.Linux.Components.LinuxCommand.Commands.CommandChainer})">
            <summary>
            Used to build the chain that will be executed by this multi command.
            </summary>
            <param name="chainSetup">Object to start building the chain</param>
            <returns>Chain of command to execute</returns>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.MultiCommand">
            <summary>
            Template for creating commands that consists of other commands.
            </summary>
        </member>
        <member name="M:Sels.Core.Linux.Templates.LinuxCommand.MultiCommand.CreateResult(System.Boolean,System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.ShellCommand`1">
            <summary>
            Template for executing command using the default cli shell /bin/sh.
            </summary>
            <typeparam name="TCommandResult">Type of result that the command returns</typeparam>
        </member>
        <member name="T:Sels.Core.Linux.Templates.LinuxCommand.ShellCommand">
            <summary>
            Template for executing command using the default cli shell /bin/sh.
            </summary>
        </member>
    </members>
</doc>

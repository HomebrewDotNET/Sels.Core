<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.Data.SQL</name>
    </assembly>
    <members>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.AliasExpression">
            <summary>
            Expression that adds an alias using AS to another expression.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.AliasExpression.Alias">
            <summary>
            The column alias.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.AliasExpression.Expression">
            <summary>
            The expression that add the alias to.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.AliasExpression.#ctor(Sels.Core.Data.SQL.Query.Expressions.IExpression,System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.AliasExpression"/>
            <param name="expression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.AliasExpression.Expression"/></param>
            <param name="alias"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.AliasExpression.Alias"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.AliasExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression">
            <summary>
            Expression that represents the syntax for selecting everything (e.g. *) from a dataset.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression.DataSet">
            <summary>
            Object containing the dataset to select everything from.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression.#ctor(System.Object)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression.DataSet"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.AllColumnsExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression">
            <summary>
            Expression containing the sql values for the between operator.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression.LowerExpression">
            <summary>
            Expression containing the lower value.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression.TopExpression">
            <summary>
            Expression containing the top value.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression.#ctor(Sels.Core.Data.SQL.Query.Expressions.IExpression,Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression"/>
            <param name="lowerExpression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression.LowerExpression"/></param>
            <param name="topExpression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression.TopExpression"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BetweenValuesExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.ColumnExpression">
            <summary>
            Expression that represents an sql column.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ColumnExpression.#ctor(System.Object,System.String,System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.ColumnExpression"/>
            <param name="dataSet"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="column"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression.Object"/></param>
            <param name="alias"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IColumnExpression.Alias"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ColumnExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},System.Boolean,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression">
            <summary>
            Expression that represents a condition where 2 expressions are compared using a operator expression
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.IsNot">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.LeftExpression">
            <summary>
            Expression on the left side of the condition.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.OperatorExpression">
            <summary>
            Expression containing the comparator for the condition.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.RightExpression">
            <summary>
            Expression on the right side of the condition.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.LogicOperator">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.#ctor(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
            <param name="expression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.LeftExpression"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.ComparisonConditionExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression`1">
            <summary>
            Expression that represents multiple conditions.
            </summary>
            <typeparam name="TEntity">The main entity to create the condition group for</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression`1.IsNot">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression`1.LogicOperator">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression`1.#ctor(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder{`0}},System.Boolean)">
            <inheritdoc/>
            <param name="builder">Delegate for configuring the current condition group</param>
            <param name="isGrouped">If the condition in this expression should be grouped using ()</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression`1.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Condition.FullConditionExpression">
            <summary>
            Expression that wraps another <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IExpression"/> so it acts as a condition in a where clause.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.FullConditionExpression.IsNot">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.FullConditionExpression.Expression">
            <summary>
            The condition expression
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.FullConditionExpression.LogicOperator">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.FullConditionExpression.#ctor(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
            <param name="expression">The condition expression</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.FullConditionExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1">
            <summary>
            Template for creating a new <see cref="T:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1"/>.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.Expressions">
            <summary>
            The currently configured condition expressions.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.#ctor(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder{`0}},System.Boolean)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1"/>
            <param name="builder">Delegate for configuring the current builder</param>
            <param name="throwOnEmpty">If a <see cref="T:System.InvalidOperationException"/> should be thrown when <paramref name="builder"/> created no expressions</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.Not">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.WhereGroup(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.FullExpression(Sels.Core.Data.SQL.Query.Expressions.IConditionExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.CompareTo(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Condition.BaseConditionExpression`1.AndOr(Sels.Core.Data.SQL.Query.LogicOperators)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.ConstantExpression">
            <summary>
            Expression that represents a constant value in a sql query.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.ConstantExpression.Value">
            <summary>
            The value of the constant expression.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ConstantExpression.#ctor(System.Object)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.ConstantExpression"/>
            <param name="value">The constant value</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ConstantExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1">
            <summary>
            Expression that represents a common table expression.
            </summary>
            <typeparam name="TEntity">The main entity to map to the cte columns</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1.Builder">
            <summary>
            The builder to return when done building the current expression.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1.#ctor(Sels.Core.Data.SQL.Query.Statement.ICteOrSelectStatementBuilder,System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1"/>
            <param name="builder">The builder to return after this expression has been built</param>
            <param name="name">The name of this cte</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1.#ctor(System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1"/>
            <param name="name">The name of this cte</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1.Column(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1.Using(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.CteExpression`1.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.DataSetExpression">
            <summary>
            Expression that represents an alias given to a dataset (e.g. Tables, columns, sub queries, common table expressions, ...)
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.DataSetExpression.#ctor(System.Object)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.DataSetExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.DataSetExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.DelegateExpression">
            <summary>
            Expression that delegates the <see cref="M:Sels.Core.Data.SQL.Query.Expressions.IExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)"/> call to a delegate.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.DelegateExpression.#ctor(System.Action{System.Text.StringBuilder})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.DelegateExpression"/>
            <param name="action">The action to delegate the call to</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.DelegateExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.DistintExpression">
            <summary>
            Expression that represents the DISTINCT sql keyword.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.DistintExpression.Keyword">
            <summary>
            The distint keyword.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.DistintExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.DistintExpression.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.EnumExpression`1">
            <summary>
            Expression where the string enum value is used as sql constant.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.EnumExpression`1.Value">
            <summary>
            The enum value of the expression.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.EnumExpression`1.#ctor(`0)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.EnumExpression`1"/>
            <param name="value"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.EnumExpression`1.Value"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.EnumExpression`1.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression">
            <summary>
            Expression that represents a sql function.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression.Function">
            <summary>
            The sql function this expression represents.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression.Expression">
            <summary>
            Expression that contains the column to perform the function on.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression.#ctor(Sels.Core.Data.SQL.Query.Expressions.Functions,Sels.Core.Data.SQL.Query.Expressions.IColumnExpression)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression"/>
            <param name="function"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression.Function"/></param>
            <param name="expression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression.Expression"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},System.Boolean,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2">
            <summary>
            Expression that represents a sql join.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TDerived">The builder that created the expression</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.JoinType">
            <summary>
            The type of the join.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.TableExpression">
            <summary>
            The table to join.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.OnExpressions">
            <summary>
            Array of expressions to join on.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.#ctor(Sels.Core.Data.SQL.Query.Joins,`1)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2"/>
            <param name="joinType"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.JoinType"/></param>
            <param name="parent">The builder that created this expression so it can be returned later when done building this expression</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.Table(System.String,System.Object,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.On(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementJoinConditionBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.CompareTo(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.Sels#Core#Data#SQL#Query#Statement#ISharedExpressionBuilder{TEntity,Sels#Core#Data#SQL#Query#Statement#IChainedBuilder{TEntity,Sels#Core#Data#SQL#Query#Statement#IStatementJoinConditionBuilder{TEntity}}}#Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression`2.AndOr(Sels.Core.Data.SQL.Query.LogicOperators)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.ListExpression">
            <summary>
            Expression that represents a list of constant values in an sql query.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.ListExpression.Expressions">
            <summary>
            Expressions that form the list of constant values.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ListExpression.#ctor(System.Collections.Generic.IEnumerable{Sels.Core.Data.SQL.Query.Expressions.IExpression})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.ListExpression"/>
            <param name="expressions"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.ListExpression.Expressions"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ListExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.NullExpression">
            <summary>
            Expression that doesn't add any sql.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.NullExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.NullExpression.Value">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.ObjectExpression">
            <summary>
            Expression that represents an sql object (e.g. Tables, columns, schema's, ...)
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ObjectExpression.#ctor(System.Object,System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.ObjectExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="objectName"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression.Object"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ObjectExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression">
            <summary>
            Expression that represents a column to sort a query by.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression.SortOrder">
            <summary>
            The order to sort in.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression.Expression">
            <summary>
            Expression that contains the expression to sort by.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression.#ctor(Sels.Core.Data.SQL.Query.Expressions.IExpression,System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.FunctionExpression"/>
            <param name="sortOrder"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression.SortOrder"/></param>
            <param name="expression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression.Expression"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.OrderByExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression">
            <summary>
            Expression that represents an sql parameter.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression.DefaultPrefix">
            <summary>
            The default parameter prefix used.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression.#ctor(System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression"/>
             <param name="name"><see cref="P:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression.Name"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression.ToSql(System.Text.StringBuilder,System.String,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Converts the current expression to sql.
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="parameterPrefix">The prefix to add before the parameter name</param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.RawExpression">
            <summary>
            Expression that converts the supplied object to a sql string using <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.RawExpression.Expression">
            <summary>
            The object containing the sql expression.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.RawExpression.#ctor(System.Object)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.RawExpression"/>
            <param name="expression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.RawExpression.Expression"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.RawExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression">
            <summary>
            Expression that represents a sub query.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression.#ctor(System.Object,System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String},System.Boolean)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="subQueryBuilder">Delegate that creates the query string</param>
            <param name="wrap">If the query needs to be wrapped with ()</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression.#ctor(System.Object,Sels.Core.Data.SQL.Query.IQueryBuilder,System.Boolean)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="queryBuilder">Builder that creates the query string</param>
            <param name="wrap">If the query needs to be wrapped with ()</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression.GetQuery(Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Gets the query string.
            </summary>
            <param name="options">Optional settings for building the query</param>
            <returns>The query string</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.TableExpression">
            <summary>
            Expression that represents a table to perform a query on.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.DataSet">
            <inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.Database">
            <summary>
            Contains the database where the table is located in.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.Schema">
            <summary>
            Contains the schema the table is located in.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.Table">
            <summary>
            Contains the table name.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.TableExpression.#ctor(System.String,System.String,System.String,System.Object)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.TableExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="database"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.Database"/></param>
            <param name="schema"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.Schema"/></param>
            <param name="table"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.TableExpression.Table"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.TableExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.UnionExpression">
            <summary>
            Expression that represents a union query.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.IsDistinct">
            <summary>
            True if duplicates are removed when concatenating, otherwise false if diplicates are included.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.#ctor(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String},System.Boolean)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.UnionExpression"/>
            <param name="subQueryBuilder">Delegate that creates the query string</param>
            <param name="isDistinct"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.IsDistinct"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.#ctor(Sels.Core.Data.SQL.Query.IQueryBuilder,System.Boolean)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.SubQueryExpression"/>
            <param name="queryBuilder">Builder that creates the query string</param>
            <param name="isDistinct"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.IsDistinct"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.GetQuery(Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Gets the query string of the result set to concatenate.
            </summary>
            <param name="options">Optional settings for building the query</param>
            <returns>The query string</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.UnionExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2">
            <summary>
            Expression that represents a set expression in an update query where a sql object is updated to a new value.
            </summary>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
            <typeparam name="TEntity">The main entity to update</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.LeftExpression">
            <summary>
            Expression containing the object to update.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.RightExpression">
            <summary>
            Expression containing the value to update <see cref="P:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.LeftExpression"/> to.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.To">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.#ctor(`1,Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2"/>
            <param name="builder">The builder to return after selecting <see cref="P:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.RightExpression"/></param>
            <param name="leftExpression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.LeftExpression"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc />
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.Update.SetExpression`2.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc />
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression">
            <summary>
            Expression that wraps another expression using strings.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Prefixes">
            <summary>
            Optional strings to add in front of <see cref="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Expression"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Expression">
            <summary>
            The wrapped expression.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Suffixes">
            <summary>
            Optional strings to add after <see cref="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Expression"/>
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.#ctor(System.Collections.Generic.IEnumerable{System.String},Sels.Core.Data.SQL.Query.Expressions.IExpression,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression"/>
            <param name="prefixes"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Prefixes"/></param>
            <param name="expression"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Expression"/></param>
            <param name="suffixes"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.Suffixes"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.WrapperExpression.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.IColumnExpression">
            <summary>
            Expression that contains sql columns that can be converted to sql strings.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.IColumnExpression.Alias">
            <summary>
            Optional alias for <see cref="P:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression.Object"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.IColumnExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},System.Boolean,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Converts the current expression to sql.
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="datasetConverterer">Delegate for converting the column dataset to sql</param>
            <param name="columnConverter">Delegate for converting the column name to sql</param>
            <param name="includeAlias">If the column alias should also be appended to <paramref name="builder"/></param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.IConditionExpression">
            <summary>
            Expression that represents a condition in a where clause.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.IConditionExpression.IsNot">
            <summary>
            If the current clause should be inverted 
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.IConditionExpression.LogicOperator">
            <summary>
            How the current condition and the next condition (if one exists) should be joined together.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression">
            <summary>
            Expression that contains a dataset object that can be translated to a sql dataset alias.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet">
            <summary>
            Object containing a dataset alias.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Converts the current expression to sql.
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="datasetConverterer">Delegate for converting dataset to sql</param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.IExpression">
            <summary>
            Allows an object to be converted to sql.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.IExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Converts the current expression to sql following the sql standard and appends to <paramref name="builder"/>. 
            Properties may need to be used instead based on the implementation (e.g. SqlLite, MsSql, MySql, ...)
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.IExpressionContainer">
            <summary>
            Expression that contains sub expressions that can be converted to sql.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.IExpressionContainer.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Converts the current expression to sql.
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="subBuilder">Delegate for appending any sub expression to <paramref name="builder"/></param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression">
            <summary>
            Expression that contains an sql object (Column, table, ...).
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression.Object">
            <summary>
            The name of the sql object.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Converts the current expression to sql.
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="datasetConverterer">Delegate for converting the column dataset to sql</param>
            <param name="objectConverter">Delegate for converting the object name to sql</param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Functions">
            <summary>
            Contains the sql functions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Functions.Max">
            <summary>
            Function that returns the largest value of a column.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Functions.Min">
            <summary>
            Function that returns the smallest value of a column.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Functions.Avg">
            <summary>
            Function that returns the averga of a column.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Functions.Sum">
            <summary>
            Function that returns the total sum of a column.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Functions.Count">
            <summary>
            Function that counts how many columns aren't null or how many rows are returned.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.Operators">
            <summary>
            Defines how 2 sql expressions should be compared.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Equal">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Equal"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.NotEqual">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotEqual"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Greater">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Greater"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Less">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Less"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.GreaterOrEqual">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.GreaterOrEqual"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.LessOrEqual">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.LessOrEqual"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.In">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.In"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.NotIn">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotIn"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Like">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Like"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.NotLike">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotLike"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Exists">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Exists"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.NotExists">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotExists"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Between">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Between"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.NotBetween">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotBetween"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.Is">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Is"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Expressions.Operators.IsNot">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.ConditionOperators.IsNot"/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression">
            <summary>
            Template for creating new <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IColumnExpression"/> expressions.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression.Alias">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression.#ctor(System.Object,System.String,System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="objectName"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression.Object"/></param>
            <param name="alias"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression.Alias"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseColumnExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},System.Boolean,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression">
            <summary>
            Template for creating a <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression.DataSet">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression.#ctor(System.Object)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression"/>
             <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression.DataSet"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseDataSetExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.BaseExpression">
            <summary>
            Template for creating a <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IExpression"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseExpression.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.BaseExpressionContainer">
            <summary>
            Template for creating new <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IExpressionContainer"/> expressions.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseExpressionContainer.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseExpressionContainer.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression">
            <summary>
            Template for creating a <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IObjectExpression"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression.Object">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression.#ctor(System.Object,System.String)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression"/>
            <param name="dataset"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.IDataSetExpression.DataSet"/></param>
            <param name="objectName"><inheritdoc cref="P:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression.Object"/></param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Expressions.BaseObjectExpression.ToSql(System.Text.StringBuilder,System.Func{System.Object,System.String},System.Func{System.String,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder"/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.InnerExpressions">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.Expression">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.#ctor(Sels.Core.Data.SQL.Query.Compilation.IExpressionCompiler)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder"/>
            <param name="compiler">Compiler for compiling this builder into sql</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.Sels#Core#Data#SQL#Query#Statement#ICteStatementBuilder#Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.Cte``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.Execute(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.ToSql(System.Text.StringBuilder,System.Action{System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.CteStatementBuilder.ToSql(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.DeleteStatementBuilder`1">
            <summary>
            Builds a delete query.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.DeleteStatementBuilder`1.#ctor(Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler{Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.DeleteStatementBuilder`1"/>
            <param name="compiler">Compiler to create the query using the expressions defined in the current builder</param>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.DeleteStatementBuilder`1.Instance">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.DeleteStatementBuilder`1.GetPositionForConditionExpression(Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.DeleteStatementBuilder`1.GetPositionForJoinExpression(Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression{`0,Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1">
            <summary>
            Builds an insert query.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.#ctor(Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler{Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1"/>
            <param name="compiler">>Compiler to create the query using the expressions defined in the current builder</param>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.Instance">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.GetPositionForConditionExpression(Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.GetPositionForJoinExpression(Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression{`0,Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.ColumnsOf``1(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.Values(System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.ValuesUsing``1(``0,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.InsertStatementBuilder`1.ParametersFrom``1(System.Nullable{System.Int32},System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1">
            <summary>
            Builds a select query.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1.Instance">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1.#ctor(Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler{Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1"/>
            <param name="compiler">Compiler to create the query using the expressions defined in the current builder</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1.Columns(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1.ColumnsOf``1(System.Object,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1.GetPositionForJoinExpression(Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression{`0,Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.SelectStatementBuilder`1.GetPositionForConditionExpression(Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1">
            <summary>
            Builds an update query.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.#ctor(Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler{Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1"/>
            <param name="compiler">Compiler to create the query using the expressions defined in the current builder</param>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.Instance">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.GetPositionForConditionExpression(Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.GetPositionForJoinExpression(Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression{`0,Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.SetExpression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.SetFrom``1(System.Object,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.UpdateStatementBuilder`1.SetUsing``1(``0,System.Object,System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder">
            <summary>
            Builder for building one or more common table expressions that can be used to execute a select query.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <summary>
            Adds the cte defined in <paramref name="expression"/> to the current builder.
            </summary>
            <param name="expression">The expression containing the cte</param>
            <returns>Current builder for defining more cte's or selecting the query to execute with the cte's</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder.Expression(System.String)">
            <summary>
            Adds the cte defined in <paramref name="expression"/> to the current builder.
            </summary>
            <param name="expression">Raw sql string containing the cte</param>
            <returns>Current builder for defining more cte's or selecting the query to execute with the cte's</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder.Expression(System.Action{System.Text.StringBuilder})">
            <summary>
            Adds the cte built by <paramref name="expressionBuilder"/> to the current builder.
            </summary>
            <param name="expressionBuilder">Delegate that adds the cte to the builder</param>
            <returns>Current builder for defining more cte's or selecting the query to execute with the cte's</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder.Cte``1(System.String)">
            <summary>
            Starts to build a cte expression for the current statement.
            </summary>
            <typeparam name="T">The main entity to map to the cte columns</typeparam>
            <param name="name">The name of the cte</param>
            <returns>Builder for creating the cte expression</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder.Cte``1">
            <summary>
            Starts to build a cte expression for the current statement.
            </summary>
            <typeparam name="T">The main entity to map to the cte columns</typeparam>
            <returns>Builder for creating the cte expression</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteStatementBuilder.Cte(System.String)">
            <summary>
            Starts to build a cte expression for the current statement.
            </summary>
            <param name="name">The name of the cte</param>
            <returns>Builder for creating the cte expression</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.ICteOrSelectStatementBuilder">
            <summary>
             Builder for building one or more common table expressions that can be used to execute a select query.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteOrSelectStatementBuilder.Execute(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Defines the select query to execute with the common table expressions.
            </summary>
            <param name="query">Delegate that returns the sub query</param>
            <returns>Query builder for converting the current builder into a query</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteOrSelectStatementBuilder.Execute(System.String)">
            <summary>
            Defines the select query to execute with the common table expressions.
            </summary>
            <param name="query">The sub query</param>
            <returns>Query builder for converting the current builder into a query</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteOrSelectStatementBuilder.Execute(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Defines the select query to execute with the common table expressions.
            </summary>
            <param name="builder">Builder that creates the sub query</param>
            <returns>Query builder for converting the current builder into a query</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1">
            <summary>
            Builder for creating a cte expression.
            </summary>
            <typeparam name="TEntity">The main entity to map to the cte columns</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1.Column(System.String)">
            <summary>
            Defines a column for the current cte.
            </summary>
            <param name="column">The column to create the condition for</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1.Column``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
             <summary>
            Defines a column for the current cte where the column name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="T"/>.
             </summary>
             <typeparam name="T">The type to select the property from</typeparam>
             <param name="property">The expression that points to the property to use</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines a column for the current cte where the column name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1.Using(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Defines the query for the cte.
            </summary>
            <param name="query">Delegate that returns the sub query</param>
            <returns>Current builder for defining more cte's or selecting the query to execute with the cte's</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1.Using(System.String)">
            <summary>
            Defines the query for the cte.
            </summary>
            <param name="query">The sub query</param>
            <returns>Current builder for defining more cte's or selecting the query to execute with the cte's</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ICteExpressionBuilder`1.Using(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Defines the query for the cte.
            </summary>
            <param name="builder">Builder that creates the sub query</param>
            <returns>Current builder for defining more cte's or selecting the query to execute with the cte's</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder`2">
            <summary>
            Exposes methods for building a sql delete query.
            </summary>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
            <typeparam name="TEntity">The main entity to delete</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder`2.From(System.String,System.Object,System.String,System.String)">
            <summary>
            Defines the table to delete from.
            </summary>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <param name="table">The table to select from</param>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder`2.From``1(System.Object,System.String,System.String)">
            <summary>
            Defines the table to delete from by using the name of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the table name from</typeparam>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder`2.From(System.Object,System.String,System.String)">
            <summary>
            Defines the table to delete from by using the name of <typeparamref name="TEntity"/>.
            </summary>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder`1">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.IDeleteStatementBuilder`2"/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2">
            <summary>
            Exposes methods for building a sql insert query.
            </summary>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
            <typeparam name="TEntity">The main entity to delete</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Into(System.String,System.String,System.String)">
            <summary>
            Defines the table to insert into.
            </summary>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <param name="table">The name of the table to insert into</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Into``1(System.String,System.String)">
            <summary>
            Defines the table to insert into where the table name is taken from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type whose name to use as table name</typeparam>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Into(System.String,System.String)">
            <summary>
            Defines the table to insert into where the table name is taken from <typeparamref name="TEntity"/>.
            </summary>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Column(System.String)">
            <summary>
            Specifies a column to insert into.
            </summary>
            <param name="column">The name of the column to insert into</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Column``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies a column to insert into by using the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a column to insert into by using the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specifies the columns to insert into.
            </summary>
            <param name="columns">The columns to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Columns(System.String,System.String[])">
            <summary>
            Specifies the columns to insert into.
            </summary>
            <param name="column">The primary column to insert into</param>
            <param name="columns">Additional columns to insert into</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.ColumnsOf``1(System.String[])">
            <summary>
            Specifies the columns to insert into by selecting the names of all public properties on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the properties from</typeparam>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.ColumnsOf(System.String[])">
            <summary>
            Specifies the columns to insert into by selecting the names of all public properties on <typeparamref name="TEntity"/>.
            </summary>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Values(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Defines the constant values to insert.
            </summary>
            <param name="values">List of values to insert</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Values(System.Object,System.Object[])">
            <summary>
            Defines the constant values to insert.
            </summary>
            <param name="value">The first value to insert</param>
            <param name="values">Optional additional values to insert</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.ValuesUsing``1(``0,System.String[])">
            <summary>
            Defines the constant values to insert by taking the values from all public properties on <typeparamref name="T"/>.
            </summary>
            <param name="valueObject">The object to get the values from</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Parameters(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Defines the values to insert by defining sql parameters.
            </summary>
            <param name="parameters">The parameters to insert with</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.Parameters(System.String,System.String[])">
            <summary>
            Defines the values to insert by defining sql parameters.
            </summary>
            <param name="parameter">The first parameter to insert with</param>
            <param name="parameters">Optional additional parameters to insert with</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.ParametersFrom``1(System.Nullable{System.Int32},System.String[])">
            <summary>
            Defines the values to insert by defining sql parameters where the parameters names are taken from all public properties on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the properties from</typeparam>
            <param name="suffix">Optional suffix that needs to be appended to the parameters name. When set to null the suffix is omited</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2.ParametersFrom(System.Nullable{System.Int32},System.String[])">
            <summary>
            Defines the values to insert by defining sql parameters where the parameters names are taken from all public properties on <typeparamref name="TEntity"/>.
            </summary>
            <param name="suffix">Optional suffix that needs to be appended to the parameters name. When set to null the suffix is omited</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`1">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.IInsertStatementBuilder`2"/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2">
            <summary>
            Exposes methods for building a sql select query.
            </summary>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
            <typeparam name="TEntity">The main entity to insert</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Distinct">
            <summary>
            Select only distinct rows.
            </summary>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.All(System.Object)">
            <summary>
            Selects all columns.
            </summary>
            <param name="dataset">Optional dataset to select from. Is the alias assigned to tables / sub queries</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.AllOf``1(System.Object)">
            <summary>
            Select all columns from the dataset alias defined by <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the dataset alias from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.AllOf(System.Object)">
            <summary>
            Select all columns from the dataset alias defined by <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column(System.Object,System.String,System.String)">
            <summary>
            Specifies a column to select.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="column"/> from</param>
            <param name="column">The name of the column to select</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Specifies a column to select by using the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Overwrites the default alias of <typeparamref name="T"/></param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column(System.Object,System.String)">
            <summary>
            Specifies a column to select.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="column"/> from</param>
            <param name="column">The name of the column to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column(System.String)">
            <summary>
            Specifies a column to select.
            </summary>
            <param name="column">The name of the column to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Specifies a column to select by using the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Specifies a column to select by using the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Column(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Specifies a column to select by using the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/></param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Overwrites the default alias of <typeparamref name="TEntity"/></param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Columns(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specifies the columns to select.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="columns"/> from</param>
            <param name="columns">The columns to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Columns(System.String,System.String[])">
            <summary>
            Specifies the columns to select.
            </summary>
            <param name="column">The primary column to select</param>
            <param name="columns">Additional columns to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Specifies the columns to select.
            </summary>
            <param name="columns">The columns to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Columns(System.Object,System.String,System.String[])">
            <summary>
            Specifies the columns to select.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="column"/> and <paramref name="columns"/> from</param>
            <param name="column">The primary column to select</param>
            <param name="columns">Additional columns to select</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.ColumnsOf``1(System.Object,System.String[])">
            <summary>
            Specifies the columns to select by selecting the names of all public properties on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the properties from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.ColumnsOf(System.String[])">
            <summary>
            Specifies the columns to select by selecting the names of all public properties on <typeparamref name="TEntity"/>.
            </summary>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.ColumnsOf``1(System.String[])">
            <summary>
            Specifies the columns to select by selecting the names of all public properties on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the properties from</typeparam>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.ColumnsOf(System.Object,System.String[])">
            <summary>
            Specifies the columns to select by selecting the names of all public properties on <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Value(System.Object,System.String)">
            <summary>
            Selects <paramref name="value"/> as a constant sql value.
            </summary>
            <param name="value">The value to select</param>
            <param name="alias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Expression(System.Object)">
            <summary>
            Selects a raw sql expression defined by the <see cref="M:System.Object.ToString"/> on <paramref name="value"/>.
            </summary>
            <param name="value">Object containing the raw sql expression</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.From(System.String,System.Object,System.String,System.String)">
            <summary>
            Defines the table to select from.
            </summary>
            <param name="table">The table to select from</param>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.From``1(System.Object,System.String,System.String)">
            <summary>
            Defines the table to select from by using the name of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the table name from</typeparam>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.From(System.Object,System.String,System.String)">
            <summary>
            Defines the table to select from by using the name of <typeparamref name="TEntity"/>.
            </summary>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.FromQuery(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String},System.Object)">
            <summary>
            Defines the sub query to select from.
            </summary>
            <param name="query">Delegate that returns the sub query</param>
            <param name="datasetAlias">Alias for the sub query dataset. If a type is used the alias defined for the type is taken</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.FromQuery(System.String,System.Object)">
            <summary>
            Defines the sub query to select from.
            </summary>
            <param name="query">The sub query</param>
            <param name="datasetAlias">Alias for the sub query dataset. If a type is used the alias defined for the type is taken</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.FromQuery(Sels.Core.Data.SQL.Query.IQueryBuilder,System.Object)">
            <summary>
            Defines the sub query to select from.
            </summary>
            <param name="builder">Builder that creates the sub query</param>
            <param name="datasetAlias">Alias for the sub query dataset. If a type is used the alias defined for the type is taken</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.FromQuery``1(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Defines the sub query to select from.
            </summary>
            <typeparam name="T">The type to get the dataset alias from</typeparam>
            <param name="query">Delegate that returns the sub query</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.FromQuery``1(System.String)">
            <summary>
            Defines the sub query to select from.
            </summary>
            <typeparam name="T">The type to get the dataset alias from</typeparam>
            <param name="query">The sub query</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.FromQuery``1(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Defines the sub query to select from.
            </summary>
            <typeparam name="T">The type to get the dataset alias from</typeparam>
            <param name="builder">Builder that creates the sub query</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.CountAll(System.Object,System.String)">
            <summary>
            Counts the total amount of rows returned.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Count(System.Object,System.String,System.String)">
            <summary>
            Counts the total amount of rows where <paramref name="column"/> is not null.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="column">The column to count</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Count``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Counts the total amount of rows where column selected by <paramref name="property"/> from <typeparamref name="T"/> is not null.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Count(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Counts the total amount of rows where column selected by <paramref name="property"/> from <typeparamref name="TEntity"/> is not null.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.CountAll(System.String)">
            <summary>
            Counts the total amount of rows returned.
            </summary>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Count(System.String,System.String)">
            <summary>
            Counts the total amount of rows where <paramref name="column"/> is not null.
            </summary>
            <param name="column">The column to count</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Counts the total amount of rows where column selected by <paramref name="property"/> from <typeparamref name="T"/> is not null.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Counts the total amount of rows where column selected by <paramref name="property"/> from <typeparamref name="TEntity"/> is not null.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Average(System.Object,System.String,System.String)">
            <summary>
            Calculates the average of <paramref name="column"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="column">The column to get the average from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Average``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
             Calculates the average of the column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Average(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
             Calculates the average of the column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
             Calculates the average of the column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Average(System.String,System.String)">
            <summary>
            Calculates the average of <paramref name="column"/>.
            </summary>
            <param name="column">The column to get the average from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
             Calculates the average of the column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Sum(System.Object,System.String,System.String)">
            <summary>
            Calculates the sum of <paramref name="column"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="column">The column to get the average from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Sum``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
             Calculates the sum of the column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Sum(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
             Calculates the sum of the column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Sum(System.String,System.String)">
            <summary>
            Calculates the sum of <paramref name="column"/>.
            </summary>
            <param name="column">The column to get the average from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
             Calculates the sum of the column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
             Calculates the sum of the column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Max(System.Object,System.String,System.String)">
            <summary>
            Returns the largest value of <paramref name="column"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="column">The column to get the max from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Max``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Returns the largest value of the column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Max(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Returns the largest value of column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Max(System.String,System.String)">
            <summary>
            Returns the largest value of <paramref name="column"/>.
            </summary>
            <param name="column">The column to get the max from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Returns the largest value of column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Returns the largest value of column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Min(System.Object,System.String,System.String)">
            <summary>
            Returns the smallest value of <paramref name="column"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="column">The column to get the max from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Min``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Returns the smallest value of the column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Min(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Returns the smallest value of column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select column from</param>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Min(System.String,System.String)">
            <summary>
            Returns the smallest value of <paramref name="column"/>.
            </summary>
            <param name="column">The column to get the max from</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Returns the smallest value of column selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Returns the smallest value of column selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <param name="columnAlias">Optional column alias</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.OrderBy(System.Object,System.String,System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
            <summary>
            Orders query results by <paramref name="column"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="column"/> from</param>
            <param name="column">The column to order by</param>
            <param name="sortOrder">In what order to sort</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.OrderBy``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
             <summary>
             Orders query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/> is used as the column name.
             </summary>
             <typeparam name="T">The type to select the property from</typeparam>
             <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/></param>
            <param name="property">The expression that points to the property to use</param>
             <param name="sortOrder">In what order to sort</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.OrderBy(System.String,System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
            <summary>
            Orders query results by <paramref name="column"/>.
            </summary>
            <param name="column">The column to order by</param>
            <param name="sortOrder">In what order to sort</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
             <summary>
             Orders query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/> is used as the column name.
             </summary>
             <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
             <param name="sortOrder">In what order to sort</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.OrderBy(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
             <summary>
             Orders query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/> is used as the column name.
             </summary>
             <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/></param>
            <param name="property">The expression that points to the property to use</param>
             <param name="sortOrder">In what order to sort</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Nullable{Sels.Core.Data.SQL.Query.SortOrders})">
             <summary>
             Orders query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/> is used as the column name.
             </summary>
            <param name="property">The expression that points to the property to use</param>
             <param name="sortOrder">In what order to sort</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.GroupBy(System.Object,System.String)">
            <summary>
            Groups query results by <paramref name="column"/>.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="column"/> from</param>
            <param name="column">The column to group by</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.GroupBy``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Groups query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/> is used as the column name.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/></param>
            <param name="property">The expression that points to the property to use</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.GroupBy(System.String)">
            <summary>
            Groups query results by <paramref name="column"/>.
            </summary>
            <param name="column">The column to group by</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
             <summary>
             Groups query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/> is used as the column name.
             </summary>
             <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.GroupBy(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
             <summary>
             Groups query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/> is used as the column name.
             </summary>
             <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/></param>
            <param name="property">The expression that points to the property to use</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
             <summary>
             Groups query results by column where the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/> is used as the column name.
             </summary>
            <param name="property">The expression that points to the property to use</param>
             <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Union(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Adds a sub query expression whose results will be added to the result set of the current query. Duplicate rows are excluded.
            </summary>
            <param name="query">Delegate that returns the query string</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Union(System.String)">
            <summary>
            Adds a sub query expression whose results will be added to the result set of the current query. Duplicate rows are excluded.
            </summary>
            <param name="query">The query string</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.Union(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Adds a sub query expression whose results will be added to the result set of the current query. Duplicate rows are excluded.
            </summary>
            <param name="builder">Builder for creating the sub query</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.UnionAll(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Adds a sub query expression whose results will be added to the result set of the current query. Duplicate rows are included.
            </summary>
            <param name="query">Delegate that returns the query string</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.UnionAll(System.String)">
            <summary>
            Adds a sub query expression whose results will be added to the result set of the current query. Duplicate rows are included.
            </summary>
            <param name="query">The query string</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2.UnionAll(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Adds a sub query expression whose results will be added to the result set of the current query. Duplicate rows are included.
            </summary>
            <param name="builder">Builder for creating the sub query</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`1">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.ISelectStatementBuilder`2"/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2">
            <summary>
            Builder that adds common sql expressions.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TReturn">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <summary>
            Adds a sql expression to the builder.
            </summary>
            <param name="expression">The sql expression to add</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Expression(System.String)">
            <summary>
            Adds a raw sql expression to the builder.
            </summary>
            <param name="sqlExpression">String containing the sql expression</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Expression(System.Action{System.Text.StringBuilder})">
            <summary>
            Adds a sql expression to the builder.
            </summary>
            <param name="sqlExpression">Delegate that adds the sql expression to the provided string builder</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Column(System.Object,System.String)">
            <summary>
            Adds a column expression.
            </summary>
            <param name="dataset">Optional dataset alias to select <paramref name="column"/> from</param>
            <param name="column">The column to create the condition for</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Column(System.String)">
            <summary>
            Adds a column expression.
            </summary>
            <param name="column">The column to create the condition for</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Column``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds a column expression where the column name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Column``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds a column expression where the column name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a column expression where the column name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Column(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a column expression where the column name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Value(System.Object)">
            <summary>
            Adds a constant sql value expression.
            </summary>
            <param name="constantValue">Object containing the constant sql value to compare to</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Parameter(System.String)">
            <summary>
            Adds a sql parameter expression.
            </summary>
            <param name="parameter">The name of the sql parameter</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Parameter``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds a sql parameter expression where the parameter name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds a sql parameter expression where the parameter name is taken from the property name selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Query(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Adds a sub query expression.
            </summary>
            <param name="query">Delegate that returns the query string</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Query(System.String)">
            <summary>
            Adds a sub query expression.
            </summary>
            <param name="query">The query string</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder`2.Query(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Adds a sub query expression.
            </summary>
            <param name="builder">Builder for creating the sub query</param>
            <returns>Builder for creating more expressions</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2">
            <summary>
            Builder that adds comparison operators.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TReturn">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.CompareTo(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <summary>
            Compares 2 expressions using the operator defined in <paramref name="sqlExpression"/>.
            </summary>
            <param name="sqlExpression">The sql expression containing the operator</param>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.CompareTo(System.String)">
            <summary>
            Compares 2 expressions using the operator defined in <paramref name="sqlExpression"/>.
            </summary>
            <param name="sqlExpression">String containing the sql operator</param>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.CompareTo(System.Action{System.Text.StringBuilder})">
            <summary>
            Compares 2 expressions using the operator defined in <paramref name="sqlExpression"/>.
            </summary>
            <param name="sqlExpression">Delegate that adds the sql operator to compare to the provided string builder</param>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.EqualTo">
            <summary>
            The expressions should be equal.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.NotEqualTo">
            <summary>
            The expressions should not be equal.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.GreaterThan">
            <summary>
            First expression should be greater than second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.LesserThan">
            <summary>
            First expression should be lesser than second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.GreaterOrEqualTo">
            <summary>
            First expression should be greater or equal to second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.LesserOrEqualTo">
            <summary>
            First expression should be lesser or equal to second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.Like">
            <summary>
            First expression should be like the pattern defined in the second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.NotLike">
            <summary>
            First expression should not be like the pattern defined in the second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.In">
            <summary>
            First expression should exist in a list of values defined by the second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IComparisonExpressionBuilder`2.NotIn">
            <summary>
            First expression should not exist in a list of values defined by the second expression.
            </summary>
            <returns>Builder for selecting what to compare to the first expression</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IChainedBuilder`2">
            <summary>
            Builder for chaining other builder using and/or.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TReturn">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IChainedBuilder`2.AndOr(Sels.Core.Data.SQL.Query.LogicOperators)">
            <summary>
            Sets the logic operator on how to join the current condition and the condition created after calling this method.
            </summary>
            <param name="logicOperator">The logic operator to use</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IChainedBuilder`2.Or">
            <summary>
            Current condition and the condition created after calling this method either need to result in true.
            </summary>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IChainedBuilder`2.And">
            <summary>
            Current condition and the condition created after calling this method both need to result in true.
            </summary>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementConditionBuilder`2">
            <summary>
            Builder for adding conditions to a sql query.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
            <typeparam name="TDerived">The type of the builder to create the conditions for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionBuilder`2.Where(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder{`0}})">
            <summary>
            Adds conditions to the current builder using <paramref name="builder"/>.
            </summary>
            <param name="builder">Builder for adding conditions</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1">
            <summary>
            Builder for creating condition expressions.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.Not">
            <summary>
            Inverts the result of the next condition by using the NOT keyword.
            </summary>
            <returns>Current selector for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.WhereGroup(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder{`0}})">
            <summary>
            Any conditions created using <paramref name="builder"/> will be wrapped between ().
            </summary>
            <param name="builder">The builder to create the conditions within the codition group</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.FullExpression(Sels.Core.Data.SQL.Query.Expressions.IConditionExpression)">
            <summary>
            Adds a full sql condition expression.
            </summary>
            <param name="expression">The sql condition expression to add</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.FullExpression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <summary>
            Adds a full sql condition expression.
            </summary>
            <param name="expression">The sql expression to add</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.FullExpression(System.String)">
            <summary>
            Adds a full sql condition expression.
            </summary>
            <param name="expression">String containing the sql expression</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.FullExpression(System.Action{System.Text.StringBuilder})">
            <summary>
            Adds a full sql condition expression.
            </summary>
            <param name="expression">String containing the sql expression</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.ExistsIn(System.Func{Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.String})">
            <summary>
            Condition is true when any rows are returned by the sub query.
            </summary>
            <param name="query">Delegate that returns the query string</param>
            <returns>Builder for creating the sub query expression</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.ExistsIn(System.String)">
            <summary>
            Condition is true when any rows are returned by the sub query.
            </summary>
            <param name="query">The query string</param>
            <returns>Builder for creating the sub query expression</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder`1.ExistsIn(Sels.Core.Data.SQL.Query.IQueryBuilder)">
            <summary>
            Condition is true when any rows are returned by the sub query.
            </summary>
            <param name="builder">Builder for creating the sub query</param>
            <returns>Builder for creating the sub query expression</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementConditionRightExpressionBuilder`1">
            <summary>
            Builder for creating the expressionon the right-hand side of a condition.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionRightExpressionBuilder`1.Values(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Compares an expression to a list of values.
            </summary>
            <param name="values">List of values that the expression should be compared to</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionRightExpressionBuilder`1.Values(System.Object,System.Object[])">
            <summary>
            Compares an expression to a list of values.
            </summary>
            <param name="value">The first value in the list of values to compare to</param>
            <param name="values">Any additional values to conpare to</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionRightExpressionBuilder`1.Parameters(System.String,System.String[])">
            <summary>
            Compares an expression to a list of sql parameters.
            </summary>
            <param name="parameter">The first parameter in the list of values to compare to</param>
            <param name="parameters">Any additional parameters in the list of values to conpare to</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionRightExpressionBuilder`1.Parameters(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Compares an expression to a list of sql parameters.
            </summary>
            <param name="parameters">The list of sql parameters to compare to</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementConditionOperatorExpressionBuilder`1">
            <summary>
            Builder for configuring how to compare 2 sql expressions.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionOperatorExpressionBuilder`1.Between(System.Object,System.Object)">
            <summary>
            First expression should be greater than <paramref name="lower"/> and lesser than <paramref name="top"/>.
            </summary>
            <param name="lower">The lowest value in the range</param>
            <param name="top">The highest value in the range</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementConditionOperatorExpressionBuilder`1.NotBetween(System.Object,System.Object)">
            <summary>
            First expression should be not greater than <paramref name="lower"/> and not lesser than <paramref name="top"/>.
            </summary>
            <param name="lower">The lowest value in the range</param>
            <param name="top">The highest value in the range</param>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IStatementConditionOperatorExpressionBuilder`1.IsNull">
            <summary>
            Checks if first expression is equal to NULL.
            </summary>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IStatementConditionOperatorExpressionBuilder`1.IsNotNull">
            <summary>
            Checks if first expression is not equal to NULL.
            </summary>
            <returns>Current builder for creating more conditions</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementJoinBuilder`2">
            <summary>
            Builder for creating joins in sql queries.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinBuilder`2.Join(Sels.Core.Data.SQL.Query.Joins)">
            <summary>
            Creates a builder for creating a join to another table.
            </summary>
            <param name="joinType">The type of join to perform</param>
            <returns>Builder for selecting the table to join</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinBuilder`2.InnerJoin">
            <summary>
            Creates a builder for creating an inner join to another table.
            </summary>
            <returns>Builder for selecting the table to join</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinBuilder`2.LeftJoin">
            <summary>
            Creates a builder for creating a left join to another table.
            </summary>
            <returns>Builder for selecting the table to join</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinBuilder`2.RightJoin">
            <summary>
            Creates a builder for creating a right join to another table.
            </summary>
            <returns>Builder for selecting the table to join</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinBuilder`2.FullJoin">
            <summary>
            Creates a builder for creating a full join to another table.
            </summary>
            <returns>Builder for selecting the table to join</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementJoinTableBuilder`2">
            <summary>
            Builder for selecting the table to join.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinTableBuilder`2.Table(System.String,System.Object,System.String,System.String)">
            <summary>
            Defines the table to join.
            </summary>
            <param name="table">The table to join from</param>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinTableBuilder`2.Table``1(System.Object,System.String,System.String)">
            <summary>
            Defines the table to join by using the name of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the table name from</typeparam>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinTableBuilder`2.Table(System.Object,System.String,System.String)">
            <summary>
            Defines the table to join by using the name of <typeparamref name="TEntity"/>.
            </summary>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementJoinOnBuilder`2">
            <summary>
            Builder for defining the join condition.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementJoinOnBuilder`2.On(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementJoinConditionBuilder{`0}})">
            <summary>
            Defines what to join on using <paramref name="builder"/>.
            </summary>
            <param name="builder">Builder for adding conditions</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementJoinConditionBuilder`1">
            <summary>
            Builder for selecting the expression on the left side of a join condition.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementJoinFinalConditionBuilder`1">
            <summary>
            Builder for selecting the expression on the right side of a join condition.
            </summary>
            <typeparam name="TEntity">The main entity to build the query for</typeparam>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3">
            <summary>
            Exposes methods for building sql statement queries.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
            <typeparam name="TPosition">Type that defines where in a query expressions should be located</typeparam>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.Instance">
            <summary>
            The instance that implemented this interface. Can be used by extensions methods.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.AliasFor(System.String)">
            <summary>
            Creates an alias for <typeparamref name="TEntity"/> when it is used in the current builder. A default alias is created by default for each new type.
            </summary>
            <param name="tableAlias">The alias for the type</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.AliasFor``1(System.String)">
            <summary>
            Creates an alias for <typeparamref name="T"/> when it is used in the current builder. An alias is created by default for each new type.
            </summary>
            <typeparam name="T">The type to create the alias for</typeparam>
            <param name="tableAlias">The alias for the type</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.OutAlias``1(System.String@)">
            <summary>
            Gets the table alias for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the alias from</typeparam>
            <param name="tableAlias">The defined table alias for type <paramref name="tableAlias"/></param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.Aliases">
            <summary>
            Dictionary with any defined dataset aliases for the types used in the current builder.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.GetAlias``1">
            <summary>
            Gets the table alias for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the alias from</typeparam>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.GetAlias(System.Type)">
            <summary>
            Gets the table alias for <paramref name="type"/>.
            </summary>
            <param name="type">The type to get the alias from</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression,`1)">
            <summary>
            Adds a sql expression to the current builder.
            </summary>
            <param name="sqlExpression">The sql expression to add</param>
            <param name="position">Where in the query the expression should be placed</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.Expression(System.String,`1)">
            <summary>
            Adds a raw sql expression to the current builder.
            </summary>
            <param name="sqlExpression">String containing the sql expression</param>
            <param name="position">Where in the query the expression should be placed</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementQueryBuilder`3.Expression(System.Action{System.Text.StringBuilder},`1)">
            <summary>
            Adds a sql expression to the current builder.
            </summary>
            <param name="sqlExpression">Delegate that adds the sql expression to the provided string builder</param>
            <param name="position">Where in the query the expression should be placed</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2">
            <summary>
            Builder for setting sql objects to a new value.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
            <typeparam name="TReturn">The builder to return to set the value</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.SetExpression(Sels.Core.Data.SQL.Query.Expressions.IExpression)">
            <summary>
            Adds an sql expression to update.
            </summary>
            <param name="sqlExpression">The sql expression to add</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.SetExpression(System.String)">
            <summary>
            Adds a raw sql expression to update.
            </summary>
            <param name="sqlExpression">String containing the sql expression</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.SetExpression(System.Action{System.Text.StringBuilder})">
            <summary>
            Adds a sql expression to update.
            </summary>
            <param name="sqlExpression">Delegate that adds the sql expression to the provided string builder</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.Set(System.Object,System.String)">
            <summary>
            Specifies a column to update.
            </summary>
            <param name="dataset">Optional dataset alias to update <paramref name="column"/> from</param>
            <param name="column">The name of the column to update</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.Set``1(System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies a column to update by using the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.Set(System.String)">
            <summary>
            Specifies a column to update.
            </summary>
            <param name="column">The name of the column to update</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.Set``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies a column to update by using the name of the property selected by <paramref name="property"/> from <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to select the property from</typeparam>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.Set(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a column to update by using the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IStatementSetBuilder`2.Set(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a column to update by using the name of the property selected by <paramref name="property"/> from <typeparamref name="TEntity"/>.
            </summary>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/></param>
            <param name="property">The expression that points to the property to use</param>
            <returns>Builder to select what to set the expression to</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IStatementSetToBuilder`2">
            <summary>
            Builder for returning the builder to set the new value.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
            <typeparam name="TReturn">The builder to return to set the value</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.IStatementSetToBuilder`2.To">
            <summary>
            Returns the builder to select the value to set.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2">
            <summary>
            Exposes methods for building a sql update query.
            </summary>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
            <typeparam name="TEntity">The main entity to update</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2.Table(System.String,System.Object,System.String,System.String)">
            <summary>
            Defines the table to update.
            </summary>
            <param name="table">The table to select from</param>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2.Table``1(System.Object,System.String,System.String)">
            <summary>
            Defines the table to update by using the name of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to get the table name from</typeparam>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2.Table(System.Object,System.String,System.String)">
            <summary>
            Defines the table to update by using the name of <typeparamref name="TEntity"/>.
            </summary>
            <param name="datasetAlias">Optional alias for the dataset. If a type is used the alias defined for the type is taken</param>
            <param name="database">Optional database to select the table from</param>
            <param name="schema">Optional schema where the table is defined in</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2.SetUsing``1(``0,System.Object,System.String[])">
            <summary>
            Sets the columns to update using the public properties on <typeparamref name="T"/> as column names and using the values from <paramref name="valueObject"/>.
            </summary>
            <typeparam name="T">The type to get the properties from</typeparam>
            <param name="valueObject">Object containing the values to update with</param>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2.SetFrom``1(System.Object,System.String[])">
            <summary>
            Sets the columns to update using the public properties on <typeparamref name="T"/> as column names and parameter names.
            </summary>
            <typeparam name="T">The type to get the properties from</typeparam>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="T"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2.SetFrom(System.Object,System.String[])">
            <summary>
            Sets the columns to update using the public properties on <typeparamref name="TEntity"/> as column names and parameter names.
            </summary>
            <param name="dataset">Overwrites the default dataset name defined for type <typeparamref name="TEntity"/>. If a type is used the alias defined for the type is taken. Set to an empty string to omit the dataset alias</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`1">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder`2"/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions">
            <summary>
            Defines where in a delete query an expression is placed.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.Before">
            <summary>
            Expression should be positioned before the tables to delete from.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.From">
            <summary>
            Expression should be located where the from statement is located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.AfterFrom">
            <summary>
            Expression should be located after the from statement.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.Join">
            <summary>
            Expression should be located where the join statements are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.AfterJoin">
            <summary>
            Expression should be located after the join statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.Where">
            <summary>
            Expression should be located with the other conditions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.DeleteExpressionPositions.After">
            <summary>
            Expression should be located after all other expressions.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions">
            <summary>
            Defines where in an insert query an expression is placed.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.Before">
            <summary>
            Expression should be positioned before the table to insert into.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.Into">
            <summary>
            Expression should be located where the into keyword is located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.AfterInto">
            <summary>
            Expression should be located after the into statement.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.Columns">
            <summary>
            Expression should be located where the columns to insert into are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.AfterColumns">
            <summary>
            Expression should be located after the insert columns.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.Values">
            <summary>
            Expression should be located where the values to insert are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.InsertExpressionPositions.After">
            <summary>
            Expression should be located after all other expressions.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions">
            <summary>
            Defines where in a select query an expression is placed.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.Before">
            <summary>
            Expression should be positioned before the select columns.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.Column">
            <summary>
            Expression should be located with the columns.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.AfterColumn">
            <summary>
            Expression should be located after the select columns.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.From">
            <summary>
            Expression should be located where the from statement is located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.AfterFrom">
            <summary>
            Expression should be located after the from statement.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.Join">
            <summary>
            Expression should be located where the join statements are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.AfterJoin">
            <summary>
            Expression should be located after the join statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.Where">
            <summary>
            Expression should be located with the other conditions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.AfterWhere">
            <summary>
            Expression should be located after the conditions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.GroupBy">
            <summary>
            Expression should be located with the order group by statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.AfterGroupBy">
            <summary>
            Expression should be located after the group by statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.OrderBy">
            <summary>
            Expression should be located with the order by statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.SelectExpressionPositions.After">
            <summary>
            Expression should be located after all other expressions.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions">
            <summary>
            Defines where in a update query an expression is placed.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.Before">
            <summary>
            Expression should be positioned before the tables to update.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.Table">
            <summary>
            Expression should be located where the tables to update are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.AfterTable">
            <summary>
            Expression should be located after the tables to update.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.Join">
            <summary>
            Expression should be located where the join statements are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.AfterJoin">
            <summary>
            Expression should be located after the join statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.Set">
            <summary>
            Expression should be located where the set statements are located.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.AfterSet">
            <summary>
            Expression should be located after the set statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.Where">
            <summary>
            Expression should be located with the other conditions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Statement.UpdateExpressionPositions.After">
            <summary>
            Expression should be located after all other expressions.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder">
            <summary>
            Base builder that wraps an expression that gets compiled into sql using a compiler.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder.#ctor(Sels.Core.Data.SQL.Query.Compilation.IExpressionCompiler)">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder"/>
            <param name="compiler">Compiler to compile the expression into sql</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder.Build(Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder.Build(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder.InnerExpressions">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.BaseExpressionBuilder.Expression">
            <summary>
            The expression to compile.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3">
            <summary>
            Template for creating a <see cref="T:Sels.Core.Data.SQL.Query.IQueryBuilder"/>.
            </summary>
            <typeparam name="TEntity">The main entity to create the query for</typeparam>
            <typeparam name="TPosition">Type that defines where in a query expressions should be located</typeparam>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Expressions">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.InnerExpressions">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Aliases">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.#ctor(Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler{`1})">
            <inheritdoc cref="T:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3"/>
            <param name="compiler">Compiler to create the query using the expressions defined in the current builder</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.AliasFor``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.GetAlias``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.GetAlias(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.OutAlias``1(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Join(Sels.Core.Data.SQL.Query.Joins)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Where(System.Action{Sels.Core.Data.SQL.Query.Statement.IStatementConditionExpressionBuilder{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Expression(Sels.Core.Data.SQL.Query.Expressions.IExpression,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Build(Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Build(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.GetColumnPropertiesFrom``1(System.String[])">
            <summary>
            Returns all properties on type <typeparamref name="T"/> that can be used as object names/values for a query.
            </summary>
            <typeparam name="T">The type to get the properties from</typeparam>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>All usable properties on <typeparamref name="T"/></returns>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.Instance">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.GetPositionForJoinExpression(Sels.Core.Data.SQL.Query.Expressions.Join.JoinExpression{`0,`2})">
            <summary>
            Gets the position for <paramref name="joinExpression"/>.
            </summary>
            <param name="joinExpression">The expression to get the position for</param>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Statement.BaseStatementBuilder`3.GetPositionForConditionExpression(Sels.Core.Data.SQL.Query.Expressions.Condition.ConditionGroupExpression{`0})">
            <summary>
            Gets the position for <paramref name="conditionExpression"/>.
            </summary>
            <param name="conditionExpression">The expression to get the position for</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Compilation.IExpressionCompiler">
            <summary>
            Compiler that converts <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IExpression"/> into sql.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Compilation.IExpressionCompiler.Compile(Sels.Core.Data.SQL.Query.Expressions.IExpression,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Compiles <paramref name="expression"/> into a sql string.
            </summary>
            <param name="expression">The expression to compile into sql</param>
            <param name="options"><inheritdoc cref="T:Sels.Core.Data.SQL.Query.ExpressionCompileOptions"/></param>
            <returns><paramref name="expression"/> compiled into an sql string</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Compilation.IExpressionCompiler.Compile(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.Expressions.IExpression,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Compiler <paramref name="expression"/> into a sql string and appends it to <paramref name="builder"/>.
            </summary>
            <param name="builder">The builder to add the sql string to</param>
            <param name="expression">The expression to compile into sql</param>
            <param name="options"><inheritdoc cref="T:Sels.Core.Data.SQL.Query.ExpressionCompileOptions"/></param>
            <returns><paramref name="builder"/> for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler`1">
            <summary>
            Compiler that converts <see cref="T:Sels.Core.Data.SQL.Query.Expressions.IExpression"/> into a query where expressions locations within the query are defined by <typeparamref name="TPosition"/>. 
            </summary>
            <typeparam name="TPosition">Type that tells where in the query an expression should be placed</typeparam>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.Compilation.IQueryCompiler`1.CompileTo(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.IQueryBuilder{`0},System.Func{System.Object,System.String},Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Compiles the expressions in <paramref name="queryBuilder"/> into sql and appends it to <paramref name="builder"/>.
            </summary>
            <param name="builder">The builder to add the sql to</param>
            <param name="queryBuilder">The builder requesting the compilation</param>
            <param name="datasetConverterer">Optional dataset converter for converting dataset objects into a string</param>
            <param name="options">Optional settings for building the query</param>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.IQueryBuilder`1">
            <summary>
            Exposes methods for building sql queries where the expressions are located within the query based on <typeparamref name="TPosition"/>.
            </summary>
            <typeparam name="TPosition">Type that defines where in a query expressions should be located</typeparam>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.IQueryBuilder`1.Expressions">
            <summary>
            Dictionary of the currently defined expressions grouped by the position where they would appear in the query.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.IQueryBuilder">
            <summary>
            Exposes methods for building sql queries.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.SQL.Query.IQueryBuilder.InnerExpressions">
            <summary>
            Array of currently defined expressions sorted in the order they would appear in the query.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.IQueryBuilder.Build(Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Builds the query string using the current builder.
            </summary>
            <param name="options">Optional settings for building the query</param>
            <returns>The query string</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Query.IQueryBuilder.Build(System.Text.StringBuilder,Sels.Core.Data.SQL.Query.ExpressionCompileOptions)">
            <summary>
            Builds the query string using the current builder and appends it to <paramref name="builder"/>.
            </summary>
            <param name="builder">The builder to append to</param>
            <param name="options">Optional settings for building the query</param>
            <returns><paramref name="builder"/> for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.ExpressionCompileOptions">
            <summary>
            Exposes extra settings when compiling expressions or query builders into sql.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.ExpressionCompileOptions.None">
            <summary>
            No selected options.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.ExpressionCompileOptions.Format">
            <summary>
            Formats the query to a more human readable format.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.ExpressionCompileOptions.EnumAsString">
            <summary>
            Converts enums to string instead of int.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.ExpressionCompileOptions.AppendSeparator">
            <summary>
            Appends a ; after each statement.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.Joins">
            <summary>
            Contains the different types of sql joins.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Joins.Inner">
            <summary>
            Represents an Sql inner join.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Joins.Left">
            <summary>
            Represents an Sql left (outer) join.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Joins.Right">
            <summary>
            Represents an Sql right (outer) join.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.Joins.Full">
            <summary>
            Represents an Sql full (outer) join.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.LogicOperators">
            <summary>
            Defines how 2 conditions are compared.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.LogicOperators.And">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.LogicOperators.And"/>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.LogicOperators.Or">
            <inheritdoc cref="F:Sels.Core.Data.SQL.Sql.LogicOperators.Or"/>
        </member>
        <member name="T:Sels.Core.Data.SQL.Query.SortOrders">
            <summary>
            Defines the sort order.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.SortOrders.Ascending">
            <summary>
            Order by smallest first.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Query.SortOrders.Descending">
            <summary>
            Order by largest first.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Extensions.Dapper.DapperExtensions">
            <summary>
            Contains extension methods for working with dapper.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Extensions.Dapper.DapperExtensions.AddParametersUsing``1(Dapper.DynamicParameters,``0,System.String[])">
            <summary>
            Adds the values from the properties on <typeparamref name="T"/> to <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">Type of instance to add the values from</typeparam>
            <param name="parameters">Object to add the values to</param>
            <param name="instance">The instance whose values to add to <paramref name="parameters"/></param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns><paramref name="parameters"/> for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Extensions.Dapper.DapperExtensions.AddParametersUsing``1(Dapper.DynamicParameters,``0,System.Func{System.Reflection.PropertyInfo,System.String},System.String[])">
            <summary>
            Adds the values from the properties on <typeparamref name="T"/> to <paramref name="parameters"/>.
            </summary>
            <typeparam name="T">Type of instance to add the values from</typeparam>
            <param name="parameters">Object to add the values to</param>
            <param name="instance">The instance whose values to add to <paramref name="parameters"/></param>
            <param name="nameConverter">Delegate for converting the property into a parameter name</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns><paramref name="parameters"/> for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Extensions.Dapper.DapperExtensions.AsParameters``1(``0,System.String[])">
            <summary>
            Converst <paramref name="instance"/> into dapper parameters using the values from the properties on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of instance to add the values from</typeparam>
            <param name="instance">The instance whose values to add</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>A bag of parameters with the values added from <paramref name="instance"/></returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Extensions.Dapper.DapperExtensions.AsParameters``1(``0,System.Func{System.Reflection.PropertyInfo,System.String},System.String[])">
            <summary>
            Converst <paramref name="instance"/> into dapper parameters using the values from the properties on <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of instance to add the values from</typeparam>
            <param name="instance">The instance whose values to add</param>
            <param name="nameConverter">Delegate for converting the property into a parameter name</param>
            <param name="excludedProperties">Optional names of properties to exclude</param>
            <returns>A bag of parameters with the values added from <paramref name="instance"/></returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.Extensions.Dapper.DapperExtensions.AddParameter(Dapper.DynamicParameters,System.String,System.Object)">
            <summary>
            Adds a parameter to <paramref name="parameters"/>;
            </summary>
            <param name="parameters">Object to add the values to</param>
            <param name="name">Name of the parameter to add</param>
            <param name="value">Value of the parameter to add</param>
            <returns><paramref name="parameters"/> for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.SqlQueryBuilderExtensions">
            <summary>
            Contains extension methods for working with the sql builders.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.SqlQueryBuilderExtensions.AsParameterExpression(System.String)">
            <summary>
            Turns <paramref name="parameter"/> into a <see cref="T:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression"/>.
            </summary>
            <param name="parameter">The string containing the parameter name</param>
            <returns><paramref name="parameter"/> as <see cref="T:Sels.Core.Data.SQL.Query.Expressions.ParameterExpression"/></returns>
        </member>
        <member name="M:Sels.Core.Data.SQL.SqlQueryBuilderExtensions.Null``2(Sels.Core.Data.SQL.Query.Statement.ISharedExpressionBuilder{``0,Sels.Core.Data.SQL.Query.Statement.IUpdateStatementBuilder{``0,``1}})">
            <summary>
            Set an expression to NULL.
            </summary>
            <typeparam name="TDerived">The type to return for the fluent syntax</typeparam>
            <typeparam name="TEntity">The main entity to select</typeparam>
            <param name="builder">The builder to add the expression to</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql">
            <summary>
            Contains sql related constant values and helper methods.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.Statements">
            <summary>
            Contains the sql statements.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Statements.Insert">
            <summary>
            The sql statement for creating data.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Statements.Select">
            <summary>
            The sql statement for reading data.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Statements.Update">
            <summary>
            The sql statement for updating data.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Statements.Delete">
            <summary>
            The sql statement for deleting data.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.Clauses">
            <summary>
            Contains the sql clauses.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.Set">
            <summary>
            The sql clause for defining the columns to update to new values.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.Into">
            <summary>
            Sql clause for defining what to insert into.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.Values">
            <summary>
            The sql clause for defining the values to insert.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.From">
            <summary>
            The sql clause for defining where to select from.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.Where">
            <summary>
            The sql clause for defining conditions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.OrderBy">
            <summary>
            The sql clause for defining how to order the query results.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.GroupBy">
            <summary>
            The sql clause for defining how to group the query results.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.Union">
            <summary>
            The sql clause for concatenating the results of 2 select queries. Duplicate rows are excluded.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Clauses.UnionAll">
            <summary>
            The sql clause for concatenating the results of 2 select queries. Duplicate rows are included.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.Joins">
            <summary>
            Contains the keywords for joins.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Joins.InnerJoin">
            <summary>
            The keyword for an inner join.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Joins.FullJoin">
            <summary>
            The keyword for a full (outer) join.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Joins.LeftJoin">
            <summary>
            The keyword for a left (outer) join.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Joins.RightJoin">
            <summary>
            The keyword for a right (outer) join.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.Functions">
            <summary>
            Contains the sql function names.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Functions.Max">
            <summary>
            The name of the max function.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Functions.Min">
            <summary>
            The name of the min function.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Functions.Avg">
            <summary>
            The name of the avg function.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Functions.Sum">
            <summary>
            The name of the sum function.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Functions.Count">
            <summary>
            The name of the count function.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.SortOrders">
            <summary>
            Contains the sql sort orders.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.SortOrders.Asc">
            <summary>
            Sorts from smallest to largest.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.SortOrders.Desc">
            <summary>
            Sorts from largest to smallest.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.ConditionOperators">
            <summary>
            Contains the sql operators for comparing values.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Equal">
            <summary>
            Expressions should be equal.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotEqual">
            <summary>
            Expressions should not be equal.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Greater">
            <summary>
            Expression should be greater than other expression.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Less">
            <summary>
            Expression should be lesser than other expression.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.GreaterOrEqual">
            <summary>
            Expression should be greater or equal to other expression.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.LessOrEqual">
            <summary>
            Expression should be lesser or equal to other expression.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.In">
            <summary>
            Expression should be in list of values.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotIn">
            <summary>
            Expression should not be in list of values.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Like">
            <summary>
            Expression should be like a pattern.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotLike">
            <summary>
            Expression should not be like a pattern.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Exists">
            <summary>
            Expression should exist in another expression.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotExists">
            <summary>
            Expression should not exist in another expression.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Between">
            <summary>
            Expression should be between 2 values.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.NotBetween">
            <summary>
            Expression should not be between 2 values.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.Is">
            <summary>
            Expression should be equal to a contant value.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ConditionOperators.IsNot">
            <summary>
            Expression should not be equal to a contant value.
            </summary>
        </member>
        <member name="T:Sels.Core.Data.SQL.Sql.LogicOperators">
            <summary>
            Contains the sql logic operators for comparing conditions.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.LogicOperators.And">
            <summary>
            Current and next condition both need to be true.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.LogicOperators.Or">
            <summary>
            Current and next condition either need to be true.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.All">
            <summary>
            The sql value for selecting everything from a dataset.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.As">
            <summary>
            The sql keyword for defining an alias.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.With">
            <summary>
            Sql keyword for defining cte's or sql locks.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.On">
            <summary>
            The sql keyword for defining what columns to join on.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Null">
            <summary>
            The sql keyword for null.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.Not">
            <summary>
            The sql keyword for inverting a condition result.
            </summary>
        </member>
        <member name="F:Sels.Core.Data.SQL.Sql.ParameterPrefix">
            <summary>
            The prefix to place in front of parameter names.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.SQL.Sql.Join(Sels.Core.Data.SQL.Query.ExpressionCompileOptions,System.Object[])">
            <summary>
            Joins the query builder results from any <see cref="T:Sels.Core.Data.SQL.Query.IQueryBuilder"/> in <paramref name="builders"/> into a single string.
            </summary>
            <param name="options">The settings for generating the queries</param>
            <param name="builders">Object containing either <see cref="T:Sels.Core.Data.SQL.Query.IQueryBuilder"/> that is used to generate queries or object who's <see cref="M:System.Object.ToString"/> value will be added to the string</param>
            <returns>String created from <paramref name="builders"/></returns>
        </member>
    </members>
</doc>

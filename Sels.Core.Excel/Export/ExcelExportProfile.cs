using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using Sels.Core.Excel.Export.Definitions;
using Sels.Core.Excel.Export.Definitions.Tables;
using Sels.Core.Excel.Extensions;
using Sels.Core.Extensions;
using Sels.Core.Extensions.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Sels.Core.Excel.Export
{
    public class ExcelExportProfile
    {
        //Fields 
        private readonly Dictionary<string, List<BaseExcelExportDefinition>> _exportDefinitions = new Dictionary<string, List<BaseExcelExportDefinition>>();

        public ExcelExportProfile()
        {
        }

        #region Setup
        public void AddExportDefinition(string sheetName, BaseExcelExportDefinition exportDefinition)
        {
            sheetName.ValidateVariable(nameof(sheetName));
            exportDefinition.ValidateVariable(nameof(exportDefinition));

            _exportDefinitions.AddValueToList(sheetName, exportDefinition);
        }

        public void AddTableExportDefinition<TResource>(string sheetName, SeekMode seekMode, bool generateHeaders = true, object resourceIdentifier = null, params (string Header, Func<TResource, object> ValueGetter, CellType ColumnCellType)[] columndefinitions)
        {
            sheetName.ValidateVariable(nameof(sheetName));
            columndefinitions.ValidateVariable(nameof(columndefinitions));

            AddTableExportDefinition(sheetName, SeekModeToStartPositionAction(seekMode), generateHeaders, resourceIdentifier, columndefinitions);
        }

        public void AddTableExportDefinition<TResource>(string sheetName, Action<ExcelCursor> setStartPositionAction, bool generateHeaders = true, object resourceIdentifier = null, params (string Header, Func<TResource, object> ValueGetter, CellType ColumnCellType)[] columndefinitions)
        {
            sheetName.ValidateVariable(nameof(sheetName));
            columndefinitions.ValidateVariable(nameof(columndefinitions));
            setStartPositionAction.ValidateVariable(nameof(setStartPositionAction));

            var tableExportDefinition = new ExcelTableExportDefinition<TResource>(setStartPositionAction, generateHeaders, resourceIdentifier);

            columndefinitions.Execute(x => tableExportDefinition.AddColumn(x.Header, x.ValueGetter, x.ColumnCellType));

            AddExportDefinition(sheetName, tableExportDefinition);
        }

        public void AddAutoGeneratedTableExportDefinition<TResource>(string sheetName, SeekMode seekMode, bool generateHeaders = true, object resourceIdentifier = null)
        {
            sheetName.ValidateVariable(nameof(sheetName));

            AddAutoGeneratedTableExportDefinition<TResource>(sheetName, SeekModeToStartPositionAction(seekMode), generateHeaders, resourceIdentifier);
        }

        public void AddAutoGeneratedTableExportDefinition<TResource>(string sheetName, Action<ExcelCursor> setStartPositionAction, bool generateHeaders = true, object resourceIdentifier = null)
        {
            sheetName.ValidateVariable(nameof(sheetName));
            setStartPositionAction.ValidateVariable(nameof(setStartPositionAction));

            var tableExportDefinition = new ExcelTableExportDefinition<TResource>(setStartPositionAction, generateHeaders, resourceIdentifier);

            tableExportDefinition.AutoGenerate();

            AddExportDefinition(sheetName, tableExportDefinition);
        }
        public Action<ExcelCursor> SeekModeToStartPositionAction(SeekMode seekMode)
        {
            // Seek start position in worksheet
            switch (seekMode)
            {
                case SeekMode.NewColumn:
                    return new Action<ExcelCursor>(cursor => cursor.SeekNextFreeColumn());
                case SeekMode.NewRow:
                    return new Action<ExcelCursor>(cursor => cursor.SeekNextFreeRow());
                case SeekMode.NewColumnOnCurrentRow:
                    return new Action<ExcelCursor>(cursor => cursor.SeekNextFreeColumnAfterCurrentRow());
                case SeekMode.NewRowOnCurrentColumn:
                    return new Action<ExcelCursor>(cursor => cursor.SeekNextFreeRowAfterCurrentColumn());
                default:
                    throw new NotImplementedException($"SeekMode {seekMode} not implemented");
            }
        }
        #endregion

        #region Export
        public void Export(string excelFileName, bool clearWorksheet = true, params (object Identifier, object Resource)[] resourceBundles)
        {
            var isExistingFile = File.Exists(excelFileName);
            var spreadsheet = isExistingFile ? SpreadsheetDocument.Open(excelFileName, true) : SpreadsheetDocument.Create(excelFileName, SpreadsheetDocumentType.Workbook);

            try
            {
                using (spreadsheet)
                {
                    foreach (var exportDefinition in _exportDefinitions)
                    {
                        var worksheetName = exportDefinition.Key;
                        var exporters = exportDefinition.Value;

                        // Initialize worksheet
                        var worksheet = spreadsheet.GetOrCreateWorksheet(worksheetName);

                        clearWorksheet.IfTrue(() => worksheet.ClearRows());

                        // Create cursor for worksheet
                        var cursor = new ExcelCursor(worksheet);

                        // Loop over export definitions and execute export for each valid resource
                        foreach (var exporter in exporters)
                        {
                            exporter.SetStartPosition(cursor);
                            foreach (var resourceBundle in resourceBundles)
                            {
                                // Begin export
                                if (exporter.CanRunWithResource(resourceBundle.Identifier, resourceBundle.Resource))
                                {
                                    var currentRow = cursor.CurrentRow;
                                    var currentColumn = cursor.CurrentColumn;
                                    
                                    // Export resource to worksheet
                                    exporter.Export(cursor, resourceBundle.Resource);
                                }
                            }
                        }
                    }

                    spreadsheet.Save();
                }
            }
            catch (Exception)
            {
                if (!isExistingFile)
                {
                    File.Delete(excelFileName);
                }

                throw;
            }
        }      
        #endregion
    }
}

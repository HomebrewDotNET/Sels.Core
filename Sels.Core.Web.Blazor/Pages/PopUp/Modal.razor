@using Microsoft.AspNetCore.Components.Web

@if(_context != null)
{
    <div class="modal @(_show ? "show" : "")" tabindex="-1" style="display:@(_display ? "block" : "none")">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            @if(Header != null){
                @Header(_context)
            }
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseAsync"/>
          </div>        
            @if(Body != null){
                 <div class="modal-body">
                    @Body(_context)
                 </div> 
            }        
            @if(Footer != null){
                <div class="modal-footer">
                    @Footer(_context)
                </div>
            }          
        </div>
      </div>
    </div>

    @if (WithBackdrop)
    {
        <div class="modal-backdrop fade @(_show ? "show" : "")" style="display:@(_display ? "block" : "none")" tabindex="-1" @onclick="CloseAsync"></div>
    }
}

@code {
    // Fields
    private bool _show;
    private bool _display;
    private ModalContext _context;

    // Settings
    /// <summary>
    /// If the modal needs to be showed when rendered.
    /// </summary>
    [Parameter]
    public bool ShowOnRender { get; set; } = false;
    /// <summary>
    /// If the modal can show the black background.
    /// </summary>
    [Parameter]
    public bool WithBackdrop { get; set; } = true;

    // Content
    /// <summary>
    /// Content for the modal header.
    /// </summary>
    [Parameter]
    public RenderFragment<ModalContext>? Header { get; set; }
    /// <summary>
    /// Content for the modal body.
    /// </summary>
    [Parameter]
    public RenderFragment<ModalContext>? Body { get; set; }
    /// <summary>
    /// Content for the modal footer.
    /// </summary>
    [Parameter]
    public RenderFragment<ModalContext>? Footer { get; set; }

    // Events
    /// <summary>
    /// Event that gets raised when opening the modal.
    /// </summary>
    [Parameter]
    public EventCallback OnOpen { get; set; }
    /// <summary>
    /// Event that gets raised when closing the modal.
    /// </summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _context = new ModalContext(this);
    }
    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender && ShowOnRender)
        {
            await OpenAsync();
        }
    }

    /// <summary>
    /// Displays the modal.
    /// </summary>
    public async Task OpenAsync()
    {
        _display = true;
        await Task.Delay(100);
        _show = true;
        StateHasChanged();
        await OnOpen.InvokeAsync();
    }
    /// <summary>
    /// Closes the modal.
    /// </summary>
    public async Task CloseAsync()
    {
        _show = false;
        await Task.Delay(100);
        _display = false;
        StateHasChanged();
        await OnClose.InvokeAsync();
    }
}

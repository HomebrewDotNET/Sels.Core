<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.Localization</name>
    </assembly>
    <members>
        <member name="T:Sels.Core.Localization.ILocalizationBuilder">
            <summary>
            Builder for setting up a localizer.
            </summary>
        </member>
        <member name="M:Sels.Core.Localization.ILocalizationBuilder.Use(System.Reflection.Assembly,System.String)">
            <summary>
            Uses localization defined in resource with name <paramref name="resourceName"/>.
            </summary>
            <param name="assembly">The assembly that contains the resource</param>
            <param name="resourceName">The name of the resource (without extension)</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Localization.ILocalizationBuilder.ScanIn(System.Reflection.Assembly,System.Predicate{System.String})">
            <summary>
            Uses localization defined in all resource contained within <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly to scan</param>
            <param name="canLoad">Optional delegate that checks if the resource can be loaded.  When set to null everything is loaded</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Localization.ILocalizationBuilder.ScanInAllLoaded(Sels.Core.Delegates.Condition{System.Reflection.Assembly,System.String})">
            <summary>
            Uses localization defined in all resources in all currently loaded assemblies.
            </summary>
            <param name="canLoad">Optional delegate that checks if the resource can be loaded.  When set to null everything is loaded</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Localization.ILocalizationBuilder.UseLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Allows the localizer to trace using <paramref name="logger"/>.
            </summary>
            <param name="logger">The logger to use for tracing</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Localization.ILocalizationBuilder.UseLoggers(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Allows the localizer to trace using <paramref name="loggers"/>.
            </summary>
            <param name="loggers">The loggers to use for tracing</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Localization.ILocalizationBuilder.WithDefaultOptions(System.Action{Sels.Core.Localization.LocalizationOptions})">
            <summary>
            Sets the global default options that will be used for every request.
            </summary>
            <param name="options">Delegate that configures the default options</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Localization.LocalizationMissingException">
            <summary>
            Thrown when a localization entry for a culture is missing.
            </summary>
        </member>
        <member name="P:Sels.Core.Localization.LocalizationMissingException.Key">
            <summary>
            The key of the localization entry that was missing.
            </summary>
        </member>
        <member name="P:Sels.Core.Localization.LocalizationMissingException.Culture">
            <summary>
            The culture the localization entry was missing for.
            </summary>
        </member>
        <member name="M:Sels.Core.Localization.LocalizationMissingException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Sels.Core.Localization.LocalizationMissingException"/>
            <param name="key"><inheritdoc cref="P:Sels.Core.Localization.LocalizationMissingException.Key"/></param>
            <param name="culture"><inheritdoc cref="P:Sels.Core.Localization.LocalizationMissingException.Culture"/></param>
        </member>
        <member name="T:Sels.Core.Localization.Localizer">
            <summary>
            Contains static helper methods for localization.
            </summary>
        </member>
        <member name="P:Sels.Core.Localization.Localizer.Resources">
            <summary>
            The currently loaded resources that will be used for localization.
            </summary>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Setup(System.Action{Sels.Core.Localization.ILocalizationBuilder},System.Boolean)">
            <summary>
            Configures the localizer using <paramref name="builder"/>.
            </summary>
            <param name="builder">Delegate to configure the current builder</param>
            <param name="clear">If previous configuration should be cleared</param>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Get(System.String,System.Object[])">
            <summary>
            Fetches the localized string for <paramref name="key"/>.
            </summary>
            <param name="key">The key of the localization entry to fetch</param>
            <param name="parameters">Optional parameters for formatting the localized string if it is not missing</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
            <exception cref="T:Sels.Core.Localization.LocalizationMissingException"></exception>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Get(System.String,System.String,System.Object[])">
            <summary>
            Fetches the localized string for <paramref name="key"/>.
            </summary>
            <param name="key">The key of the localization entry to fetch</param>
            <param name="culture">Optional culture to get the localized string in. If set to null either the default defined in <see cref="T:Sels.Core.Localization.LocalizationOptions"/> is used or the default thread ui culture</param>
            <param name="parameters">Optional parameters for formatting the localized string if it is not missing</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
            <exception cref="T:Sels.Core.Localization.LocalizationMissingException"></exception>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Get(System.String,System.String,System.Action{Sels.Core.Localization.LocalizationOptions},System.Object[])">
            <summary>
            Fetches the localized string for <paramref name="key"/>.
            </summary>
            <param name="key">The key of the localization entry to fetch</param>
            <param name="culture">Optional culture to get the localized string in. If set to null either the default defined in <see cref="T:Sels.Core.Localization.LocalizationOptions"/> is used or the default thread ui culture</param>
            <param name="options">Optional delegate for configuring the options</param>
            <param name="parameters">Optional parameters for formatting the localized string if it is not missing</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
            <exception cref="T:Sels.Core.Localization.LocalizationMissingException"></exception>
        </member>
        <member name="T:Sels.Core.Localization.Localizer.Object">
            <summary>
            Contains static helper methods for localizing objects.
            </summary>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Object.Get(System.Type,System.String,System.Action{Sels.Core.Localization.LocalizationOptions})">
            <summary>
            Returns the localized name for object <paramref name="objectType"/>.
            </summary>
            <param name="objectType">The type of the object to localize</param>
            <param name="culture">Optional culture to get the localized string in. If set to null either the default defined in <see cref="T:Sels.Core.Localization.LocalizationOptions"/> is used or the default thread ui culture</param>
            <param name="options">Optional delegate for configuring the options</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Object.Get(System.Reflection.PropertyInfo,System.String,System.Action{Sels.Core.Localization.LocalizationOptions})">
            <summary>
            Returns the localized name for <paramref name="property"/>.
            </summary>
            <param name="property">The name of the property to localize</param>
            <param name="culture">Optional culture to get the localized string in. If set to null either the default defined in <see cref="T:Sels.Core.Localization.LocalizationOptions"/> is used or the default thread ui culture</param>
            <param name="options">Optional delegate for configuring the options</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Object.GetValue(System.Reflection.PropertyInfo,System.Object,System.String,System.Action{Sels.Core.Localization.LocalizationOptions})">
            <summary>
            Returns the localized value name for a value assigned to <paramref name="property"/>.
            </summary>
            <param name="property">The name of the property to localize the value for</param>
            <param name="value">The property value to get the localized name for</param>
            <param name="culture">Optional culture to get the localized string in. If set to null either the default defined in <see cref="T:Sels.Core.Localization.LocalizationOptions"/> is used or the default thread ui culture</param>
            <param name="options">Optional delegate for configuring the options</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.Object.Enum``1(``0,System.String,System.Action{Sels.Core.Localization.LocalizationOptions})">
            <summary>
            Returns the localized name for enum <paramref name="value"/>.
            </summary>
            <param name="value">The enum value to localize</param>
            <param name="culture">Optional culture to get the localized string in. If set to null either the default defined in <see cref="T:Sels.Core.Localization.LocalizationOptions"/> is used or the default thread ui culture</param>
            <param name="options">Optional delegate for configuring the options</param>
            <returns>The localized string or another result based on <see cref="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings"/></returns>
        </member>
        <member name="F:Sels.Core.Localization.Localizer.Object.AliasKeyPrefix">
            <summary>
            The prefix to place in front of a type name to define an alias for the type.
            </summary>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.LocBuilder.Use(System.Reflection.Assembly,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.LocBuilder.ScanIn(System.Reflection.Assembly,System.Predicate{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.LocBuilder.ScanInAllLoaded(Sels.Core.Delegates.Condition{System.Reflection.Assembly,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.LocBuilder.WithCultures(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.LocBuilder.UseLoggers(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Localization.Localizer.LocBuilder.WithDefaultOptions(System.Action{Sels.Core.Localization.LocalizationOptions})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Localization.LocalizationOptions">
            <summary>
            Exposes extra options when fetching localizations.
            </summary>
        </member>
        <member name="P:Sels.Core.Localization.LocalizationOptions.DefaultCulture">
            <summary>
            The default culture to search for when either no culture is provided when fetching or when a localization entry is missing for the requested culture. 
            When set to null the culture will not be searched.
            </summary>
        </member>
        <member name="P:Sels.Core.Localization.LocalizationOptions.MissingKeySettings">
            <summary>
            What to return if a key could not be localized.
            </summary>
        </member>
        <member name="T:Sels.Core.Localization.MissingLocalizationSettings">
            <summary>
            What should be returned if a key could not be localized.
            </summary>
        </member>
        <member name="F:Sels.Core.Localization.MissingLocalizationSettings.Default">
            <summary>
            Return a default value based on the key.
            </summary>
        </member>
        <member name="F:Sels.Core.Localization.MissingLocalizationSettings.Key">
            <summary>
            Return the key.
            </summary>
        </member>
        <member name="F:Sels.Core.Localization.MissingLocalizationSettings.Exception">
            <summary>
            Throw a <see cref="T:Sels.Core.Localization.LocalizationMissingException"/>.
            </summary>
        </member>
        <member name="F:Sels.Core.Localization.MissingLocalizationSettings.Null">
            <summary>
            Return null.
            </summary>
        </member>
    </members>
</doc>

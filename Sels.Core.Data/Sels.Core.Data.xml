<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.Data</name>
    </assembly>
    <members>
        <member name="T:Sels.Core.Data.Linking.ObjectLinker">
            <inheritdoc cref="T:Sels.Core.Data.Linking.IRelationalLinker"/>
        </member>
        <member name="M:Sels.Core.Data.Linking.ObjectLinker.GetAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.Linking.ObjectLinker.GetAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.Linking.ObjectLinker.Link``1(``0,System.Object,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Data.Linking.ObjectLinker.With``1(System.Func{``0,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Data.Linking.IRelationalLinker">
            <summary>
            Links different objects together.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.Linking.IRelationalLinker.With``1(System.Func{``0,System.Object})">
            <summary>
            Defines an object type that the current instance can link.
            </summary>
            <typeparam name="T">Type of the object that can be linked.</typeparam>
            <param name="idGetter">Delegate that returns the unique id of the object</param>
            <returns>Builder for configuring how to link <typeparamref name="T"/> to other objects</returns>
        </member>
        <member name="M:Sels.Core.Data.Linking.IRelationalLinker.Link``1(``0,System.Object,System.Object[])">
            <summary>
            Links together <paramref name="firstObject"/>, <paramref name="secondObject"/> and optionally <paramref name="additionalObjects"/>.
            </summary>
            <typeparam name="T">The type of the first object</typeparam>
            <param name="firstObject">The first object to link</param>
            <param name="secondObject">The second object to link</param>
            <param name="additionalObjects">AOptional additonal objects to link</param>
            <returns><paramref name="firstObject"/></returns>
        </member>
        <member name="M:Sels.Core.Data.Linking.IRelationalLinker.GetAll``1">
            <summary>
            Gets all objects of type <typeparamref name="T"/> that the current instance has linked.
            </summary>
            <typeparam name="T">Type of the objects to fetch</typeparam>
            <returns>Enumerator returning all the linked objects</returns>
        </member>
        <member name="M:Sels.Core.Data.Linking.IRelationalLinker.GetAll(System.Type)">
            <summary>
            Gets all objects of <paramref name="type"/> that the current instance has linked.
            </summary>
            <returns>Enumerator returning all the linked objects</returns>
        </member>
        <member name="T:Sels.Core.Data.Linking.IRelationalLinkBuilder`1">
            <summary>
            Builder on how to link object of type <typeparamref name="T"/> to other objects.
            </summary>
            <typeparam name="T">Type of the object to create configuration for</typeparam>
        </member>
        <member name="M:Sels.Core.Data.Linking.IRelationalLinkBuilder`1.InitializeWith(System.Action{`0})">
            <summary>
            Initializes an object of type <typeparamref name="T"/> the first time the linker sees the object.
            </summary>
            <param name="initializer">Action that initializes the supplied object</param>
            <returns>The current builder for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Data.Linking.IRelationalLinkBuilder`1.LinkTo``1(System.Func{`0,``0,System.Boolean},System.Action{`0,``0})">
            <summary>
            Defines a link from <typeparamref name="T"/> to <typeparamref name="TLink"/>.
            </summary>
            <typeparam name="TLink">The object to link <typeparamref name="T"/> to</typeparam>
            <param name="condition">The condition that dictates that 2 objects can be linked</param>
            <param name="linker">The delegate that links together the objects</param>
            <returns>The current builder for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Data.Contracts.Repository.IDataRepository`2">
            <summary>
            Repository that allows for crud operations on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity the perform crud operations on</typeparam>
            <typeparam name="TId">The type of the primary id of <typeparamref name="TEntity"/></typeparam>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.OpenNewConnectionAsync(System.Boolean,System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Opens a new connection that can be used to perform actions on this repository.
            </summary>
            <param name="startTransaction">If a transaction must be created as well. Can be set to false when only reading data</param>
            <param name="isolationLevel">The isolation for the transaction if <paramref name="startTransaction"/> is set to true</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>A connection used to perform actions on the current service</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.CreateAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,`0,System.Threading.CancellationToken)">
            <summary>
            Persist <paramref name="entity"/> to the database.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="entity">The entity to persist</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>The created entity with any changes done by the database (Default values, incrementing ids, ...)</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.CreateAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Persists all <paramref name="entities"/> to the database.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="entities">The entities to persist</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>The created entities with any changes done by the database (Default values, incrementing ids, ...)</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.ExistsAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,`1,System.Threading.CancellationToken)">
            <summary>
            Checks if an <typeparamref name="TEntity"/> with <paramref name="id"/> exists.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="id">The id of the entity to check</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>True if a <typeparamref name="TEntity"/> with <paramref name="id"/> exists, otherwise false</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.GetAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,`1,System.Threading.CancellationToken)">
            <summary>
            Gets <typeparamref name="TEntity"/> with <paramref name="id"/>.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="id">The id of the entity to fetch</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>Entity with <paramref name="id"/> or null if it doesn't exist.</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.GetAllAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,System.Threading.CancellationToken)">
            <summary>
            Gets all <typeparamref name="TEntity"/>.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>All persisted <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.UpdateAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,`0,System.Threading.CancellationToken)">
            <summary>
            Persists any changes to <paramref name="entity"/> to the database.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="entity">The entity to update</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>The updated entity with any changes done by the database (Default values, incrementing ids, ...)</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.UpdateAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Persists any changes to all <paramref name="entities"/> to the database.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="entities">The entities to update</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>The updates entities with any changes done by the database (Default values, incrementing ids, ...)</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.DeleteAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,`1,System.Threading.CancellationToken)">
            <summary>
            Deletes <typeparamref name="TEntity"/> with id <paramref name="id"/>.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="id">Id of the entity to delete</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>The deleted entity</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepository`2.DeleteAsync(Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection,System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Deletes all <typeparamref name="TEntity"/> with <paramref name="ids"/>.
            </summary>
            <param name="connection">The connection to perform the request with</param>
            <param name="ids">Ids of the entities to delete</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>The deleted entities</returns>
        </member>
        <member name="T:Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection">
            <summary>
            Represents an opened connection that can be used to perform actions on a <see cref="T:Sels.Core.Data.Contracts.Repository.IDataRepository`2"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection.Connection">
            <summary>
            The opened database connection.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection.Transaction">
            <summary>
            Optional transaction if one was created when creating the current connection.
            </summary>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits <see cref="P:Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection.Transaction"/>.
            </summary>
            <param name="token">Optional token to cancel the request</param>
            <returns>Task to await the result</returns>
        </member>
        <member name="M:Sels.Core.Data.Contracts.Repository.IDataRepositoryConnection.CreateTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
            Creates a new transaction for the current connection.
            </summary>
            <param name="isolationLevel">The isolation level for the transaction</param>
            <param name="token">Optional token to cancel the request</param>
            <returns>Task to await the result</returns>
        </member>
        <member name="T:Sels.Core.Data.Domain.BaseDomainEntity`1">
            <summary>
            Base class for a domain entity containing common shared properties.
            </summary>
            <typeparam name="TId">Type of the primary id</typeparam>
        </member>
        <member name="P:Sels.Core.Data.Domain.BaseDomainEntity`1.Id">
            <summary>
            The unique id of this entity.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.Domain.BaseDomainEntity`1.CreatedBy">
            <summary>
            Key of the entity (User, background job, ...) that created this entity.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.Domain.BaseDomainEntity`1.CreatedAt">
            <summary>
            The time when the entity was created.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.Domain.BaseDomainEntity`1.ModifiedBy">
            <summary>
            Key of the entity (User, background job, ...) that modified this entity last.
            </summary>
        </member>
        <member name="P:Sels.Core.Data.Domain.BaseDomainEntity`1.ModifiedAt">
            <summary>
            THe last time this entity was modified.
            </summary>
        </member>
    </members>
</doc>

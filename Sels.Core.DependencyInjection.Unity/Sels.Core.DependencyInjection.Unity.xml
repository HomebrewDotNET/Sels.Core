<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.DependencyInjection.Unity</name>
    </assembly>
    <members>
        <member name="T:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory">
            <summary>
            <see cref="T:Sels.Core.Contracts.Factory.IServiceFactory"/> implementation using Unity.
            </summary>
        </member>
        <member name="P:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.DefaultContainer">
            <summary>
            Default container used when calling the no arg constructor.
            </summary>
        </member>
        <member name="P:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.Container">
            <summary>
            Container with the registered services.
            </summary>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.#ctor">
            <summary>
            <see cref="T:Sels.Core.Contracts.Factory.IServiceFactory"/> implementation using Unity. Uses <see cref="P:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.DefaultContainer"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.#ctor(Unity.IUnityContainer)">
            <summary>
            <see cref="T:Sels.Core.Contracts.Factory.IServiceFactory"/> implementation using Unity.
            </summary>
            <param name="container">Container to use</param>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.IsRegistered(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.IsRegistered``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.IsRegistered(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.IsRegistered``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.LoadFrom(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.CreateChild">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.Resolve``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.Resolve``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.Resolve(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.Resolve(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.ResolveAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.DependencyInjection.Unity.Components.Containers.UnityServiceFactory.ResolveAll(System.Type)">
            <inheritdoc/>
        </member>
    </members>
</doc>

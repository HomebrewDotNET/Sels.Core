<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.Factory.Autofac</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations">
            <summary>
            Contains extension methods for registering services into a service collection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAutofacServiceFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds <see cref="T:Sels.Core.Factory.Autofac.AutofacServiceFactory"/> as <see cref="T:Sels.Core.Factory.IServiceFactory"/>.
            </summary>
            <param name="services">Collection to add the service registration to</param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="T:Microsoft.Extensions.Hosting.HostBuilderRegistrations">
            <summary>
            Contains extension methods for setting up a host builder.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Hosting.HostBuilderRegistrations.UseAutofacWithServiceFactory(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Autofac.ContainerBuilder})">
            <summary>
            Configures autofac as the IoC container provider and registers a <see cref="!:IServiceFactory"/> using Autofac.
            </summary>
            <param name="hostBuilder">The builder to configure</param>
            <param name="containerBuilder">Optional delegate for configuring the autofac container</param>
            <returns><paramref name="hostBuilder"/> for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Factory.Autofac.AutofacServiceFactory">
            <summary>
            Service factory implemented using Autofac.
            </summary>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.#ctor(Autofac.ILifetimeScope)">
            <inheritdoc cref="T:Sels.Core.Factory.Autofac.AutofacServiceFactory"/>
            <param name="scope">The scope used to resolve services</param>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.Resolve``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.Resolve``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.Resolve(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.Resolve(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.ResolveAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.ResolveAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.IsRegistered(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.IsRegistered``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.IsRegistered(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.IsRegistered``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.GetImplementerFor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.GetImplementerFor``1">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.GetImplementerFor(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.GetImplementerFor``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.CreateScope">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Factory.Autofac.AutofacServiceFactory.Dispose">
            <summary>
            Disposed of the current factory scope which in turn will dispose any resolved services (Taking into account the service lifetimes)
            </summary>
        </member>
    </members>
</doc>

using Microsoft.Extensions.Caching.Memory;
using Sels.ObjectValidationFramework.Profile;
using Sels.SQL.QueryBuilder.Builder;
using System;
using System.Collections.Generic;
using System.Text;

namespace Sels.SQL.QueryBuilder
{
    /// <summary>
    /// Exposes extra options for <see cref="ISqlQueryProvider"/> and <see cref="ICachedSqlQueryProvider"/>.
    /// </summary>
    public class SqlQueryProviderOptions
    {
        /// <summary>
        /// The threshold above which a warning will be logged when any method on <see cref="ISqlQueryProvider"/> or <see cref="ICachedSqlQueryProvider"/> takes longer to execute.
        /// </summary>
        public TimeSpan PerformanceWarningDurationThreshold { get; set; } = TimeSpan.FromMilliseconds(100);
        /// <summary>
        /// The threshold above which an error will be logged when any method on <see cref="ISqlQueryProvider"/> or <see cref="ICachedSqlQueryProvider"/> takes longer to execute.
        /// </summary>
        public TimeSpan PerformanceErrorDurationThreshold { get; set; } = TimeSpan.FromMilliseconds(500);

        /// <summary>
        /// The caching options that will be used by <see cref="ICachedSqlQueryProvider"/> when caching queries.
        /// </summary>
        public MemoryCacheEntryOptions CacheEntryOptions { get; set; } = new MemoryCacheEntryOptions();
        /// <summary>
        /// The compilation options for queries generated by <see cref="ICachedSqlQueryProvider"/>.
        /// </summary>
        public ExpressionCompileOptions CompileOptions { get; set; } = ExpressionCompileOptions.AppendSeparator;
    }
    /// <summary>
    /// Contains the validation rules for <see cref="SqlQueryProviderOptions"/>.
    /// </summary>
    internal class SqlQueryProviderOptionsValidationProfile : ValidationProfile<string>
    {
        /// <inheritdoc cref="SqlQueryProviderOptionsValidationProfile"/>
        public SqlQueryProviderOptionsValidationProfile()
        {
            CreateValidationFor<SqlQueryProviderOptions>()
                .ForProperty(x => x.PerformanceErrorDurationThreshold)
                    .ValidIf(x => x.Value > x.Source.PerformanceWarningDurationThreshold, x => $"Must be larger than <{nameof(x.Source.PerformanceWarningDurationThreshold)}>")
                .ForProperty(x => x.CacheEntryOptions)
                    .CannotBeNull();
        }
    }
}

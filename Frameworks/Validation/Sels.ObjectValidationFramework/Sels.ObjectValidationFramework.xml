<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.ObjectValidationFramework</name>
    </assembly>
    <members>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationInfo">
            <summary>
            Validation info for validation rules created for a property that is a collection.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationInfo.ValueIndex">
            <summary>
            Current index of the <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> that is being validated.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Validation info for validation rules created for a property that is a collection.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationRule`5">
            <summary>
            Validation rule for validating the elements from a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TElement">Type of the elements from the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationRule`5.#ctor(System.Reflection.PropertyInfo,System.Func{`3,`4},Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="property">The property that is being validated</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationRule`4">
            <summary>
            Validation rule for validating the elements from a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TElement">Type of the elements from the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationRule`4.#ctor(System.Reflection.PropertyInfo,System.Func{`2,`3},Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="property">The property that is being validated</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.NullValidationInfo">
            <summary>
            Empty info object for <see cref="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4"/> that don't supply any additional information.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.NullValidationInfo.Instance">
            <summary>
            Singleton instance to avoid creating useless Null objects.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationInfo">
            <summary>
            Validation info for validation rules created for a property.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationInfo.Property">
            <summary>
            The property that is being validated.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Validation info for validation rules created for a property.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`5">
            <summary>
            Validation rule for validating a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TPropertyValue">Type of the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`5.#ctor(System.Reflection.PropertyInfo,System.Boolean,System.Func{`3,`4},Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="property">The property that is being validated</param>
            <param name="isSubSelection">If <paramref name="valueSelector"/> selects a value from property. False if it just returns the property value</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`5.CreateInfo(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`5.TryGetValueToValidate(`0,`4@)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`4">
            <summary>
            Validation rule for validating a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TPropertyValue">Type of the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`4.#ctor(System.Reflection.PropertyInfo,System.Boolean,System.Func{`2,`3},Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="property">The property that is being validated</param>
            <param name="isSubSelection">If <paramref name="valueSelector"/> selects a value from property. False if it just returns the property value</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.PropertyValidationRule`4.CreateNewConfigurator``1">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`4">
            <summary>
            Validation rule for validating values selected from the source entity of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`4.#ctor(System.Func{`0,`3},Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`4.CreateInfo(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`4.TryGetValueToValidate(`0,`3@)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`3">
            <summary>
            Validation rule for validating values selected from the source entity of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`3.#ctor(System.Func{`0,`2},Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.SourceValidationRule`3.CreateNewConfigurator``1">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.Source">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.ElementIndex">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.Parents">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.CurrentParent">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.Context">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.#ctor(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="source"><see cref="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.Source"/></param>
            <param name="context"><see cref="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.Context"/></param>
            <param name="elementIndex"><see cref="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.ElementIndex"/></param>
            <param name="parents"><see cref="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`1.Parents"/></param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`2">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`2.Context">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`2.WasContextSupplied">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`4">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`4.Info">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Rules.ValidationRuleContext`4.Value">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Validators.DynamicValidator`3">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1"/>'s.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.DynamicValidator`3.#ctor(Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile{`1},System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1"/>'s.
            </summary>
            <param name="profile">Profile to delegate validation to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="loggers">Optional loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.DynamicValidator`3.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger},Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile{`1}[])">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1"/>'s.
            </summary>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="loggers">Optional loggers for logging</param>
            <param name="profiles">Profiles to delegate validation to</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.DynamicValidator`3.Validate(`0,`2)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.DynamicValidator`3.Validate(System.Collections.Generic.IEnumerable{`0},`2)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2">
            <summary>
            Validator that allows for the creation of validation rules for type <typeparamref name="TEntity"/> and using the rules to validate instances of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of object to validate</typeparam>
            <typeparam name="TError">Type of validation error that the validator returns</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="loggers">Loggers for tracing</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.AddNewRule(Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule{`0,`1})">
            <summary>
            Adds a new rule that this validator can use to validate objects of type <typeparamref name="TEntity"/>.
            </summary>
            <param name="rule">Rule to add</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ForSource">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ForSource``1(System.Func{`0,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}},System.Action{Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.CanValidate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`2.Validate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`1">
            <summary>
            Untyped validator that exposes methods for validating objects.
            </summary>
            <typeparam name="TError">Type of validation error that the validator returns</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`1.CanValidate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <summary>
            Checks if this validator can validate <paramref name="objectToValidate"/>.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>If this validator can validate <paramref name="objectToValidate"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.EntityValidator`1.Validate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <summary>
            Validates <paramref name="objectToValidate"/> and returns the validation errors if they occured for <paramref name="objectToValidate"/>.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>All the validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Components.Validators.Parent">
            <summary>
            Represents an object in the current hierarchical object structure if property fallthrough is enabled. When fallthrough is executed on a property the object that the property is from will be used as the last parent in the hierachy .
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Validators.Parent.Instance">
            <summary>
            The instance of the parent.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Validators.Parent.ChildProperty">
            <summary>
            The property on <see cref="P:Sels.ObjectValidationFramework.Components.Validators.Parent.Instance"/> that the next object in the hierarchy came from. Can be the next parent or the current value that's being validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Components.Validators.Parent.ElementIndex">
            <summary>
            Index of <see cref="P:Sels.ObjectValidationFramework.Components.Validators.Parent.Instance"/> if it was part of a collection. Will be null if it wasn't part of a collection.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Components.Validators.Parent.#ctor(System.Object,System.Reflection.PropertyInfo,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="instance"><see cref="P:Sels.ObjectValidationFramework.Components.Validators.Parent.Instance"/></param>
            <param name="property"><see cref="P:Sels.ObjectValidationFramework.Components.Validators.Parent.ChildProperty"/></param>
            <param name="elementIndex"><see cref="P:Sels.ObjectValidationFramework.Components.Validators.Parent.ElementIndex"/></param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`5">
            <summary>
            Configurator for creating validation rules for value of type <typeparamref name="TValue"/> using a context of type <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`5.ValidIf(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4}},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4},`1})">
            <summary>
            Creates a new validation rule that validates values of type <typeparamref name="TValue"/> using <paramref name="condition"/>. <paramref name="errorConstructor"/> will create a validation error of type <typeparamref name="TError"/> when <paramref name="condition"/> fails.
            </summary>
            <param name="condition">Delegate that checks if <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is a valid value</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`5.InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4}},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4},`1})">
            <summary>
            Creates a new validation rule that validates values of type <typeparamref name="TValue"/> using <paramref name="condition"/>. <paramref name="errorConstructor"/> will create a validation error of type <typeparamref name="TError"/> when <paramref name="condition"/> succeeds.
            </summary>
            <param name="condition">Delegate that checks if <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is a valid value</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`5.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4}})">
            <summary>
            Validation rules configured after this method call will only be performed when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the validation rules configured after this method call can be executed</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`4">
            <summary>
            Configurator for creating validation rules for value of type <typeparamref name="TValue"/> using an untyped context.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`4.WithContext``1">
            <summary>
            Creates a configurator that uses a typed context of type <typeparamref name="TContext"/> used to create validatiion rules.
            </summary>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <returns>Current configurator with a context of type <typeparamref name="TContext"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.Source">
            <summary>
            The entity that is being validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.ElementIndex">
            <summary>
            Index of <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.Source"/> if it was part of a collection. Will be null if it wasn't part of a collection.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.Parents">
            <summary>
            Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.CurrentParent">
            <summary>
            The parent of the value that's being validated. Is null when property fallthough is disabled or when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.Source"/> is the first object in the hierarchy.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`1.Context">
            <summary>
            Optional context that can be supplied to a validation rule.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`2">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`2.Context">
            <summary>
            Optional context that can be supplied to a validation rule. Is the default value for type <typeparamref name="TContext"/> if no context was supplied.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`2.WasContextSupplied">
            <summary>
            If a context of type <typeparamref name="TContext"/> was supplied to the validation rule. If true then <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`2.Context"/> will be set, otherwise <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`2.Context"/> will the default value of <typeparamref name="TContext"/>.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Info">
            <summary>
            Contains additional information about the current validation rule.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value">
            <summary>
            The value that is being validated.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2">
            <summary>
            Configurator for creating validation rules for objects of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of object to create validation rules for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ForSource">
            <summary>
            Creates a configurator for creating validation rules for <typeparamref name="TEntity"/>.
            </summary>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ForSource``1(System.Func{`0,``0})">
            <summary>
            Creates a configurator for creating validation rules for <typeparamref name="TValue"/> selected from <typeparamref name="TEntity"/>.
            </summary>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <typeparam name="TValue">Type of value to validate</typeparam>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Creates a configurator for creating validation rules for <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <typeparam name="TPropertyValue">Type of property to validate</typeparam>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})">
            <summary>
            Creates a configurator for creating validation rules for the value selected by <paramref name="valueSelector"/> from <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <param name="valueSelector">Delegate that selects the value to validate on <paramref name="property"/></param>
            <typeparam name="TPropertyValue">Type of property to validate</typeparam>
            <typeparam name="TValue">Type of value to validate</typeparam>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ForElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Creates a configurator for creating validation rules for the elements in <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <typeparam name="TElement">Type of element to validate</typeparam>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})">
            <summary>
            Creates a configurator for creating validation rules for the value selected by <paramref name="valueSelector"/> for each element in <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <param name="valueSelector">Delegate that selects the value to validate on each element in <paramref name="property"/></param>
            <typeparam name="TElement">Type of element to validate</typeparam>
            <typeparam name="TValue">Type of value to validate</typeparam>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}},System.Action{Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator{`0,`1}})">
            <summary>
            All validation rules created with <paramref name="configurator"/> will only be executed when <paramref name="condition"/> passes.
            </summary>
            <param name="condition">Delegate that checks if validation rules created with <paramref name="configurator"/> can be executed</param>
            <param name="configurator">Configurator for creating validation rules</param>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator{`0,`1}})">
            <summary>
            All validation rules created with <paramref name="configurator"/> will only be executed when <paramref name="condition"/> passes. Condition uses a context of type <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="condition">Delegate that checks if validation rules created with <paramref name="configurator"/> can be executed</param>
            <param name="configurator">Configurator for creating validation rules</param>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}})">
            <summary>
            All validation rules created fter calling this method will only be executed when <paramref name="condition"/> passes.
            </summary>
            <param name="condition">Delegate that checks if validation rules can be executed</param>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,``0}})">
            <summary>
            All validation rules created fter calling this method will only be executed when <paramref name="condition"/> passes. Condition uses a context of type <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="condition">Delegate that checks if validation rules can be executed</param>
            <returns>Configurator for creating validation rules</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions">
            <summary>
            Contains generic configuration extensions for collection types.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.CannotBeEmpty``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it contains at least 1 element.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.CannotBeEmpty``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it contains at least 1 element.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustBeEmpty``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it doesn't contain any elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustBeEmpty``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it doesn't contain any elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContain``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it contains <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">How many elements the collection must contain</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContain``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it contains <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">How many elements the collection must contain</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainAtMax``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it only contains a max of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainAtMax``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it only contains a max of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainAtLeast``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it only contains a min of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainAtLeast``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it only contains a min of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainInRange``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it contains more or equal to <paramref name="minCount"/> and less or equal to <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainInRange``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it contains more or equal to <paramref name="minCount"/> and less or equal to <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainInBetween``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it contains between <paramref name="minCount"/> and <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.MustContainInBetween``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it contains more or equal to <paramref name="minCount"/> and less or equal to <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.AllMustBeUnique``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when all elements are unique. Values are compared using <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.CollectionValidationExtensions.AllMustBeUnique``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when all elements are unique. Values are compared using <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions">
            <summary>
            Contains generic configuration extensions for comparable types.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeLargerThan``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.IComparable,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is larger than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeLargerThan``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.IComparable,System.Boolean)">
            <summary>
            Value is only valid when it is larger than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeLargerOrEqualTo``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.IComparable,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is larger or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeLargerOrEqualTo``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.IComparable,System.Boolean)">
            <summary>
            Value is only valid when it is larger or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeSmallerThan``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.IComparable,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is smaller than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeSmallerThan``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.IComparable,System.Boolean)">
            <summary>
            Value is only valid when it is smaller than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeSmallerOrEqualTo``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.IComparable,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is smaller or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeSmallerOrEqualTo``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.IComparable,System.Boolean)">
            <summary>
            Value is only valid when it is smaller or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeBetween``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.IComparable,System.IComparable,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is between <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeBetween``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.IComparable,System.IComparable,System.Boolean)">
            <summary>
            Value is only valid when it is between <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeInRange``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.IComparable,System.IComparable,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is larger or equal to <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ComparableValidationExtensions.MustBeInRange``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.IComparable,System.IComparable,System.Boolean)">
            <summary>
            Value is only valid when it is between <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.ContextExtensions">
            <summary>
            Extra extension methods for working the with validation rule context
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ContextExtensions.GetDisplayName``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ContextExtensions.GetFullDisplayName``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,Sels.ObjectValidationFramework.Components.Rules.NullValidationInfo,``1,``2},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that being's validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ContextExtensions.GetFullDisplayName``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,Sels.ObjectValidationFramework.Components.Rules.PropertyValidationInfo,``1,``2},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated. Includes the property name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ContextExtensions.GetFullDisplayName``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,Sels.ObjectValidationFramework.Components.Rules.CollectionPropertyValidationInfo,``1,``2},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated. Includes the property name with collection index.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ContextExtensions.GetFullDisplayNameDynamically``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated. Dynamically selects the right overload.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions">
            <summary>
            Contains generic configuration extensions for datetimes.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeInTheFuture``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.DateTime},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.DateTime},``1})">
            <summary>
            Value is only valid when it is a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeInTheFuture``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.DateTime},System.Boolean)">
            <summary>
            Value is only valid when it is a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeTodayOrInTheFuture``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.DateTime},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.DateTime},``1})">
            <summary>
            Value is only valid when it is today or a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeTodayOrInTheFuture``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.DateTime},System.Boolean)">
            <summary>
            Value is only valid when it is today or a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeInThePast``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.DateTime},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.DateTime},``1})">
            <summary>
            Value is only valid when it is a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeInThePast``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.DateTime},System.Boolean)">
            <summary>
            Value is only valid when it is a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeTodayOrInThePast``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.DateTime},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.DateTime},``1})">
            <summary>
            Value is only valid when it is today or a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeTodayOrInThePast``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.DateTime},System.Boolean)">
            <summary>
            Value is only valid when it is today or a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeAfter``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.DateTime},System.DateTime,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.DateTime},``1})">
            <summary>
            Value is only valid when it is after <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeAfter``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.DateTime},System.DateTime,System.Boolean)">
            <summary>
            Value is only valid when it is after <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeBefore``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.DateTime},System.DateTime,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.DateTime},``1})">
            <summary>
            Value is only valid when it is before <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.DateTimeValidationExtensions.MustBeBefore``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.DateTime},System.DateTime,System.Boolean)">
            <summary>
            Value is only valid when it is before <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.FileSystemValidationExtensions">
            <summary>
            Contains generic configuration extensions for file system types.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.FileSystemValidationExtensions.MustExists``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it exists on the file system.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.FileSystemValidationExtensions.MustExists``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it exists on the file system.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions">
            <summary>
            Contains generic configuration extensions. 
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.CannotBeNull``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is not null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.CannotBeNull``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it is not null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.CannotBeDefault``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is not the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.CannotBeDefault``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it is not the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.MustBeNull``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.MustBeNull``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it is null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.MustBeDefault``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.MustBeDefault``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},System.Boolean)">
            <summary>
            Value is only valid when it is not the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.MustBeIn``5(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,``4},``4[],System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,``4},``1})">
            <summary>
            Value is only valid when it is in <paramref name="validValues"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="validValues">Array of valid values</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.MustBeIn``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3},``3[],System.Boolean)">
            <summary>
            Value is only valid when it is in <paramref name="validValues"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="validValues">Array of valid values</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.WhenNotNull``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3})">
            <summary>
            Validation rules created after this method call will only be executed when value is not null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.GenericValidationExtensions.WhenNotDefault``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,``3})">
            <summary>
            Validation rules created after this method call will only be executed when value is not the default value for it's type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions">
            <summary>
            Contains generic configuration extensions for strings.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotBeNullOrEmpty``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it is not null or empty.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotBeNullOrEmpty``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it is not null or empty.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotBeNullOrWhitespace``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it is not null, empty or whitespace.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotBeNullOrWhitespace``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it is not null, empty or whitespace.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustMatchRegex``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.String,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustMatchRegex``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.String,System.Boolean)">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustMatchRegex``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Text.RegularExpressions.Regex,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustMatchRegex``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotMatchRegex``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.String,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotMatchRegex``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.String,System.Boolean)">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotMatchRegex``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Text.RegularExpressions.Regex,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.CannotMatchRegex``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasMaxLengthOf``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it's length is smaller or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Max allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasMaxLengthOf``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it's length is smaller or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Max allowed length</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasMinLengthOf``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Min allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasMinLengthOf``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Min allowed length</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasLengthInRangeOf``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="minLength"/> and smaller or equal to <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasLengthInRangeOf``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="minLength"/> and smaller or equal to <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasLengthBetween``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it's length is larger than <paramref name="minLength"/> and smaller than <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.HasLengthBetween``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Value is only valid when it's length is larger than <paramref name="minLength"/> and smaller than <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeValidPath``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it is a valid directory path.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeValidPath``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it is a valid directory path.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeValidFileName``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it is a valid file name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeValidFileName``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it is a valid file name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeExistingPath``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it points to an existing directory.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeExistingPath``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it points to an existing directory.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeExistingFileName``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it points to an existing file.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeExistingFileName``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it points to an existing file.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeValidTypeName``4(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{``0,``2,``3,System.String},``1})">
            <summary>
            Value is only valid when it is a valid type name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.StringValidationExtensions.MustBeValidTypeName``3(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator{``0,System.String,``1,``2,System.String},System.Boolean)">
            <summary>
            Value is only valid when it is a valid type name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1">
            <summary>
            Profile that can be configured using a fluent syntax to validate object of a certain type.
            </summary>
            <typeparam name="TError">Type of validation error to return</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="loggers">Optional loggers for tracing</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.CreateValidationFor``1">
            <summary>
            Creates a new configurator for creating validation for objetcs of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to create validation for</typeparam>
            <returns>A configurator for creating validation</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnoreForFallthrough(System.Predicate{System.ValueTuple{System.Object,System.Reflection.PropertyInfo,System.Object}})">
            <summary>
            Validation will not be called on the property or elements from a collection if <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnoreForFallthrough``1(System.Predicate{System.ValueTuple{``0,System.Reflection.PropertyInfo,System.Object}})">
            <summary>
            Validation will not be called on the property or elements from a collection if <paramref name="condition"/> returns true. Only gets executed when property can be assigned to <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of the property value</typeparam>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnoreForFallthroughWhenContext``1(System.Predicate{System.ValueTuple{System.Object,System.Reflection.PropertyInfo,``0}})">
            <summary>
            Validation will not be called on the property or elements from a collection if <paramref name="condition"/> returns true. Only gets executed when context can be assigned to <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TContext">Type of the supplied context</typeparam>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnoreForFallthroughWhenContext``2(System.Predicate{System.ValueTuple{System.Object,System.Reflection.PropertyInfo,``0}})">
            <summary>
            Validation will not be called on the property or elements from a collection if <paramref name="condition"/> returns true. Only gets executed when context can be assigned to <typeparamref name="TContext"/> and property can be assigned to <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of the property value</typeparam>
            <typeparam name="TContext">Type of the supplied context</typeparam>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnorePropertyForFallthrough``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Validation will not be called for the property selected by <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of the entity <paramref name="property"/> is from</typeparam>
            <param name="property">Delegate that selects the property on <typeparamref name="TEntity"/></param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnorePropertyForFallthrough``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Predicate{System.Object})">
            <summary>
            Validation will not be called for the property selected by <paramref name="property"/> on <typeparamref name="TEntity"/>. Property will only be ignored when <paramref name="contextCondition"/> returns true.
            </summary>
            <typeparam name="TEntity">Type of the entity <paramref name="property"/> is from</typeparam>
            <param name="property">Delegate that selects the property on <typeparamref name="TEntity"/></param>
            <param name="contextCondition">Condition supplied context must pass before <paramref name="property"/> is ignored.</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.IgnorePropertyForFallthrough``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Predicate{``1})">
            <summary>
            Validation will not be called for the property selected by <paramref name="property"/> on <typeparamref name="TEntity"/>. Property will only be ignored when content is of type <typeparamref name="TContext"/> and when <paramref name="contextCondition"/> returns true.
            </summary>
            <typeparam name="TEntity">Type of the entity <paramref name="property"/> is from</typeparam>
            <typeparam name="TContext">Type of the context</typeparam>
            <param name="property">Delegate that selects the property on <typeparamref name="TEntity"/></param>
            <param name="contextCondition">Condition supplied context must pass before <paramref name="property"/> is ignored.</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.ImportFrom(Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile{`0},Sels.ObjectValidationFramework.Templates.Profile.ImportOptions)">
            <summary>
            Import configuration from <paramref name="profile"/> into this profile.
            </summary>
            <param name="profile">Profile to import from</param>
            <param name="options">What to import</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.ImportFrom``1(Sels.ObjectValidationFramework.Templates.Profile.ImportOptions)">
            <summary>
            Import configuration from <typeparamref name="TProfile"/> into this profile.
            </summary>
            <typeparam name="TProfile">Type of profile to import options from</typeparam>
            <param name="options">What to import</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.ImportFrom(System.Func{Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile{`0}},Sels.ObjectValidationFramework.Templates.Profile.ImportOptions)">
            <summary>
            Import configuration from the profile created by <paramref name="constructor"/> into this profile.
            </summary>
            <param name="constructor">Delegate that creates the profile instance to import from</param>
            <param name="options">What to import</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Profile.ValidationProfile`1.Validate(System.Object,System.Object)">
            <summary>
            Validates <paramref name="objectToValidate"/> using the configuration in the profile and returns alls validation errors.
            </summary>
            <param name="objectToValidate">The object to validate</param>
            <param name="context">Optional context that can be used by the validation configuration</param>
            <returns>All validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Profile.ImportOptions">
            <summary>
            Tells what to import from another profile.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Templates.Profile.ImportOptions.All">
            <summary>
            Import everything
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Templates.Profile.ImportOptions.IgnoreConditions">
            <summary>
            Impors all conditions for what properties/collection to ignore for fallthough.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Templates.Profile.ImportOptions.Configuration">
            <summary>
            Import all configured validation.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4">
            <summary>
            Template for creating a validator that implements <see cref="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`4"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.#ctor(Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,System.Object,`3}},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,System.Object,`3},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,System.Object,`3}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.ValidIf(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,System.Object,`3}},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,System.Object,`3},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.WithContext``1">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.Validate(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextlessValidationRule`4.CreateNewConfigurator``1">
            <summary>
            Creates a new instance of the current validation rule but with a context of <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <returns>A new validation rule with context of <typeparamref name="TContext"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5">
            <summary>
            Template for creating a validator that implements <see cref="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleConfigurator`5"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.#ctor(Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.ValidIf(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4}},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4}},System.Func{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.GetEnabledValidatorsFor(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,`2,`3,`4})">
            <summary>
            Returns all enabled validators where all conditions pass for <paramref name="context"/>.
            </summary>
            <param name="context">Context of the current <typeparamref name="TEntity"/> that is being validated</param>
            <returns>All enabled validators</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.CreateContext(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <summary>
            Creates the validation rule context.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>The validation rule context to use for validation</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.ValidationRuleValidator">
            <summary>
            Wrapper for the validation rule delegates.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.ValidationRuleValidator.Conditions">
            <summary>
            Predicates that tell when the rule is allowed to run.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.ValidationRuleValidator.Validator">
            <summary>
            Predicate that tells if the <see cref="P:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4.Value"/> is valid or not.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.ValidationRuleValidator.ErrorContructor">
            <summary>
            Function that creates the error in case that the value is not valid.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseContextValidationRule`5.CreateInfo(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <summary>
            Creates the <typeparamref name="TInfo"/> for the <see cref="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4"/>.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>The info object for the <see cref="T:Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext`4"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Rules.BaseMultiValueValidationRule`5">
            <summary>
            Template for creating a validation rule that validates a multiple values.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseMultiValueValidationRule`5.#ctor(Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseMultiValueValidationRule`5.Validate(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseMultiValueValidationRule`5.ModifyInfo(`2,`4,System.Int32)">
            <summary>
            Optional method for modifying <paramref name="info"/> using the current value that's being validated.
            </summary>
            <param name="info">Info object to modifiy</param>
            <param name="value">The current value that's being validated</param>
            <param name="index">Index of <paramref name="value"/> in the source collection</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseMultiValueValidationRule`5.TryGetValueToValidate(`0,System.Collections.Generic.IEnumerable{`4}@)">
            <summary>
            Tries to get the values to validate. Returns false when the value can't returned (in case off null references).
            </summary>
            <param name="objectToValidate">Object to get the value from</param>
            <param name="values">Enumerator with the values to validate</param>
            <returns>Whether or not <paramref name="values"/> was set</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Rules.BaseSingleValueValidationRule`5">
            <summary>
            Template for creating a validation rule that validates a single value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseSingleValueValidationRule`5.#ctor(Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to </param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseSingleValueValidationRule`5.Validate(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseSingleValueValidationRule`5.TryGetValueToValidate(`0,`4@)">
            <summary>
            Tries to get the value to validate. Returns false when the value can't returned (in case off null references).
            </summary>
            <param name="objectToValidate">Object to get the value from</param>
            <param name="value">The value to validate</param>
            <returns>Whether or not <paramref name="value"/> was set</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2">
            <summary>
            Template that wraps the method calls on <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> and adds abstractions for validating objects of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.#ctor(Sels.ObjectValidationFramework.Components.Validators.EntityValidator{`0,`1},System.Collections.Generic.IEnumerable{System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}}},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="validator">Validator to delegate <see cref="T:Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator`2"/> calls to</param>
            <param name="globalConditions">Global conditions that all need to pass before any validation rules are allowed to run</param>
            <param name="loggers">Option loggers for logging</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ForElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ForSource">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ForSource``1(System.Func{`0,``0})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}},System.Action{Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator{`0,`1}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Contracts.Validators.IValidationConfigurator{`0,`1}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,``0}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.CanValidate(Sels.ObjectValidationFramework.Contracts.Rules.IValidationRuleContext{`0,System.Object})">
            <summary>
            If this validation rule is enabled by checking all global conditions against <paramref name="context"/>.
            </summary>
            <param name="context">Context of the current <typeparamref name="TEntity"/> that is being validated</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Templates.Rules.BaseValidationRule`2.Validate(`0,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Components.Validators.Parent[])">
            <summary>
            Validates <paramref name="objectToValidate"/> and returns all validation errors.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>All the validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Extensions.Validation.ValidationExtensions">
            <summary>
            Provides extra extension for validating objects with profiles.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Extensions.Validation.ValidationExtensions.Validate``2(System.Object,System.Object)">
            <summary>
            Validates <paramref name="objectToValidate"/> using a profile of type <typeparamref name="TProfile"/>.
            </summary>
            <typeparam name="TProfile">Type of profile to use for validation</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Type of optional context to moddify the behaviour of this validator</param>
            <returns>All validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceRegistrations">
            <summary>
            Contains extension methods for registering services into a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterProfile``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope)">
            <summary>
            Registers validation profile <typeparamref name="TProfile"/> into the service collection.
            </summary>
            <typeparam name="TProfile">Type of profile to register</typeparam>
            <typeparam name="TError">Type of validation error that the profile returns</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterProfile``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},Sels.Core.Components.IoC.ServiceScope)">
            <summary>
            Registers validation profile <typeparamref name="TProfile"/> into the service collection.
            </summary>
            <typeparam name="TProfile">Type of profile to register</typeparam>
            <typeparam name="TError">Type of validation error that the profile returns</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="profileFactory">Factory that creates instances of <typeparamref name="TProfile"/></param>
            <param name="scope">Which scope to use for the service</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidatorWithContext``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidatorWithContext``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidatorWithContext``6(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileThree">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidatorWithContext``7(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileThree">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileFour">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidatorWithContext``8(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileThree">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileFour">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileFive">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidator``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidator``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidator``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileThree">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidator``6(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileThree">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileFour">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceRegistrations.RegisterValidator``7(Microsoft.Extensions.DependencyInjection.IServiceCollection,Sels.Core.Components.IoC.ServiceScope,System.Boolean,System.Boolean,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger}})">
            <summary>
            Registers a new <see cref="T:Sels.Core.Contracts.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfileOne">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileTwo">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileThree">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileFour">Type of profile to use for the validator</typeparam>
            <typeparam name="TProfileFive">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="registerProfile">If this method should register the profiles. Set to false if already registered in <paramref name="services"/></param>
            <param name="loggerFactory">Optional logger factory that created the loggers for the validator</param>
            <returns>Self</returns>
        </member>
    </members>
</doc>

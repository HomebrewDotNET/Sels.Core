<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.ObjectValidationFramework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations">
            <summary>
            Contains extension methods for registering services into a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidationProfile``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers validation profile <typeparamref name="TProfile"/> into the service collection.
            </summary>
            <typeparam name="TProfile">Type of profile to register</typeparam>
            <typeparam name="TError">Type of validation error that the profile returns</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="scope">Which scope to use for the service</param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidationProfile``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers validation profile <typeparamref name="TProfile"/> into the service collection.
            </summary>
            <typeparam name="TProfile">Type of profile to register</typeparam>
            <typeparam name="TError">Type of validation error that the profile returns</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="profileFactory">Factory that creates instances of <typeparamref name="TProfile"/></param>
            <param name="scope">Which scope to use for the service</param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidatorWithContext``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidator``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidatorWithContext``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidatorWithContext``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidator``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidatorWithContext``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddValidator``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidatorWithContext``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidator``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidatorWithContext``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidatorWithContext``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidator``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <typeparam name="TProfile">Type of profile to use for the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidatorWithContext``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddAsyncValidator``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{``1},``2},System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{``1}}},System.Boolean)">
            <summary>
            Registers a new <see cref="T:Sels.Core.Validation.IAsyncValidator`3"/> that uses the provided profiles to validate entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of validation error returned by the validator</typeparam>
            <param name="services">Service collection to add service to</param>
            <param name="errorProjector">Delegate that converts the errors returned by the validation profiles to the intended error type</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to include in the validator</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddOptionProfileValidator``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{System.String}}},System.Object,Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{System.String},System.String},System.String[])">
            <summary>
            Adds an option validator for type <typeparamref name="TOption"/> that using validation profiles to validate the option instances.
            </summary>
            <typeparam name="TOption">Type of the options to validate</typeparam>
            <param name="services">Service collection to add the service registration to</param>
            <param name="profileConstructor">Delegate that returns the validation profiles to use</param>
            <param name="context">Optional context for the profiles</param>
            <param name="executionOptions">The options to use when calling the validation profiles</param>
            <param name="projector">Optional projector to modify the error messages returned from the profiles. 
            The default projector prefixes the error message like {Property}: {ErrorMessage} if a property is available for the error message</param>
            <param name="targets">The names of the options instances the current validator can target. If set to null or empty all options will be validated</param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApplicationRegistrations.AddOptionProfileValidator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{System.String},System.String},System.String[])">
            <summary>
            Adds an option validator for type <typeparamref name="TOption"/> that uses validation profiles to validate the option instances.
            </summary>
            <typeparam name="TOption">Type of the options to validate</typeparam>
            <typeparam name="TProfile">Type of the validation profile to use</typeparam>
            <param name="services">Service collection to add the service registration to</param>
            <param name="context">Optional context for the profiles</param>
            <param name="executionOptions">The options to use when calling the validation profiles</param>
            <param name="projector">Optional projector to modify the error messages returned from the profiles. 
            The default projector prefixes the error message like {Property}: {ErrorMessage} if a property is available for the error message</param>
            <param name="targets">The names of the options instances the current validator can target. If set to null or empty all options will be validated</param>
            <returns><paramref name="services"/> for method chaining</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Addons.DynamicValidator`3">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>'s.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`3.#ctor(Sels.ObjectValidationFramework.Profile.ValidationProfile{`1},System.Boolean,Microsoft.Extensions.Logging.ILogger{Sels.ObjectValidationFramework.Addons.DynamicValidator{`0,`1,`2}})">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>'s.
            </summary>
            <param name="profile">Profile to delegate validation to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="logger">Optional loggers for tracing</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`3.#ctor(System.Boolean,Microsoft.Extensions.Logging.ILogger{Sels.ObjectValidationFramework.Addons.DynamicValidator{`0,`1,`2}},Sels.ObjectValidationFramework.Profile.ValidationProfile{`1}[])">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>'s.
            </summary>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="logger">Optional loggers for tracing</param>
            <param name="profiles">Profiles to delegate validation to</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`3.Validate(`0,`2)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`3.Validate(System.Collections.Generic.IEnumerable{`0},`2)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`3.ValidateAsync(`0,`2)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`3.ValidateAsync(System.Collections.Generic.IEnumerable{`0},`2)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Addons.DynamicValidator`4">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>'s.
            </summary>
            <typeparam name="TEntity">Type of entity to validate</typeparam>
            <typeparam name="TError">Type of the validation errors returned by the profiles</typeparam>
            <typeparam name="TNewError">Type of the error message returned by the current validator</typeparam>
            <typeparam name="TContext">Type of context that can be used to modify the behaviour of the validator</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`4.#ctor(System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{`1},`2},Sels.ObjectValidationFramework.Profile.ValidationProfile{`1},System.Boolean,Microsoft.Extensions.Logging.ILogger{Sels.ObjectValidationFramework.Addons.DynamicValidator{`0,`1,`2,`3}})">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>'s.
            </summary>
            <param name="projector">Delegate that converts the errors returned by the profiles to the intended error type</param>
            <param name="profile">Profile to delegate validation to</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="logger">Optional loggers for tracing</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`4.#ctor(System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{`1},`2},System.Boolean,Microsoft.Extensions.Logging.ILogger{Sels.ObjectValidationFramework.Addons.DynamicValidator{`0,`1,`2,`3}},Sels.ObjectValidationFramework.Profile.ValidationProfile{`1}[])">
            <summary>
            Validator that delegates validation to <see cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>'s.
            </summary>
            <param name="projector">Delegate that converts the errors returned by the profiles to the intended error type</param>
            <param name="contextIsRequired">If a context is required by this validator. If set to true and context is null the service will throw an <see cref="T:System.ArgumentNullException"/></param>
            <param name="logger">Optional loggers for tracing</param>
            <param name="profiles">Profiles to delegate validation to</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`4.Validate(`0,`3)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`4.Validate(System.Collections.Generic.IEnumerable{`0},`3)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`4.ValidateAsync(`0,`3)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.DynamicValidator`4.ValidateAsync(System.Collections.Generic.IEnumerable{`0},`3)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Addons.OptionsProfileValidator`1">
            <summary>
            Validates options of type <typeparamref name="TOption"/> using validation profiles.
            </summary>
            <typeparam name="TOption">Type of the options to validate</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.OptionsProfileValidator`1.#ctor(System.Collections.Generic.IEnumerable{Sels.ObjectValidationFramework.Profile.ValidationProfile{System.String}},System.Object,Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions,System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{System.String},System.String},Microsoft.Extensions.Logging.ILogger{Sels.ObjectValidationFramework.Addons.OptionsProfileValidator{`0}},System.String[])">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Addons.OptionsProfileValidator`1"/>
            <param name="profiles">The validation profiles used to validate the options instance</param>
            <param name="context">Optional context for the profiles</param>
            <param name="executionOptions">The options to use when calling the validation profiles</param>
            <param name="projector">Optional projector to modify the error messages returned from the profiles. 
            The default projector prefixes the error message like {Property}: {ErrorMessage} if a property is available for the error message</param>
            <param name="logger">Optional logger for tracing</param>
            <param name="targets">The names of the options instances the current validator can target. If set to null or empty all options will be validated</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Addons.OptionsProfileValidator`1.Validate(System.String,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.CollectionPropertyValidationInfo">
            <summary>
            Validation info for validation rules created for a property that is a collection.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.CollectionPropertyValidationInfo.ValueIndex">
            <summary>
            Current index of the <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> that is being validated.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Rules.CollectionPropertyValidationInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Validation info for validation rules created for a property that is a collection.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.NullValidationInfo">
            <summary>
            Empty info object for <see cref="T:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4"/> that don't supply any additional information.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.NullValidationInfo.Instance">
            <summary>
            Singleton instance to avoid creating useless Null objects.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.PropertyValidationInfo">
            <summary>
            Validation info for validation rules created for a property.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.PropertyValidationInfo.Property">
            <summary>
            The property that is being validated.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Rules.PropertyValidationInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Validation info for validation rules created for a property.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.Source">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.ElementIndex">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.Parents">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.CurrentParent">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.Context">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.HasContext">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.ValidatorResult">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.#ctor(`0,`1,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2"/>
            <param name="source"><inheritdoc cref="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.Source"/></param>
            <param name="context"><inheritdoc cref="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.Context"/></param>
            <param name="elementIndex"><inheritdoc cref="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.ElementIndex"/></param>
            <param name="parents"><inheritdoc cref="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`2.Parents"/></param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`4">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`4.Info">
            <inheritdoc/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.ValidationRuleContext`4.Value">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Tyope of the optional context that can be supplied to a validation profile</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Source">
            <summary>
            The entity that is being validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.ElementIndex">
            <summary>
            Index of <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Source"/> if it was part of a collection. Will be null if it wasn't part of a collection.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Parents">
            <summary>
            Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.CurrentParent">
            <summary>
            The parent of the value that's being validated. Is null when property fallthough is disabled or when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Source"/> is the first object in the hierarchy.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Context">
            <summary>
            Optional context that can be supplied to a validation rule.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.HasContext">
            <summary>
            If a context of type <typeparamref name="TContext"/> was supplied to the validation rule. If true then <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Context"/> will be set, otherwise <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.Context"/> will the default value of <typeparamref name="TContext"/>.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.ValidatorResult">
            <summary>
            Property that can be used to pass data from the validator delegate to the error constructor delegate.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4">
            <summary>
            Provides validation rules with the information it needs to validate a value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation target can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of the value that is being validated</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Info">
            <summary>
            Contains additional information about the current validation target.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value">
            <summary>
            The value that is being validated.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6">
            <summary>
            Validation target for validating the elements from a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <typeparam name="TElement">The type of the elements to validate</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6.#ctor(System.Reflection.PropertyInfo,System.Func{`0,System.Collections.Generic.IEnumerable{`4}},System.Func{`4,`5},Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6"/>
            <param name="property">The property that is being validated</param>
            <param name="propertyGetter">The delegate that selects the value from the property to validate</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6.CreateInfo(`0,`3,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6.ModifyInfo(Sels.ObjectValidationFramework.Rules.CollectionPropertyValidationInfo,`5,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6.TryGetValueToValidate(`0,System.Collections.Generic.IEnumerable{`5}@)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`6.ModifyError(Sels.ObjectValidationFramework.Profile.ValidationError{`1})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`5">
            <summary>
            Validation rule for validating the elements from a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TElement">Type of the elements from the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`5.#ctor(System.Reflection.PropertyInfo,System.Func{`0,System.Collections.Generic.IEnumerable{`3}},System.Func{`3,`4},Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`5"/>
            <param name="property">The property that is being validated</param>
            <param name="propertyGetter">The delegate that selects the value from the property to validate</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.CollectionPropertyValidationTarget`5.CreateNewConfigurator``1">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`6">
            <summary>
            Validation rule for validating a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TPropertyValue">Type of the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`6.#ctor(System.Reflection.PropertyInfo,System.Boolean,System.Func{`0,`4},System.Func{`4,`5},Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`6"/>
            <param name="property">The property that is being validated</param>
            <param name="isSubSelection">If <paramref name="valueSelector"/> selects a value from property. False if it just returns the property value</param>
             <param name="propertyGetter">The delegate that selects the value from the property to validate</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`6.CreateInfo(`0,`3,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`6.TryGetValueToValidate(`0,`5@)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`6.ModifyError(Sels.ObjectValidationFramework.Profile.ValidationError{`1})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`5">
            <summary>
            Validation rule for validating a property on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TPropertyValue">Type of the property</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`5.#ctor(System.Reflection.PropertyInfo,System.Boolean,System.Func{`0,`3},System.Func{`3,`4},Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`5"/>
            <param name="property">The property that is being validated</param>
            <param name="isSubSelection">If <paramref name="valueSelector"/> selects a value from property. False if it just returns the property value</param>
             <param name="propertyGetter">The delegate that selects the value from the property to validate</param>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.PropertyValidationTarget`5.CreateNewConfigurator``1">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.SourceValidationTarget`5">
            <summary>
            Validation rule for validating values selected from the source entity of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.SourceValidationTarget`5.#ctor(System.Func{`0,`4},Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.SourceValidationTarget`5.CreateInfo(`0,`3,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.SourceValidationTarget`5.TryGetValueToValidate(`0,`4@)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.SourceValidationTarget`4">
            <summary>
            Validation rule for validating values selected from the source entity of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.SourceValidationTarget`4.#ctor(System.Func{`0,`3},Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.SourceValidationTarget`4.CreateNewConfigurator``1">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.TargetExecutionOptions">
            <summary>
            Modifies the behaviour how and when validation rules are executed.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.TargetExecutionOptions.None">
            <summary>
            No settings selected.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.TargetExecutionOptions.WithSuppliedContext">
            <summary>
            If a context of the required type is required for the validation rules created for the current target 
            If set to false and context is not of the required type then <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.HasContext"/> will be set to false.
            When set to true the rules will only be executed when the supplied context is of the required type.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.TargetExecutionOptions.ExitOnInvalid">
            <summary>
            When a rule returns an error the validation rules defined after won't be executed. By default all rules are executed. 
            Can be handy when the first rule checks for nulls but the rules afterwards don't. This avoids having to add extra null checks after the first rule or <see cref="T:System.NullReferenceException"/>'s.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5">
            <summary>
            Template for creating a validator that implements <see cref="T:Sels.ObjectValidationFramework.Configurators.IValidationTargetRootConfigurator`5"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.#ctor(Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5"/>
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.NextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.ValidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.ValidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.InvalidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.NextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`2,`4}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.WithContext``1">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.Validate(`0,`2,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextlessValidationTarget`5.CreateNewConfigurator``1">
            <summary>
            Creates a new instance of the current validation target but with a context of <typeparamref name="TNewContext"/>.
            </summary>
            <typeparam name="TNewContext">The requested context type for validation rules created by the returned instance</typeparam>
            <returns>A new validation rule with context of type <typeparamref name="TNewContext"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6">
            <summary>
            Template for creating a validator that implements <see cref="T:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.#ctor(Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6"/>.
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.NextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.InvalidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.NextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.GetEnabledValidatorsFor(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5})">
            <summary>
            Returns all enabled validators where all conditions pass for <paramref name="context"/>.
            </summary>
            <param name="context">Context of the current <typeparamref name="TEntity"/> that is being validated</param>
            <returns>All enabled validators</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.CreateContext(`0,`2,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <summary>
            Creates the validation rule context.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>The validation rule context to use for validation</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.CreateInfo(`0,`4,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <summary>
            Creates the <typeparamref name="TInfo"/> for the <see cref="T:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4"/>.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>The info object for the <see cref="T:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule">
            <summary>
            Represents a validation rule created for the current target.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Conditions">
            <summary>
            Predicates that tell when the rule is allowed to run.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Validator">
            <summary>
            Predicate that tells if the <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is valid or not.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.ErrorContructor">
            <summary>
            Function that creates the error in case that the value is not valid.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.#ctor(Sels.ObjectValidationFramework.Target.BaseContextValidationTarget{`0,`1,`2,`3,`4,`5})">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule"/>
            <param name="parent">The target that created the current rule</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.When(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.When(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationTargetConfigurator{TEntity,TError,TBaseContext,TInfo,TTargetContext,TValue}#ValidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationTargetConfigurator{TEntity,TError,TBaseContext,TInfo,TTargetContext,TValue}#InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationTargetConfigurator{TEntity,TError,TBaseContext,TInfo,TTargetContext,TValue}#NextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationTargetConfigurator{TEntity,TError,TBaseContext,TInfo,TTargetContext,TValue}#ValidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationTargetConfigurator{TEntity,TError,TBaseContext,TInfo,TTargetContext,TValue}#InvalidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationTargetConfigurator{TEntity,TError,TBaseContext,TInfo,TTargetContext,TValue}#NextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ForSource(Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ForSource``1(System.Func{`0,``0},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ForElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`2,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`1}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ValidateWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`2,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Sels#ObjectValidationFramework#Configurators#IValidationConfigurator{TEntity,TBaseContext,TError}#ValidateWhen``1(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`1}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.ValidateNextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.ValidateNextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Switch``1(System.Func{`0,``0},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Switch``1(System.Func{`0,``0},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Switch``2(System.Func{`0,``1},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseContextValidationTarget`6.ValidationRule.Switch``2(System.Func{`0,``1},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.BaseMultiValueValidationTarget`6">
            <summary>
            Template for creating a validation target that validates multiple values (like a list, ...).
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseMultiValueValidationTarget`6.#ctor(Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.BaseMultiValueValidationTarget`6"/>.
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseMultiValueValidationTarget`6.Validate(`0,`2,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseMultiValueValidationTarget`6.ModifyInfo(`3,`5,System.Int32)">
            <summary>
            Optional method for modifying <paramref name="info"/> using the current value that's being validated.
            </summary>
            <param name="info">Info object to modifiy</param>
            <param name="value">The current value that's being validated</param>
            <param name="index">Index of <paramref name="value"/> in the source collection</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseMultiValueValidationTarget`6.TryGetValueToValidate(`0,System.Collections.Generic.IEnumerable{`5}@)">
            <summary>
            Tries to get the values to validate. Returns false when the value can't be returned (in case off null references).
            </summary>
            <param name="objectToValidate">Object to get the value from</param>
            <param name="values">Enumerator with the values to validate</param>
            <returns>Whether or not <paramref name="values"/> was set</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.BaseSingleValueValidationTarget`6">
            <summary>
            Template for creating a validation rule that validates a single value.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseSingleValueValidationTarget`6.#ctor(Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`2,`1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`2}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.BaseSingleValueValidationTarget`6"/>.
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseSingleValueValidationTarget`6.Validate(`0,`2,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseSingleValueValidationTarget`6.TryGetValueToValidate(`0,`5@)">
            <summary>
            Tries to get the value to validate. Returns false when the value can't be returned (in case of null references).
            </summary>
            <param name="objectToValidate">Object to get the value from</param>
            <param name="value">The value to validate</param>
            <returns>Whether or not <paramref name="value"/> was set</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3">
            <summary>
            Delegates calls to <see cref="T:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3"/>
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">The type of the base context of the base validator</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator">
            <summary>
            The validator tha was used to create the current target.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions">
            <summary>
            Global conditions defined for all rules created for the current target.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger">
            <summary>
            Optional logger for tracing.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings">
            <summary>
            The execution settings for the current target.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.Identifier">
            <summary>
            Human readable name used to identify the current validation target. Is used for logging.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.#ctor(Sels.ObjectValidationFramework.Validators.EntityValidator{`0,`1,`2},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,System.Collections.Generic.IEnumerable{Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}}},Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3"/>.
            <param name="validator"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._validator"/></param>
            <param name="settings"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._settings"/></param>
            <param name="globalConditions"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._globalConditions"/></param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ForElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ForSource(Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ForSource``1(System.Func{`0,``0},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`1,`2}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`2}},System.Boolean)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`1,`2}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateWhen``1(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`2}},System.Boolean)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateNextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateNextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.Switch``1(System.Func{`0,``0},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.Switch``1(System.Func{`0,``0},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.Switch``2(System.Func{`0,``1},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.Switch``2(System.Func{`0,``1},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <inhericdoc />
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.CanValidate(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1})">
            <summary>
            If this validation rule is enabled by checking all global conditions against <paramref name="context"/>.
            </summary>
            <param name="context">Context of the current <typeparamref name="TEntity"/> that is being validated</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ValidateObject(`0,`1,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <summary>
            Validates <paramref name="objectToValidate"/> and returns all validation errors.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element</param>
            <returns>All the validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.Validate(`0,`1,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <summary>
            Validates <paramref name="objectToValidate"/> and returns all validation errors.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element</param>
            <returns>All the validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Target.BaseValidationTarget`3.ModifyError(Sels.ObjectValidationFramework.Profile.ValidationError{`2})">
            <summary>
            Optional method that can be used by validation target to modify any errors returned.
            </summary>
            <param name="error">The error to modify</param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Validators.Builder.ValidatorSwitchConditionBuilder`5">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Configurators.ISwitchRootConditionConfigurator`5"/>.
            <typeparam name="TEntity">Type of object to create validation rules for</typeparam>
            <typeparam name="TBaseContext">The type of the context used by the parent validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by all rules</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.Builder.ValidatorSwitchConditionBuilder`5.#ctor(Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`2,`1},Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`3,`1},System.Func{`0,`4},System.Action)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Validators.Builder.ValidatorSwitchConditionBuilder`5"/>
            <param name="parent">The builder used to create the current builder</param>
            <param name="targetBuilder">The builder that the validation rules will be added to</param>
            <param name="valueGetter">Delegate that gets the value to switch on</param>
            <param name="onBuilderExit">Delegate called when the current builder exists and syntax returns to the parent</param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Validators.EntityValidator`3">
            <summary>
            Validator that allows for the creation of validation rules for type <typeparamref name="TEntity"/> and using the rules to validate instances of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of object to validate</typeparam>
            <typeparam name="TContext">The base context used for all validation rules created using the current instance</typeparam>
            <typeparam name="TError">Type of validation error that the validator returns</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.#ctor(System.Action{Sels.ObjectValidationFramework.Validators.EntityValidator{`2}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Validators.EntityValidator`3"/>
            <param name="onValidatorCreatedHandler">Delegate called when the current validator creates another (sub) validator</param>
            <param name="defaultSettings">The default settings to use for all created validation targets</param>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Validators.EntityValidator`1._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.AddTargetRule(Sels.ObjectValidationFramework.Target.BaseValidationTarget{`0,`1,`2})">
            <summary>
            Adds a new validation target to the current validator containing validation rules.
            </summary>
            <param name="target">The validation target to add</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ForElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ForSource(Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ForSource``1(System.Func{`0,``0},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ValidateWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`1,`2}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ValidateWhen``1(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`2}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`1,`2}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`2}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ValidateNextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.ValidateNextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.Switch``1(System.Func{`0,``0},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.Switch``1(System.Func{`0,``0},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.Switch``2(System.Func{`0,``1},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.Switch``2(System.Func{`0,``1},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.CanValidate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`3.Validate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Validators.EntityValidator`1">
            <summary>
            Untyped validator that exposes methods for validating objects.
            </summary>
            <typeparam name="TError">Type of validation error that the validator returns</typeparam>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Validators.EntityValidator`1._logger">
            <summary>
            Optional logger for tracing.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`1.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Validators.EntityValidator`1"/>
            <param name="logger"><inheritdoc cref="F:Sels.ObjectValidationFramework.Validators.EntityValidator`1._logger"/></param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`1.CanValidate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <summary>
            Checks if this validator can validate <paramref name="objectToValidate"/>.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>If this validator can validate <paramref name="objectToValidate"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.EntityValidator`1.Validate(System.Object,System.Object,System.Nullable{System.Int32},Sels.ObjectValidationFramework.Validators.Parent[])">
            <summary>
            Validates <paramref name="objectToValidate"/> and returns the validation errors if they occured for <paramref name="objectToValidate"/>.
            </summary>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional context that can be supplied to a validation rule.</param>
            <param name="elementIndex">Index of <paramref name="objectToValidate"/> if it was part of a collection. Will be null if it wasn't part of a collection.</param>
            <param name="parents">Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element.</param>
            <returns>All the validation errors for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Validators.Parent">
            <summary>
            Represents an object in the current hierarchical object structure if property fallthrough is enabled. When fallthrough is executed on a property the object that the property is from will be used as the last parent in the hierachy .
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Validators.Parent.Instance">
            <summary>
            The instance of the parent.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Validators.Parent.ChildProperty">
            <summary>
            The property on <see cref="P:Sels.ObjectValidationFramework.Validators.Parent.Instance"/> that the next object in the hierarchy came from. Can be the next parent or the current value that's being validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Validators.Parent.ElementIndex">
            <summary>
            Index of <see cref="P:Sels.ObjectValidationFramework.Validators.Parent.Instance"/> if it was part of a collection. Will be null if it wasn't part of a collection.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Validators.Parent.#ctor(System.Object,System.Reflection.PropertyInfo,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="instance"><see cref="P:Sels.ObjectValidationFramework.Validators.Parent.Instance"/></param>
            <param name="property"><see cref="P:Sels.ObjectValidationFramework.Validators.Parent.ChildProperty"/></param>
            <param name="elementIndex"><see cref="P:Sels.ObjectValidationFramework.Validators.Parent.ElementIndex"/></param>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3">
            <summary>
            Configurator for creating validation rules on object of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of object to create validation rules for</typeparam>
            <typeparam name="TContext">Type of the validation context used by all rules</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ForSource(Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates a validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/>.
            </summary>
            <param name="settings">Extra settings for the rule</param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ForSource``1(System.Func{`0,``0},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates validation target configurator for creating validation rules for <typeparamref name="TValue"/> selected from <typeparamref name="TEntity"/>.
            </summary>
            <param name="valueSelector">Selects the value to validate from an instance of <typeparamref name="TEntity"/></param>
            <param name="settings">Extra settings for the rule</param>
            <typeparam name="TValue">Type of value to validate</typeparam>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ForProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates validation target configurator for creating validation rules for <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <param name="settings">Extra settings for the rule</param>
            <typeparam name="TPropertyValue">Type of property to validate</typeparam>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ForProperty``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates validation target configurator for creating validation rules for the value selected by <paramref name="valueSelector"/> from <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <param name="valueSelector">Delegate that selects the value to validate on <paramref name="property"/></param>
            <param name="settings">Extra settings for the rule</param>
            <typeparam name="TPropertyValue">Type of property to validate</typeparam>
            <typeparam name="TValue">Type of value to validate</typeparam>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ForElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates validation target configurator for creating validation rules for the elements in <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <param name="settings">Extra settings for the rule</param>
            <typeparam name="TElement">Type of element to validate</typeparam>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ForElements``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,``1},Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates validation target configurator for creating validation rules for the value selected by <paramref name="valueSelector"/> for each element in <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <param name="property">Delegate that selects which property to validate. Will throw an <see cref="T:System.ArgumentException"/> when anything but a property is selected</param>
            <param name="valueSelector">Delegate that selects the value to validate on each element in <paramref name="property"/></param>
            <param name="settings">Extra settings for the rule</param>
            <typeparam name="TElement">Type of element to validate</typeparam>
            <typeparam name="TValue">Type of value to validate</typeparam>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ValidateWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`1,`2}})">
            <summary>
            All validation rules created with <paramref name="configurator"/> will only be executed when <paramref name="condition"/> passes.
            </summary>
            <param name="condition">Delegate that checks if validation rules created with <paramref name="configurator"/> can be executed</param>
            <param name="configurator">Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ValidateWhen``1(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`2}},System.Boolean)">
            <summary>
            All validation rules created with <paramref name="configurator"/> will only be executed when <paramref name="condition"/> passes. Condition uses a context of type <typeparamref name="TNewContext"/>.
            </summary>
            <typeparam name="TNewContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="condition">Delegate that checks if validation rules created with <paramref name="configurator"/> can be executed</param>
            <param name="configurator">Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></param>
            <param name="contextRequired">
            If a context of <typeparamref name="TNewContext"/> is required for the validation rules created with <paramref name="configurator"/>. 
            If set to false and context is not of type <typeparamref name="TNewContext"/> then <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.HasContext"/> will be set to false.
            When set to true the rules will only be executed when the supplied context is of type <typeparamref name="TNewContext"/>.
            </param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ValidateWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`1,`2}})">
            <summary>
            All validation rules created with <paramref name="configurator"/> will only be executed when <paramref name="condition"/> passes.
            </summary>
            <param name="condition">Delegate that checks if validation rules created with <paramref name="configurator"/> can be executed</param>
            <param name="configurator">Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ValidateWhen``1(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,``0,`2}},System.Boolean)">
            <summary>
            All validation rules created with <paramref name="configurator"/> will only be executed when <paramref name="condition"/> passes. Condition uses a context of type <typeparamref name="TNewContext"/>.
            </summary>
            <typeparam name="TNewContext">Optional context that can be supplied to a validation profile</typeparam>
            <param name="condition">Delegate that checks if validation rules created with <paramref name="configurator"/> can be executed</param>
            <param name="configurator">Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></param>
            <param name="contextRequired">
            If a context of <typeparamref name="TNewContext"/> is required for the validation rules created with <paramref name="configurator"/>. 
            If set to false and context is not of type <typeparamref name="TNewContext"/> then <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.HasContext"/> will be set to false.
            When set to true the rules will only be executed when the supplied context is of type <typeparamref name="TNewContext"/>.
            </param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ValidateNextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <summary>
            All validation rules created after calling this method will only be executed when <paramref name="condition"/> passes.
            </summary>
            <param name="condition">Delegate that checks if validation rules created after calling this method can be executed</param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.ValidateNextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <summary>
            All validation rules created after calling this method will only be executed when <paramref name="condition"/> passes.
            </summary>
            <param name="condition">Delegate that checks if validation rules created after calling this method can be executed</param>
            <returns>Validation target configurator for creating validation rules on the selected value from <typeparamref name="TEntity"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.Switch``1(System.Func{`0,``0},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <summary>
            Returns a builder for creating validation conditions using a switch like syntax.
            </summary>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
            <param name="valueSelector">Delegate that selects the value to switch on</param>
            <param name="condition">Optional condition that dictates if the current switch statemant can be executed</param>
            <returns>Builder for creating validation conditions using a switch like syntax</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.Switch``1(System.Func{`0,``0},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`1}})">
            <summary>
            Returns a builder for creating validation conditions using a switch like syntax.
            </summary>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
            <param name="valueSelector">Delegate that selects the value to switch on</param>
            <param name="condition">Optional condition that dictates if the current switch statemant can be executed</param>
            <returns>Builder for creating validation conditions using a switch like syntax</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.Switch``2(System.Func{`0,``1},System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <summary>
            Returns a builder for creating validation conditions using a switch like syntax.
            </summary>
            <typeparam name="TNewContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
            <param name="valueSelector">Delegate that selects the value to switch on</param>
            <param name="condition">Optional condition that dictates if the current switch statemant can be executed</param>
            <param name="contextRequired">
            If a context of <typeparamref name="TNewContext"/> is required for the validation rules created with the returned builder. 
            If set to false and context is not of type <typeparamref name="TNewContext"/> then <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.HasContext"/> will be set to false.
            When set to true the rules will only be executed when the supplied context is of type <typeparamref name="TNewContext"/>.
            </param>
            <returns>Builder for creating validation conditions using a switch like syntax</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationConfigurator`3.Switch``2(System.Func{`0,``1},Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,``0}},System.Boolean)">
            <summary>
            Returns a builder for creating validation conditions using a switch like syntax.
            </summary>
            <typeparam name="TNewContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
            <param name="valueSelector">Delegate that selects the value to switch on</param>
            <param name="condition">Optional condition that dictates if the current switch statemant can be executed</param>
            <param name="contextRequired">
            If a context of <typeparamref name="TNewContext"/> is required for the validation rules created with the returned builder. 
            If set to false and context is not of type <typeparamref name="TNewContext"/> then <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`2.HasContext"/> will be set to false.
            When set to true the rules will only be executed when the supplied context is of type <typeparamref name="TNewContext"/>.
            </param>
            <returns>Builder for creating validation conditions using a switch like syntax</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.IValidationRuleConfigurator`6">
            <summary>
            Configurator for configuring the current validation rule.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationRuleConfigurator`6.When(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <summary>
            The current validation rule will only be executed when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the current rule can be executed</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationRuleConfigurator`6.When(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <summary>
            The current validation rule will only be executed when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the current rule can be executed</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.ISwitchRootConditionConfigurator`5">
            <summary>
            Builder for creating conditions using a switch like syntax.
            </summary>
            <typeparam name="TEntity">Type of object to create validation rules for</typeparam>
            <typeparam name="TBaseContext">The type of the context used by the parent validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by all rules</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchRootConditionConfigurator`5.Case(Sels.Core.Delegates.Async.AsyncPredicate{`4})">
            <summary>
            Returns a builder for creating validation rules when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the value satisfies the current case</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchRootConditionConfigurator`5.Case(System.Predicate{`4})">
            <summary>
            Returns a builder for creating validation rules when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the value satisfies the current case</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchRootConditionConfigurator`5.Case(`4)">
            <summary>
            Returns a builder for creating validation rules when the switch value is equal to <paramref name="match"/>.
            </summary>
            <param name="match">The value that the switch value must be equal to</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.ISwitchCaseConditionConfigurator`5">
            <summary>
            Builder for defining more switch conditions or build conditions using the currently defined cases.
            </summary>
            <typeparam name="TEntity">Type of object to create validation rules for</typeparam>
            <typeparam name="TBaseContext">The type of the context used by the parent validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by all rules</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchCaseConditionConfigurator`5.Case(Sels.Core.Delegates.Async.AsyncPredicate{`4})">
            <summary>
            Returns a builder for creating validation rules when <paramref name="condition"/> returns true or when any previously defined case returns true.
            </summary>
            <param name="condition">Delegate that checks if the value satisfies the current case</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchCaseConditionConfigurator`5.Case(System.Predicate{`4})">
            <summary>
            Returns a builder for creating validation rules when <paramref name="condition"/> returns true or when any previously defined case returns true.
            </summary>
            <param name="condition">Delegate that checks if the value satisfies the current case</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchCaseConditionConfigurator`5.Case(`4)">
            <summary>
            Returns a builder for creating validation rules when the switch value is equal to <paramref name="match"/> or when any previously defined case returns true.
            </summary>
            <param name="match">The value that the switch value must be equal to</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchCaseConditionConfigurator`5.Then(System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`3,`1}})">
            <summary>
            Create validation rules using <paramref name="builder"/> that will only be executed when any of the previously defined cases returns true.
            </summary>
            <param name="builder">Delegate used to create validation rules</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.ISwitchFullConditionConfigurator`5">
            <summary>
            Builder for defining more switch cases, set a default when none of the switch cases match or exit the current builder.
            </summary>
            <typeparam name="TEntity">Type of object to create validation rules for</typeparam>
            <typeparam name="TBaseContext">The type of the context used by the parent validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by all rules</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TValue">Type of the value to switch on</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.ISwitchFullConditionConfigurator`5.Default(System.Action{Sels.ObjectValidationFramework.Configurators.IValidationConfigurator{`0,`3,`1}})">
            <summary>
            Create validation rules using <paramref name="builder"/> when none of the previously defined cases are matched.
            </summary>
            <param name="builder">Delegate used to create validation rules</param>
            <returns>Current builder for method chaining</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6">
            <summary>
            Configurator for creating validation rules for value of type <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6.ValidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <summary>
            Creates a new validation rule that validates values of type <typeparamref name="TValue"/> using <paramref name="condition"/>. <paramref name="errorConstructor"/> will create a validation error of type <typeparamref name="TError"/> when <paramref name="condition"/> fails.
            </summary>
            <param name="condition">Delegate that checks if <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is a valid value</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6.InvalidIf(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <summary>
            Creates a new validation rule that validates values of type <typeparamref name="TValue"/> using <paramref name="condition"/>. <paramref name="errorConstructor"/> will create a validation error of type <typeparamref name="TError"/> when <paramref name="condition"/> succeeds.
            </summary>
            <param name="condition">Delegate that checks if <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is a valid value</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6.NextWhen(System.Predicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <summary>
            Validation rules configured after this method call will only be performed when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the validation rules configured after this method call can be executed</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6.ValidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <summary>
            Creates a new validation rule that validates values of type <typeparamref name="TValue"/> using <paramref name="condition"/>. <paramref name="errorConstructor"/> will create a validation error of type <typeparamref name="TError"/> when <paramref name="condition"/> fails.
            </summary>
            <param name="condition">Delegate that checks if <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is a valid value</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6.InvalidIf(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}},Sels.Core.Delegates.Async.AsyncFunc{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5},`1})">
            <summary>
            Creates a new validation rule that validates values of type <typeparamref name="TValue"/> using <paramref name="condition"/>. <paramref name="errorConstructor"/> will create a validation error of type <typeparamref name="TError"/> when <paramref name="condition"/> succeeds.
            </summary>
            <param name="condition">Delegate that checks if <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is a valid value</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator`6.NextWhen(Sels.Core.Delegates.Async.AsyncPredicate{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{`0,`3,`4,`5}})">
            <summary>
            Validation rules configured after this method call will only be performed when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Delegate that checks if the validation rules configured after this method call can be executed</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Configurators.IValidationTargetRootConfigurator`5">
            <summary>
            Configurator for creating validation rules for value of type <typeparamref name="TValue"/> using an untyped context.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Configurators.IValidationTargetRootConfigurator`5.WithContext``1">
            <summary>
            Selects a new context type for the current validation target.
            </summary>
            <returns>Current configurator for method chaining with a context of type <typeparamref name="TContext"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions">
            <summary>
            Contains generic configuration extensions for collection types.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.CannotBeEmpty``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it contains at least 1 element.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.CannotBeEmpty``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it contains at least 1 element.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustBeEmpty``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it doesn't contain any elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustBeEmpty``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it doesn't contain any elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContain``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it contains <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">How many elements the collection must contain</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContain``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.Int32)">
            <summary>
            Value is only valid when it contains <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">How many elements the collection must contain</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainAtMax``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it only contains a max of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainAtMax``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.Int32)">
            <summary>
            Value is only valid when it only contains a max of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainAtLeast``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it only contains a min of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainAtLeast``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.Int32)">
            <summary>
            Value is only valid when it only contains a min of <paramref name="count"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="count">Max allowed count of elements</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainInRange``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it contains more or equal to <paramref name="minCount"/> and less or equal to <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainInRange``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.Int32,System.Int32)">
            <summary>
            Value is only valid when it contains more or equal to <paramref name="minCount"/> and less or equal to <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainInBetween``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it contains between <paramref name="minCount"/> and <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.MustContainInBetween``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.Int32,System.Int32)">
            <summary>
            Value is only valid when it contains more or equal to <paramref name="minCount"/> and less or equal to <paramref name="maxCount"/> elements.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minCount">Min allowed count of elements</param>
            <param name="maxCount">Max allowed count of elements</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.AllMustBeUnique``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when all elements are unique. Values are compared using <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.CollectionValidationExtensions.AllMustBeUnique``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when all elements are unique. Values are compared using <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions">
            <summary>
            Contains generic configuration extensions for comparable types.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeLargerThan``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.IComparable,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is larger than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeLargerThan``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.IComparable)">
            <summary>
            Value is only valid when it is larger than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeLargerOrEqualTo``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.IComparable,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is larger or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeLargerOrEqualTo``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.IComparable)">
            <summary>
            Value is only valid when it is larger or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeSmallerThan``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.IComparable,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is smaller than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeSmallerThan``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.IComparable)">
            <summary>
            Value is only valid when it is smaller than <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeSmallerOrEqualTo``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.IComparable,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is smaller or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeSmallerOrEqualTo``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.IComparable)">
            <summary>
            Value is only valid when it is smaller or equal to <paramref name="comparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="comparator">Object to compare value to</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeBetween``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.IComparable,System.IComparable,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is between <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeBetween``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.IComparable,System.IComparable)">
            <summary>
            Value is only valid when it is between <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeInRange``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.IComparable,System.IComparable,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is larger or equal to <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ComparableValidationExtensions.MustBeInRange``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},System.IComparable,System.IComparable)">
            <summary>
            Value is only valid when it is between <paramref name="minComparator"/> and <paramref name="maxComparator"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minComparator">Object to compare value to</param>
            <param name="maxComparator">Object to compare value to</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ContextExtensions">
            <summary>
            Extra extension methods for working the with validation rule context
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ContextExtensions.GetDisplayName``4(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ContextExtensions.GetFullDisplayName``4(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that being's validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ContextExtensions.GetFullDisplayName``3(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,Sels.ObjectValidationFramework.Rules.PropertyValidationInfo,``1,``2},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated. Includes the property name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ContextExtensions.GetFullDisplayName``3(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,Sels.ObjectValidationFramework.Rules.CollectionPropertyValidationInfo,``1,``2},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated. Includes the property name with collection index.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ContextExtensions.GetFullDisplayNameDynamically``4(Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Returns a display name for the current value that being validated. Dynamically selects the right overload.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TContext">Optional context that can be supplied to a validation profile</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="ruleContext">Validation rule context for the currently being validated value</param>
            <param name="includeParents">If the hierarchy of parents should be included in the display name</param>
            <returns>Display name representing the current value that's being validated</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions">
            <summary>
            Contains generic configuration extensions for datetimes.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeInTheFuture``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.DateTime},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.DateTime},``1})">
            <summary>
            Value is only valid when it is a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeInTheFuture``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.DateTime})">
            <summary>
            Value is only valid when it is a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeTodayOrInTheFuture``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.DateTime},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.DateTime},``1})">
            <summary>
            Value is only valid when it is today or a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeTodayOrInTheFuture``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.DateTime})">
            <summary>
            Value is only valid when it is today or a date in the future.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeInThePast``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.DateTime},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.DateTime},``1})">
            <summary>
            Value is only valid when it is a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeInThePast``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.DateTime})">
            <summary>
            Value is only valid when it is a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeTodayOrInThePast``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.DateTime},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.DateTime},``1})">
            <summary>
            Value is only valid when it is today or a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeTodayOrInThePast``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.DateTime})">
            <summary>
            Value is only valid when it is today or a date in the past.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeAfter``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.DateTime},System.DateTime,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.DateTime},``1})">
            <summary>
            Value is only valid when it is after <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeAfter``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.DateTime},System.DateTime)">
            <summary>
            Value is only valid when it is after <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeBefore``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.DateTime},System.DateTime,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.DateTime},``1})">
            <summary>
            Value is only valid when it is before <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.DateTimeValidationExtensions.MustBeBefore``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.DateTime},System.DateTime)">
            <summary>
            Value is only valid when it is before <paramref name="date"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="date">Date to compare value against</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.FileSystemValidationExtensions">
            <summary>
            Contains generic configuration extensions for file system types.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.FileSystemValidationExtensions.MustExist``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it exists on the file system.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.FileSystemValidationExtensions.MustExist``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it exists on the file system.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions">
            <summary>
            Contains generic configuration extensions. 
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.CannotBeNull``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is not null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.CannotBeNull``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it is not null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.CannotBeDefault``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is not the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.CannotBeDefault``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it is not the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.MustBeNull``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.MustBeNull``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it is null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.MustBeDefault``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.MustBeDefault``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4})">
            <summary>
            Value is only valid when it is not the default value of the type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.MustBeIn``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5},``5[],System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,``5},``1})">
            <summary>
            Value is only valid when it is in <paramref name="validValues"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="validValues">Array of valid values</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.MustBeIn``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,``4},``4[])">
            <summary>
            Value is only valid when it is in <paramref name="validValues"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="validValues">Array of valid values</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.NextWhenNotNull``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5})">
            <summary>
            Validation rules created after this method call will only be executed when value is not null.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.NextWhenNotDefault``6(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,``5})">
            <summary>
            Validation rules created after this method call will only be executed when value is not the default value for it's type.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <typeparam name="TValue">Type of value that is being validated</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.NextWhenNotNullOrWhitespace``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String})">
            <summary>
            Validation rules created after this method call will only be executed when value is null, empty or whitespace.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.GenericValidationExtensions.WhenNotNullOrEmpty``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String})">
            <summary>
            Validation rules created after this method call will only be executed when value is null or empty.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.StringValidationExtensions">
            <summary>
            Contains generic configuration extensions for strings.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotBeNullOrEmpty``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it is not null or empty.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotBeNullOrEmpty``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it is not null or empty.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotBeNullOrWhitespace``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it is not null, empty or whitespace.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotBeNullOrWhitespace``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it is not null, empty or whitespace.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustMatchRegex``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.String,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustMatchRegex``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.String)">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustMatchRegex``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it matches the regex created by <paramref name="regexContructor"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regexContructor">Delegate that returns the regex to use</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustMatchRegex``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``2,``3,System.String},System.String})">
            <summary>
            Value is only valid when it matches the regex created by <paramref name="regexContructor"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regexContructor">Delegate that returns the regex to use</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustMatchRegex``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Text.RegularExpressions.Regex,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustMatchRegex``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Text.RegularExpressions.Regex)">
            <summary>
            Value is only valid when it matches <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotMatchRegex``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.String,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotMatchRegex``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.String)">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotMatchRegex``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Text.RegularExpressions.Regex,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.CannotMatchRegex``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Text.RegularExpressions.Regex)">
            <summary>
            Value is only valid when it doesn't match <paramref name="regex"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="regex">Regex to check against</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasMaxLengthOf``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it's length is smaller or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Max allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasMaxLengthOf``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Int32)">
            <summary>
            Value is only valid when it's length is smaller or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Max allowed length</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasMinLengthOf``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Min allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasMinLengthOf``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Int32)">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="length"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="length">Min allowed length</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasLengthInRangeOf``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="minLength"/> and smaller or equal to <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasLengthInRangeOf``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Int32,System.Int32)">
            <summary>
            Value is only valid when it's length is larger or equal to <paramref name="minLength"/> and smaller or equal to <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasLengthBetween``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Int32,System.Int32,System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it's length is larger than <paramref name="minLength"/> and smaller than <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.HasLengthBetween``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String},System.Int32,System.Int32)">
            <summary>
            Value is only valid when it's length is larger than <paramref name="minLength"/> and smaller than <paramref name="maxLength"/>.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="minLength">Min allowed length</param>
            <param name="maxLength">Max allowed length</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeValidPath``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it is a valid directory path.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeValidPath``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it is a valid directory path.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeValidFileName``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it is a valid file name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeValidFileName``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it is a valid file name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeExistingPath``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it points to an existing directory.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeExistingPath``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it points to an existing directory.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeExistingFileName``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it points to an existing file.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeExistingFileName``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it points to an existing file.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeValidTypeName``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it is a valid type name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.MustBeValidTypeName``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it is a valid type name.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.IsValidEmail``4(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,System.String,``1,``2,``3,System.String})">
            <summary>
            Value is only valid when it is a valid mail address.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <returns>Current configurator</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.StringValidationExtensions.IsValidEmail``5(Sels.ObjectValidationFramework.Configurators.IValidationTargetConfigurator{``0,``1,``2,``3,``4,System.String},System.Func{Sels.ObjectValidationFramework.Rules.IValidationRuleContext{``0,``3,``4,System.String},``1})">
            <summary>
            Value is only valid when it is a valid mail address.
            </summary>
            <typeparam name="TEntity">Type of source object that the validation rule was created for</typeparam>
            <typeparam name="TError">Type of validation error that this rule returns</typeparam>
            <typeparam name="TInfo">Type of object that contains additional info that the validation rule can use depending on what is being validated</typeparam>
            <typeparam name="TBaseContext">Type of the validation context used by the current validator</typeparam>
            <typeparam name="TTargetContext">Type of the validation context used by the current validation target</typeparam>
            <param name="configurator">Configurator to configure validation</param>
            <param name="errorConstructor">Delegate that creates a validation error when <see cref="P:Sels.ObjectValidationFramework.Rules.IValidationRuleContext`4.Value"/> is not a valid value</param>
            <returns>Current configurator</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions">
            <summary>
            Modifies the behaviour how profiles execute validation.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.None">
            <summary>
            No selected options.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.ThrowOnError">
            <summary>
            If the profile should throw a <see cref="T:Sels.Core.Validation.ValidationException`2"/> instead of returning the errors if there are any.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.NoPropertyFallthrough">
            <summary>
            The profile won't go through the properties of the root object disabling the validation of the full hierarchy.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.NoCollectionFallthrough">
            <summary>
            The profile won't loop over detected collections and validate the elements.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.NoRootCollectionFallthrough">
            <summary>
            If the root object being validated is a collection the profile won't validate the elements.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ValidationError`1">
            <summary>
            Represents a validation errors returned by a profile.
            </summary>
            <typeparam name="TError">The type of the error message</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Message">
            <summary>
            The validation error message.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Value">
            <summary>
            The value that was validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Source">
            <summary>
            The source object <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Value"/> is from.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Property">
            <summary>
            The property info if <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Value"/> came from a property, otherwise null.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.ElementIndex">
            <summary>
            Index of <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Source"/> if it was part of a collection. Will be null if it wasn't part of a collection.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Parents">
            <summary>
            Hierarchy of object if property fallthrough is enabled. The previous element is always the parent of the next element. Will be empty if <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Source"/> is the root object being validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.DisplayName">
            <summary>
            Returns a display name of the value that was validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.FullDisplayName">
            <summary>
            Returns a display name of the value that was validated. Includes the parent hierarchy.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationError`1.ChangeMessageTo``1(System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{`0},``0})">
            <summary>
            Changes the type of the current validation error message to <typeparamref name="TNewError"/>.
            </summary>
            <typeparam name="TNewError">The type of the new error message</typeparam>
            <param name="projector">Delegate that converts the current error message to the new type</param>
            <returns>Current error with <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationError`1.Message"/> converted to <typeparamref name="TNewError"/></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationError`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ValidationResult`2">
            <summary>
            Contains the result of validation triggered on a profile.
            </summary>
            <typeparam name="TEntity">The type of the root object that was validated</typeparam>
            <typeparam name="TError">The type of the error message</typeparam>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Validated">
            <summary>
            The root object that validation was triggered on.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.CallStack">
            <summary>
            Array with all objects that were checked by the profile in order.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Scanned">
            <summary>
            How many object instances were checked by the profile.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Errors">
            <summary>
            Any validation errors for <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Validated"/> and it's children.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Messages">
            <summary>
            Returns all the validation errors messages from <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Errors"/>.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.IsValid">
            <summary>
            True if <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Validated"/> contains no errors, otherwise false.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationResult`2.ChangeMessageTo``1(System.Func{Sels.ObjectValidationFramework.Profile.ValidationError{`1},``0})">
            <summary>
            Changes the type of the current validation error messages to <typeparamref name="TNewError"/>.
            </summary>
            <typeparam name="TNewError">The type of the new error message</typeparam>
            <param name="projector">Delegate that converts the current error messages to the new type</param>
            <returns>Current results with <see cref="P:Sels.ObjectValidationFramework.Profile.ValidationResult`2.Errors"/> converted to <typeparamref name="TNewError"/></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationResult`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1">
            <summary>
            Profile that can be configured using a fluent syntax to validate objects.
            </summary>
            <typeparam name="TError">Type of validation error to return</typeparam>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.#ctor(System.Boolean,System.Boolean,Sels.ObjectValidationFramework.Target.TargetExecutionOptions,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1"/>
            <param name="addDefaultIgnored">If the default ignored types must be added as ignore conditions</param>
            <param name="validateNonPublic">If non public properties also need to be checked</param>
            <param name="defaultSettings">The default target settings to use for all created validators</param>
            <param name="logger">Optional loggers for tracing</param>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.CreateValidationFor``1(Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates a new configurator for creating validation for objetcs of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to create validation for</typeparam>
            <param name="settings">The default settings to use for all created validation targets</param>
            <returns>A configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.CreateValidationFor``2(Sels.ObjectValidationFramework.Target.TargetExecutionOptions)">
            <summary>
            Creates a new configurator for creating validation for objetcs of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of entity to create validation for</typeparam>
            <typeparam name="TContext">Type of the validation context used by the created validation rules</typeparam>
            <param name="settings">The default settings to use for all created validation targets</param>
            <returns>A configurator for creating validation rules</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnoreFor(System.Predicate{System.ValueTuple{System.Object,System.Reflection.PropertyInfo,System.Object}},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored when <paramref name="condition"/> returns true.
            </summary>
            <param name="condition">Predicate that dictates when a property is ignored</param>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnoreFor``1(System.Predicate{System.ValueTuple{``0,System.Reflection.PropertyInfo,System.Object}},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored <paramref name="condition"/> returns true. Only gets executed when property can be assigned to <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of the property value</typeparam>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnoreForWhenContext``1(System.Predicate{System.ValueTuple{System.Object,System.Reflection.PropertyInfo,``0}},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored <paramref name="condition"/> returns true. Only gets executed when context can be assigned to <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TContext">Type of the supplied context</typeparam>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnoreForWhenContext``2(System.Predicate{System.ValueTuple{System.Object,System.Reflection.PropertyInfo,``0}},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored <paramref name="condition"/> returns true. Only gets executed when context can be assigned to <typeparamref name="TContext"/> and property can be assigned to <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of the property value</typeparam>
            <typeparam name="TContext">Type of the supplied context</typeparam>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <param name="condition">Predicate that dictates when when a property/collection is ignored for fallthrough</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnorePropertyFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored where the property is selected by <paramref name="property"/> on <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">Type of the entity <paramref name="property"/> is from</typeparam>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <param name="property">Delegate that selects the property on <typeparamref name="TEntity"/></param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnorePropertyFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Predicate{System.Object},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored where the property is selected by <paramref name="property"/> on <typeparamref name="TEntity"/>. Property will only be ignored when <paramref name="contextCondition"/> returns true.
            </summary>
            <typeparam name="TEntity">Type of the entity <paramref name="property"/> is from</typeparam>
            <param name="property">Delegate that selects the property on <typeparamref name="TEntity"/></param>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <param name="contextCondition">Condition supplied context must pass before <paramref name="property"/> is ignored.</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.IgnorePropertyFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Predicate{``1},Sels.ObjectValidationFramework.Profile.IgnoreType)">
            <summary>
            Property will be ignored where the property is selected by <paramref name="property"/> on <typeparamref name="TEntity"/>. Property will only be ignored when content is of type <typeparamref name="TContext"/> and when <paramref name="contextCondition"/> returns true.
            </summary>
            <typeparam name="TEntity">Type of the entity <paramref name="property"/> is from</typeparam>
            <typeparam name="TContext">Type of the context</typeparam>
            <param name="property">Delegate that selects the property on <typeparamref name="TEntity"/></param>
            <param name="ignoreType">Indicates when the property is ignored</param>
            <param name="contextCondition">Condition supplied context must pass before <paramref name="property"/> is ignored.</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ImportFrom(Sels.ObjectValidationFramework.Profile.ValidationProfile{`0},Sels.ObjectValidationFramework.Profile.ImportOptions)">
            <summary>
            Import configuration from <paramref name="profile"/> into this profile.
            </summary>
            <param name="profile">Profile to import from</param>
            <param name="options">What to import</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ImportFrom``1(Sels.ObjectValidationFramework.Profile.ImportOptions)">
            <summary>
            Import configuration from <typeparamref name="TProfile"/> into this profile.
            </summary>
            <typeparam name="TProfile">Type of profile to import options from</typeparam>
            <param name="options">What to import</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ImportFrom(System.Func{Sels.ObjectValidationFramework.Profile.ValidationProfile{`0}},Sels.ObjectValidationFramework.Profile.ImportOptions)">
            <summary>
            Import configuration from the profile created by <paramref name="constructor"/> into this profile.
            </summary>
            <param name="constructor">Delegate that creates the profile instance to import from</param>
            <param name="options">What to import</param>
            <returns>Current profile for method chaining</returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.Validate``1(``0,System.Object,Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions)">
            <summary>
            Validates <paramref name="objectToValidate"/> using the configuration in the profile and returns alls validation errors.
            </summary>
            <typeparam name="T">The type of the object being validated</typeparam>
            <param name="objectToValidate">The object to validate</param>
            <param name="context">Optional context that can be used by the validation configuration</param>
            <param name="options"><inheritdoc cref="T:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions"/></param>
            <returns>The validation result for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ValidateAsync``1(``0,System.Object,Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions)">
            <summary>
            Validates <paramref name="objectToValidate"/> using the configuration in the profile and returns alls validation errors.
            </summary>
            <typeparam name="T">The type of the object being validated</typeparam>
            <param name="objectToValidate">The object to validate</param>
            <param name="context">Optional context that can be used by the validation configuration</param>
            <param name="options"><inheritdoc cref="T:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions"/></param>
            <returns>The validation result for <paramref name="objectToValidate"/></returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext">
            <summary>
            Contains the state of validation executed by a validation profile.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.#ctor(System.Object,System.Reflection.BindingFlags,Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions)">
            <inheritdoc cref="T:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext"/>
            <param name="context"><inheritdoc cref="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.Context"/></param>
            <param name="bindingFlags">Flags that dictate which properties to fallthrough</param>
            <param name="options">The options for the current validation execution</param>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.Context">
            <summary>
            The optional validation context supplied by the consumer of the profile
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.History">
            <summary>
            The object references that the profile already validated. Used to avoid stack overflows when dealing with circular dependencies.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.Errors">
            <summary>
            The current validation errors.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.CurrentParents">
            <summary>
            Represents the current hierarchy of parent of the object currently being validated.
            </summary>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.ThrowOnErrors">
            <inheritdoc cref="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.ThrowOnError"/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.IsPropertyFallthroughDisabled">
            <inheritdoc cref="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.NoPropertyFallthrough"/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.IsCollectionFallthroughDisabled">
            <inheritdoc cref="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.NoCollectionFallthrough"/>
        </member>
        <member name="P:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.IsRootCollectionFallthroughDisabled">
            <inheritdoc cref="F:Sels.ObjectValidationFramework.Profile.ProfileExecutionOptions.NoRootCollectionFallthrough"/>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Profile.ValidationProfile`1.ExecutionContext.GetProperties(System.Type)">
            <summary>
            Returns all properties to fallthrough on type <paramref name="type"/>.
            </summary>
            <param name="type">The type to get the properties for</param>
            <returns>All properties to fallthrough on type <paramref name="type"/> or an empty array when there aren't any properties</returns>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.ImportOptions">
            <summary>
            Tells what to import from another profile.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ImportOptions.All">
            <summary>
            Import everything
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ImportOptions.IgnoredForFallthrough">
            <summary>
            Impors all conditions for what properties to ignore for fallthough.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ImportOptions.IgnoredForCollections">
            <summary>
            Impors all conditions for what properties are ignored as collections.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.ImportOptions.Configuration">
            <summary>
            Import all configured validation rules.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Profile.IgnoreType">
            <summary>
            Indicates what is being ignored.
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.IgnoreType.Fallthrough">
            <summary>
            Property is ignored for fallthrough. 
            </summary>
        </member>
        <member name="F:Sels.ObjectValidationFramework.Profile.IgnoreType.Collection">
            <summary>
            If the property is a collection the items will not be validated.
            </summary>
        </member>
        <member name="T:Sels.ObjectValidationFramework.Extensions.Validation.ValidationExtensions">
            <summary>
            Provides extra extension for validating objects with profiles.
            </summary>
        </member>
        <member name="M:Sels.ObjectValidationFramework.Extensions.Validation.ValidationExtensions.ValidateAgainstProfile``3(``1,System.Object)">
            <summary>
            Validates <paramref name="objectToValidate"/> using a profile of type <typeparamref name="TProfile"/>.
            </summary>
            <typeparam name="TProfile">Type of profile to use for validation</typeparam>
            <typeparam name="TEntity">The type of the entity yo validate</typeparam>
            <typeparam name="TError">Type of validation error to return</typeparam>
            <param name="objectToValidate">Object to validate</param>
            <param name="context">Optional object containing additional information for the validators</param>
            <returns>The validation result for <paramref name="objectToValidate"/></returns>
        </member>
    </members>
</doc>

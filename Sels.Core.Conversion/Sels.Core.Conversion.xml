<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sels.Core.Conversion</name>
    </assembly>
    <members>
        <member name="T:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute">
            <summary>
            Defines a custom key name for a property.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute.Key">
            <summary>
            The key name for this property.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute.#ctor(System.String)">
            <inheritdoc cref="T:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute"/>
            <param name="key">The name for the key to use</param>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.KeyValue.KeyExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.KeyValue.KeyExtensions.GetKey(System.Reflection.MemberInfo)">
            <summary>
            Returns the key name for <paramref name="member"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute"/>.
            </summary>
            <param name="member">The member to get the key for</param>
            <returns>The key for <paramref name="member"/> either defined by <see cref="T:Sels.Core.Conversion.Attributes.KeyValue.KeyAttribute"/> or the name if no attribute is defined</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.KeyValue.MergePairsAttribute">
            <summary>
            Defines that collection elements should be merged to a single line instead of creating a key/value pair for each collection.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.KeyValue.MergePairsExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Sels.Core.Conversion.Attributes.KeyValue.MergePairsAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.KeyValue.MergePairsExtensions.MergePairs(System.Reflection.MemberInfo)">
            <summary>
            If pairs should be merged for <paramref name="member"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.KeyValue.MergePairsAttribute"/>.
            </summary>
            <param name="member">The member to check</param>
            <returns>Whether or not to merge the pairs for <paramref name="member"/></returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute">
            <summary>
            Defines arguments that will be supplied to the <see cref="T:Sels.Core.Conversion.Contracts.ITypeConverter"/> by serializers that support it.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute.KeyValueSplitter">
            <summary>
            The substring that will split up the arguments into key/value pairs.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute.Arguments">
            <summary>
            Arguments for the type converters.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute.#ctor(System.String[])">
            <summary>
            Defines arguments that will be supplied to the <see cref="T:Sels.Core.Conversion.Contracts.ITypeConverter"/> by serializers that support it.
            </summary>
            <param name="arguments">List of arguments. Must use <see cref="F:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute.KeyValueSplitter"/> to split the argument key from the argument value</param>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttributeExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttributeExtensions.GetConverterArguments(System.Reflection.MemberInfo)">
            <summary>
            Returns <see cref="T:Sels.Core.Conversion.Contracts.ITypeConverter"/> arguments by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute"/>.
            </summary>
            <param name="source">The member to get the arguments from</param>
            <returns>The arguments defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterArgumentAttribute"/> or null if no attribute is found</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute">
            <summary>
            Defines a custom type converter for serializers that support it. Converters defined on class level are inherited by properties.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute.Converter">
            <summary>
            The converter instance that will be used during serialization/deserialization.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Defines a custom type converter for serializers that support it. Converters defined on class level are inherited by properties.
            </summary>
            <param name="converterType">The type of the converter to use</param>
            <param name="arguments">Optional constructor parameters for <paramref name="converterType"/></param>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttributeExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ConverterAttributeExtensions.GetConverters(System.Object)">
            <summary>
            Returns all converters defined on the type of <paramref name="source"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/>.
            </summary>
            <param name="source">The object to get the converters for</param>
            <returns>All converters defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/> or an empty array if no attributes are defined</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ConverterAttributeExtensions.GetConverters(System.Type)">
            <summary>
            Returns all converters defined on <paramref name="source"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/>.
            </summary>
            <param name="source">The type to get the converters from</param>
            <returns>All converters defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/> or an empty array if no attributes are defined</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ConverterAttributeExtensions.GetConverters(System.Reflection.MemberInfo)">
            <summary>
            Returns all converters defined on <paramref name="source"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/>.
            </summary>
            <param name="source">The member to get the converters from</param>
            <returns>All converters defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/> or an empty array if no attributes are defined</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.ElementSeparatorAttribute">
            <summary>
            Splits the string into multiple substrings during deseialization that will be converted to a collection. During serialization the elements will be converted to strings and joined instead.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Serialization.ElementSeparatorAttribute.Separator">
            <summary>
            The string that will be used to split/join the sub strings.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ElementSeparatorAttribute.#ctor(System.String)">
            <summary>
            Splits the string into multiple sub string during deseialization that will be converted to a collection. During serialization the elements will be converted to strings and joined instead.
            </summary>
            <param name="splitter">The string to split/join. If left to null, empty or whitespace the string will be split on whitespace characters</param>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ElementSeparatorAttribute.Split(System.String)">
            <summary>
            Splits up <paramref name="source"/> that needs to be deserialized into multiple sub strings.
            </summary>
            <param name="source">The string to split</param>
            <returns>The split up string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.ElementSeparatorAttribute.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins <paramref name="source"/> after being serialized.
            </summary>
            <param name="source">The strings to join</param>
            <returns>The joined string</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.IgnoreSerializationAttribute">
            <summary>
            Used to ignore any implicit serialization for a property by any serializer that supports the attribute.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.IgnoreSerializationAttribute.#ctor">
            <summary>
            Used to ignore any implicit serialization for a property by any serializer that supports the attribute.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.IgnoreSerializatioAttributeExtensions">
            <summary>
            Extension methods for working with <see cref="T:Sels.Core.Conversion.Attributes.Serialization.IgnoreSerializationAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.IgnoreSerializatioAttributeExtensions.IsIgnoredForSerialization(System.Reflection.MemberInfo)">
            <summary>
            Checks if <paramref name="source"/> is ignored for serialization by checking for the existance of <see cref="T:Sels.Core.Conversion.Attributes.Serialization.IgnoreSerializationAttribute"/>.
            </summary>
            <param name="source">The property to checks</param>
            <returns>Whether or not <paramref name="source"/> is ignored for serialization</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute">
            <summary>
            Defines a custom filter for serializers that support it. Filters defined on class level are inherited by properties.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute.Filter">
            <summary>
            The filter to use for serialized and to be deserialized values.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute.IsElementFilter">
            <summary>
            If this filter should be used on the element substrings instead of the whole string that contains the element substrings.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Defines a custom filter for serializers that support it. Filters defined on class level are inherited by properties.
            </summary>
            <param name="filterType">The type of the filter to use</param>
            <param name="arguments">Optional constructor parameters for <paramref name="filterType"/></param>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterExtensions.GetFilters(System.Object,System.Boolean)">
            <summary>
            Returns all filters defined on the type of <paramref name="source"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/>.
            </summary>
            <param name="source">The object to get the filters for</param>
            <param name="isElementFilter">When set to true it will only fetch filters for elements</param>
            <returns>All filters defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> or an empty array if no attributes are defined</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterExtensions.GetFilters(System.Type,System.Boolean)">
            <summary>
            Returns all filters defined on <paramref name="source"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/>.
            </summary>
            <param name="source">The type to get the filters from</param>
            <param name="isElementFilter">When set to true it will only fetch filters for elements</param>
            <returns>All filters defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> or an empty array if no attributes are defined</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterExtensions.GetFilters(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns all filters defined on <paramref name="source"/> by looking for <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/>.
            </summary>
            <param name="source">The member to get the filters from</param>
            <param name="isElementFilter">When set to true it will only fetch filters for elements</param>
            <returns>All filters defined by <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> or an empty array if no attributes are defined</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Table.ColumnHeaderAttribute">
            <summary>
            Defines a header name that will be used to determine what column to use for serialization/deserialization.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Table.ColumnHeaderAttribute.Header">
            <summary>
            The name of the column in the header row.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Table.ColumnHeaderAttribute.#ctor(System.String)">
            <inheritdoc cref="T:Sels.Core.Conversion.Attributes.Table.ColumnHeaderAttribute"/>
            <param name="header">The name of the header</param>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Table.ColumnHeaderAttribute.GetColumnIndex(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Sels.Core.Conversion.Attributes.Table.ColumnIndexAttribute">
            <summary>
            Defines the index of the column to serialize from or to deserialize to. Column index starts counting from 0.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Attributes.Table.ColumnIndexAttribute.Index">
            <summary>
            The column index.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Table.ColumnIndexAttribute.#ctor(System.Int32)">
            <inheritdoc cref="T:Sels.Core.Conversion.Attributes.Table.ColumnIndexAttribute"/>
            <param name="index"></param>
        </member>
        <member name="M:Sels.Core.Conversion.Attributes.Table.ColumnIndexAttribute.GetColumnIndex(System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.BoolToBitFilter">
            <summary>
            Filter that will convert 1 and 0 to true and false on read and the opposite on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.BoolToBitFilter.#ctor">
            <summary>
            Filter that will convert 0 and 1 to true and false on read and the opposite on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.BoolToBitFilter.#ctor(System.String,System.String)">
            <summary>
            Filter that will convert 0 and 1 to true and false on read and the opposite on write.
            </summary>
            <param name="defaultReadValue">The value to return when input string isn't 0 or 1 on read</param>
            <param name="defaultWriteValue">The value to return when input string isn't true or false on write</param>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.BoolToBitFilter.ModifyOnRead(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.BoolToBitFilter.ModifyOnWrite(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.DoubleQuotesFilter">
            <summary>
            Filter that trims double quotes on read and adds them on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.DoubleQuotesFilter.#ctor">
            <summary>
            Filter that trims double quotes on read and adds them on write.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.PercentageFilter">
            <summary>
            Filter that removes % at the end of a string on read and adds them on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.PercentageFilter.#ctor">
            <summary>
            Filter that removes % at the end of a string on read and adds them on write.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.SingleQuotesFilter">
            <summary>
            Filter that trims single quotes on read and adds them on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Filters.Conversion.SingleQuotesFilter.#ctor">
            <summary>
            Filter that trims single quotes on read and adds them on write.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile">
            <summary>
            Builds a serialization profile for a <see cref="T:System.Reflection.PropertyInfo"/> containing classes that dictate how the property value should be serialized. Exposes some simple methods for serialization and deserialization.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Property">
            <summary>
            The property the profile was built for.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Converters">
            <summary>
            Any custom type converters defined for this property. Is used for converting between the property value and the serialized string.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.ConverterArguments">
            <summary>
            Optional arguments for <see cref="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Converters"/>.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Filters">
            <summary>
            Any custom filters defined for modifying the string value after serialization or before serialization.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.ElementFilters">
            <summary>
            Any custom filters defined for the element substrings for modifying the string value after serialization or before serialization.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.ElementSeparator">
            <summary>
            Optional collection splitter for splitting a string into multiple substrings so they can be converted to elements for a collection.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.IsCollection">
            <summary>
            Whether or not <see cref="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Property"/> is a collection type.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.IsStatic">
            <summary>
            Whether or not <see cref="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Property"/> is static.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.#ctor(System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter},System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ISerializationFilter},System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ISerializationFilter},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <summary>
            Builds a serialization profile for a <see cref="T:System.Reflection.PropertyInfo"/> containing classes that dictate how the property value should be serialized.
            </summary>
            <param name="property">The property to build the profile for</param>
            <param name="additionalConverters">Optional extra converters for this property. Converters from <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/> take priority</param>
            <param name="additionalFilters">Optional extra filters for this property. Filters from <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> take priority</param>
            <param name="additionalElementFilters">Optional extra element filters for this property. Filters from <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> take priority</param>
            <param name="loggers">Optional loggers for tracing</param>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Filter(System.String,System.Boolean)">
            <summary>
            Filters <paramref name="source"/> using <see cref="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Filters"/>.
            </summary>
            <param name="source">The string to filter</param>
            <param name="isWrite">If the string needs to be filtered for write, otherwise the string will be filtered for read</param>
            <returns>The filtered string or <paramref name="source"/> if no filters are defined</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.Filter(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Filters all elements in <paramref name="source"/> using <see cref="P:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile.ElementFilters"/>.
            </summary>
            <param name="source">The elements to filer</param>
            <param name="isWrite">If the string needs to be filtered for write, otherwise the string will be filtered for read</param>
            <returns>Enumerator returning the filtered strings or the source strings if no filters are defined</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Components.Serialization.Profile.SerializationProfile">
            <summary>
            Builds a serialization profile for a type by creating <see cref="T:Sels.Core.Conversion.Components.Serialization.Profile.PropertySerializationProfile"/> profiles for all properties that can be serialized.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.SerializationProfile.Type">
            <summary>
            The type the profile is for.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Components.Serialization.Profile.SerializationProfile.PropertyProfiles">
            <summary>
            Dictionary with properties that can be serialized together with their profile.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Components.Serialization.Profile.SerializationProfile.#ctor(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter},System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ISerializationFilter},System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ISerializationFilter},System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.ILogger})">
            <inheritdoc cref="T:Sels.Core.Conversion.Components.Serialization.Profile.SerializationProfile"/>
            <param name="type">The type to create the profile for</param>
            <param name="propertyFlags">The binding flags that dictate what properties to include in this profile</param>
            <param name="additionalConverters">Optional extra converters for the property profiles. Converters from <see cref="T:Sels.Core.Conversion.Attributes.Serialization.ConverterAttribute"/> defined on the type take priority</param>
            <param name="additionalFilters">Optional extra filters for the property profile. Filters from <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> defined on the type take priority</param>
            <param name="additionalElementFilters">Optional extra element filters for the property profile. Filters from <see cref="T:Sels.Core.Conversion.Attributes.Serialization.SerializationFilterAttribute"/> defined on the type take priority</param>
            <param name="loggers">Optional loggers for tracing</param>
        </member>
        <member name="T:Sels.Core.Conversion.Contracts.ISerializationFilter">
            <summary>
            Filter that allows for modifying serialized or to be deserialized string values.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializationFilter.ModifyOnRead(System.String)">
            <summary>
            Modifies the value from a property before it is deserialized.
            </summary>
            <param name="input">The value to modifiy</param>
            <returns>The modified value</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializationFilter.ModifyOnWrite(System.String)">
            <summary>
            Modifies the value from a property after it is serialized.
            </summary>
            <param name="input">The value to modifiy</param>
            <returns>The modified value</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Contracts.ISerializerConfigurator`1">
            <summary>
            Exposes common configuration for serializers.
            </summary>
            <typeparam name="TConfigurator">The type of configurator inheriting from this interface</typeparam>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializerConfigurator`1.UseConverters(Sels.Core.Conversion.Contracts.ITypeConverter[])">
            <summary>
            Defines extra converters that will be used to convert between the property values and the serialized strings.
            </summary>
            <param name="converters">The converters to use</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializerConfigurator`1.UseFilters(Sels.Core.Conversion.Contracts.ISerializationFilter[])">
            <summary>
            Defines extra filters that will be used to filter the serialized / to be deserialized strings.
            </summary>
            <param name="filters">The filters to use</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializerConfigurator`1.UseElementFilters(Sels.Core.Conversion.Contracts.ISerializationFilter[])">
            <summary>
            Defines extra element filters that will be used to filter the serialized / to be deserialized strings.
            </summary>
            <param name="filters">The filters to use</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializerConfigurator`1.UseLoggers(Microsoft.Extensions.Logging.ILogger[])">
            <summary>
            Defines loggers that allows the serializer to trace.
            </summary>
            <param name="loggers">The loggers to use</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ISerializerConfigurator`1.ForProperties(System.Reflection.BindingFlags)">
            <summary>
            Defines what properties will be used to serialize/deserialize.
            </summary>
            <param name="bindingFlags">The flags that tell what properties to use</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Contracts.ISerializerConfigurator">
            <summary>
            Exposes common configuration for serializers.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Contracts.ITypeConverter">
            <summary>
            Converter that can converts objects into other types.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ITypeConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Checks if this converter can convert <paramref name="value"/> to type <paramref name="convertType"/>.
            </summary>
            <param name="convertType">Type to convert to</param>
            <param name="value">Value to convert</param>
            <param name="arguments">Arguments to modify the behaviour of this converter</param>
            <returns>Boolean indicating if this converter can convert from <paramref name="value"/> to <paramref name="convertType"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.ITypeConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts <paramref name="value"/> to <paramref name="convertType"/>.
            </summary>
            <param name="convertType">Type to convert to</param>
            <param name="value">Object to convert</param>
            <param name="arguments">Arguments to modify the behaviour of this converter</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Contracts.TypeConverterExtensions">
            <summary>
            Contains extension methods for <see cref="T:Sels.Core.Conversion.Contracts.ITypeConverter"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.ConvertTo``1(Sels.Core.Conversion.Contracts.ITypeConverter,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts <paramref name="value"/> to an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="converter">The converter to use</param>
            <param name="value">The value to convert</param>
            <param name="arguments">Optional arguments for the converter</param>
            <returns><paramref name="value"/> converted to <typeparamref name="T"/></returns>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="converter"/> cannot convert <paramref name="value"/> to <typeparamref name="T"/></exception>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.TryConvertTo(Sels.Core.Conversion.Contracts.ITypeConverter,System.Object,System.Type,System.Object@,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tries to convert <paramref name="value"/> to an instance of type <paramref name="convertType"/>.
            </summary>
            <param name="converter">The converter to use</param>
            <param name="value">The value to convert</param>
            <param name="convertType">The type to convert to</param>
            <param name="converted"><paramref name="value"/> converted to <paramref name="convertType"/> if conversion was successful</param>
            <param name="arguments">Optional arguments for the converter</param>
            <returns>Whether or not <paramref name="value"/> could be converted</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.TryConvertTo``1(Sels.Core.Conversion.Contracts.ITypeConverter,System.Object,``0@,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tries to convert <paramref name="value"/> to an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="converter">The converter to use</param>
            <param name="value">The value to convert</param>
            <param name="converted"><paramref name="value"/> converted to <typeparamref name="T"/> if conversion was successful</param>
            <param name="arguments">Optional arguments for the converter</param>
            <returns>Whether or not <paramref name="value"/> could be converted</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.ConvertTo(System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter},System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts <paramref name="value"/> to an instance of type <paramref name="convertType"/>.
            </summary>
            <param name="converters">The converters to use</param>
            <param name="value">The value to convert</param>
            <param name="convertType">The type to convert to</param>
            <param name="arguments">Optional arguments for the converter</param>
            <returns><paramref name="value"/> converted to <paramref name="convertType"/></returns>
            <exception cref="T:System.NotSupportedException">Thrown when no converter can convert <paramref name="value"/> to <paramref name="convertType"/></exception>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.ConvertTo``1(System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter},System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts <paramref name="value"/> to an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="converters">The converters to use</param>
            <param name="value">The value to convert</param>
            <param name="arguments">Optional arguments for the converter</param>
            <returns><paramref name="value"/> converted to <typeparamref name="T"/></returns>
            <exception cref="T:System.NotSupportedException">Thrown when no converter can convert <paramref name="value"/> to <typeparamref name="T"/></exception>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.TryConvertTo(System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter},System.Object,System.Type,System.Object@,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tries to convert <paramref name="value"/> to an instance of type <paramref name="convertType"/>.
            </summary>
            <param name="converters">The converters to use</param>
            <param name="value">The value to convert</param>
            <param name="convertType">The type to convert to</param>
            <param name="converted"><paramref name="value"/> converted to <paramref name="convertType"/> if conversion was successful</param>
            <param name="arguments">Optional arguments for the converters</param>
            <returns>Whether or not <paramref name="value"/> could be converted</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Contracts.TypeConverterExtensions.TryConvertTo``1(System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter},System.Object,``0@,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Tries to convert <paramref name="value"/> to an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to convert to</typeparam>
            <param name="converters">The converters to use</param>
            <param name="value">The value to convert</param>
            <param name="converted"><paramref name="value"/> converted to <typeparamref name="T"/> if conversion was successful</param>
            <param name="arguments">Optional arguments for the converter</param>
            <returns>Whether or not <paramref name="value"/> could be converted</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.DynamicConverter">
            <summary>
            Converter that uses delegates to convert objects. 
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.DynamicConverter.#ctor(System.Func{System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String},System.Object},System.Func{System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean})">
            <summary>
            Converter that uses delegates to convert objects. 
            </summary>
            <param name="convertFunc">Func that matches method signiture of <see cref="M:Sels.Core.Conversion.Converters.DynamicConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/></param>
            <param name="canConvertFunc">Func that matches method signiture of <see cref="M:Sels.Core.Conversion.Converters.DynamicConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/></param>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.DynamicConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.DynamicConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.GenericConverter">
            <summary>
            Converter that can be configured with other converters. Converter will use first sub converter that can convert between the supplied types. 
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.GenericConverter.Converters">
            <summary>
            Current converters used by this converter.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.GenericConverter.Settings">
            <summary>
            Current settings for this converter.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.#ctor">
            <summary>
            Converter that can be configured with other converters. Converter will use first sub converter that can convert between the supplied types. 
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.#ctor(Sels.Core.Conversion.Converters.GenericConverterSettings)">
            <summary>
            Converter that can be configured with other converters. Converter will use first sub converter that can convert between the supplied types. 
            </summary>
            <param name="settings">Settings to modifiy the behaviour of this converter</param>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.Set(System.Collections.Generic.IEnumerable{Sels.Core.Conversion.Contracts.ITypeConverter})">
            <summary>
            Replaces all current converts with <paramref name="converters"/>. Setting null will clear the converters.
            </summary>
            <param name="converters">Converters to set</param>
            <returns>Self</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.AddConverter(Sels.Core.Conversion.Contracts.ITypeConverter)">
            <summary>
            Adds a sub converter that the <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> can use.
            </summary>
            <param name="converter">Converter to add</param>
            <returns>Self</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.AddConverter(System.Func{System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String},System.Object},System.Func{System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean})">
            <summary>
            Adds a sub converter with the supplied delegates that the <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> can use.
            </summary>
            <param name="convertFunc">Func that matches method signiture of <see cref="M:Sels.Core.Conversion.Contracts.ITypeConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/></param>
            <param name="canConvertFunc">Func that matches method signiture of <see cref="M:Sels.Core.Conversion.Contracts.ITypeConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/></param>
            <returns>Self</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.AddConverter``1">
            <summary>
            Adds a new sub converter of type <typeparamref name="TConverter"/>.
            </summary>
            <typeparam name="TConverter">Type of converter</typeparam>
            <returns>Self</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.InsertConverter(System.Type,Sels.Core.Conversion.Contracts.ITypeConverter)">
            <summary>
            Adds a sub converter that the <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> can use and adds it before the first converter with type <paramref name="type"/>.
            </summary>
            <param name="converter">Converter to add</param>
            <param name="type">Type of converter to insert before</param>
            <returns>Self</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.AddConverter(System.Type,System.Func{System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String},System.Object},System.Func{System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean})">
            <summary>
            Adds a sub converter with the supplied delegates that the <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> can use and adds it before the first converter with type <paramref name="type"/>.
            </summary>
            <param name="convertFunc">Func that matches method signiture of <see cref="M:Sels.Core.Conversion.Contracts.ITypeConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/></param>
            <param name="canConvertFunc">Func that matches method signiture of <see cref="M:Sels.Core.Conversion.Contracts.ITypeConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/></param>
            <param name="type">Type of converter to insert before</param>
            <returns>Self</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.GenericConverter.InsertConverter``1(System.Type)">
            <summary>
            Adds a new sub converter of type <typeparamref name="TConverter"/> and adds it before the first converter with type <paramref name="type"/>.
            </summary>
            <typeparam name="TConverter">Type of converter</typeparam>
            <returns>Self</returns>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.GenericConverter.DefaultConverter">
            <summary>
            Default <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> that contains sub converters that cover most simple base types.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.GenericConverter.DefaultCollectionConverter">
            <summary>
            Default <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> that can convert between most collection types.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.GenericConverter.DefaultJsonConverter">
            <summary>
            Default <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> that contains sub converters that cover most simple base types with support for converting between objects and json strings.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.GenericConverter.DefaultXmlConverter">
            <summary>
            Default <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/> that contains sub converters that cover most simple base types with support for converting between objects and xml strings.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.GenericConverterSettings">
            <summary>
            Exposes extra settings for <see cref="T:Sels.Core.Conversion.Converters.GenericConverter"/>.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Converters.GenericConverterSettings.None">
            <summary>
            No settings selected.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Converters.GenericConverterSettings.IgnoreUnconvertable">
            <summary>
            Ignore any exceptions thrown by sub converters and will return the default value of the requested type instead.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Converters.GenericConverterSettings.AlwaysAttemptConversion">
            <summary>
            Always trigger sub converters even when converting to the same type.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.ArrayConverter">
            <summary>
            Converter that can convert collections to an array.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.ArrayConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.ArrayConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.CollectionConverter">
            <summary>
            Converter that can convert an <see cref="T:System.Collections.IEnumerable"/> to other collection types if they can be created using an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in the constructor.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.CollectionConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.CollectionConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.DateTimeConverter">
            <summary>
            Converts objects to DateTime.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Converters.Simple.DateTimeConverter.FormatArgument">
            <summary>
            The argument for providing a custom date format.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.DateTimeConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.DateTimeConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.DirectoryInfoConverter">
            <summary>
            Converter that can convert between a path and a directory info.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.DirectoryInfoConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.DirectoryInfoConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.EnumConverter">
            <summary>
            Converts between ints/strings and enums.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.EnumConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.EnumConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.FileInfoConverter">
            <summary>
            Converter that can convert between a filename and a file info.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.FileInfoConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.FileInfoConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.GeneralConverter">
            <summary>
            Converter that can convert between most common simple types.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.GeneralConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.GeneralConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.GeneralConverter.IsConvertableType(System.Type)">
            <summary>
            Checks if this converter can convert <paramref name="type"/>.
            </summary>
            <param name="type">Type to check</param>
            <returns>Boolean indicating if <paramref name="type"/> is supported</returns>
        </member>
        <member name="P:Sels.Core.Conversion.Converters.Simple.GeneralConverter.ConvertableTypes">
            <summary>
            Supported types that this converted can convert between.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.GuidConverter">
            <summary>
            Converts between guids and strings.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Converters.Simple.GuidConverter.FormatArgument">
            <summary>
            The argument for providing a custom guid format.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.GuidConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.GuidConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.JsonConverter">
            <summary>
            Converts json strings to objects and objects to json strings.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.JsonConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.JsonConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.StringConverter">
            <summary>
            Converts objects to string.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.StringConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.StringConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Converters.Simple.XmlConverter">
            <summary>
            Converts xml strings to objects and objects to xml strings.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.XmlConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Converters.Simple.XmlConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Extensions.ConversionExtensions">
            <summary>
            Contains extension methods for converting objects to other types.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.ConversionExtensions.ConvertTo``1(System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Attempts to convert <paramref name="value"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Object to convert</param>
            <param name="arguments">Arguments for conversion</param>
            <returns>Converted object</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.ConversionExtensions.ConvertTo``1(System.Object,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Attempts to convert <paramref name="value"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Object to convert</param>
            <param name="arguments">Optional arguments for conversion</param>
            <returns>Converted object</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Extensions.SerializationExtensions">
            <summary>
            Contains extensions for serializing/deserializing objects to/from string using data formats like json, xml, ...
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.IsXml(System.String)">
            <summary>
            Checks if <paramref name="value"/> start with a valid xml token.
            </summary>
            <param name="value">Value to check</param>
            <returns>Boolean indicating if <paramref name="value"/> starts with a valid xml token</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.SerializeAsXml(System.Object)">
            <summary>
            Serializes <paramref name="value"/> to a Xml string.
            </summary>
            <param name="value">Object to serialize</param>
            <returns>Xml string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes the Xml string <paramref name="value"/> to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="value">Xml string to deserialize</param>
            <returns>Deserialized Xml string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeserializeFromXml(System.String,System.Type)">
            <summary>
            Deserializes the Xml string <paramref name="value"/> to an object of type <paramref name="type"/>.
            </summary>
            <param name="value">Xml string to deserialize</param>
            <param name="type">Type of object to deserialize to</param>
            <returns>Deserialized Xml string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.SerializeAllsAsXml``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes all objects in <paramref name="values"/> to Xml strings.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="values">List of objects to serialize</param>
            <returns>List containing the serialized Xml strings</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeserializeAllFromXml``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deserializes all Xml strings in <paramref name="values"/> to objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="values">List of Xml strings to deserialize</param>
            <returns>List containing all the deserialized Xml strings</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.IsJson(System.String)">
            <summary>
            Checks if <paramref name="value"/> start with a valid json token.
            </summary>
            <param name="value">Value to check</param>
            <returns>Boolean indicating if <paramref name="value"/> starts with a valid json token</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeepCloneWithJson``1(``0)">
            <summary>
            Clones <paramref name="value"/> using Json.
            </summary>
            <typeparam name="T">Object of type to clone</typeparam>
            <param name="value">Object to clone</param>
            <returns>Cloned object</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.SerializeAsJson(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes <paramref name="value"/> to a Json string.
            </summary>
            <param name="value">Object to serialize</param>
            <param name="formatting">Formatting option</param>
            <returns>Json string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeserializeFromJson``1(System.String)">
            <summary>
            Deserializes the Json string <paramref name="value"/> to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="value">Json string to deserialize</param>
            <returns>Deserialized Json string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeserializeFromJson(System.String,System.Type)">
            <summary>
            Deserializes the Json string <paramref name="value"/> to an object of type <paramref name="type"/>.
            </summary>
            <param name="value">Json string to deserialize</param>
            <param name="type">Type of object to deserialize to</param>
            <returns>Deserialized Json string</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.SerializeAllAsJson``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes all objects in <paramref name="values"/> to Json strings.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="values">List of objects to serialize</param>
            <returns>List containing the serialized Json strings</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Extensions.SerializationExtensions.DeserializeAllFromJson``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deserializes all Json strings in <paramref name="values"/> to objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of object to deserialize to</typeparam>
            <param name="values">List of Json strings to deserialize</param>
            <returns>List containing all the deserialized Json strings</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer">
            <summary>
            Serializer that divides a string into key/value pairs where the key dictates what property will be used for the value.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.KeyValueSeparator">
            <summary>
            The default substring that is used to separate the key and the value.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.ElementSeparator">
            <summary>
            The default substring that will be used to join/split elements.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.#ctor(Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializerSettings)">
            <inheritdoc cref="T:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer"/>
            <param name="settings">Optional settings for this serializer</param>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.#ctor(System.Action{Sels.Core.Conversion.Serializers.KeyValue.IKeyValueSerializerConfigurator},Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializerSettings)">
            <inheritdoc cref="T:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer"/>
            <param name="configurator">Delegate for configuring this serializer</param>
            <param name="settings">Optional settings for this serializer</param>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.Deserialize``1(System.String,``0)">
            <summary>
            Deserializes the key/value pairs in <paramref name="value"/> to <paramref name="instance"/>.
            </summary>
            <typeparam name="T">Type of the object to deserialize to</typeparam>
            <param name="value">The string containing the key/value pairs</param>
            <param name="instance">The instance to deserialize to</param>
            <returns>The instance deserialized from <paramref name="value"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the key/value pairs in <paramref name="value"/> to an instance of type <paramref name="type"/>.
            </summary>
            <param name="value">The string containing the key/value pairs</param>
            <param name="type">The type to deserialize to</param>
            <returns>The instance deserialized from <paramref name="value"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the key/value pairs in <paramref name="value"/> to an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="value">The string containing the key/value pairs</param>
            <returns>The instance deserialized from <paramref name="value"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer.Serialize(System.Object)">
            <summary>
            Serializes <paramref name="instance"/> to a string containing key/value pairs.
            </summary>
            <param name="instance">The instance to serialize</param>
            <returns>String containing key/value pairs representing <paramref name="instance"/></returns>
        </member>
        <member name="T:Sels.Core.Conversion.Serializers.KeyValue.IKeyValueSerializerConfigurator">
            <summary>
            Exposes extra configuration for <see cref="T:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.IKeyValueSerializerConfigurator.SplitAndJoinRowsUsing(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Defines delegates for splitting the string to deserialize into multiple key/value pairs and joining the serialized key/value pairs.
            </summary>
            <param name="splitter">The delegate that will split the string into multiple key value pairs</param>
            <param name="joiner">The delegate that will join the key/value pairs into a string</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.IKeyValueSerializerConfigurator.SplitAndJoinRowsUsing(System.Object)">
            <summary>
            Key/value pairs will be split/joined using the <see cref="M:System.Object.ToString"/> on <paramref name="splitAndJoinValue"/>.
            </summary>
            <param name="splitAndJoinValue">The object to get the string to join/split from</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.IKeyValueSerializerConfigurator.ConvertKeyValuePairsUsing(System.Func{System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Func{System.Collections.Generic.KeyValuePair{System.String,System.String},System.String},System.Predicate{System.String})">
            <summary>
            Defines delegates for converting between <see cref="T:System.Collections.Generic.KeyValuePair`2"/> and their string representation.
            </summary>
            <param name="toPairFunc">The delegate that will create a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> from the string representation</param>
            <param name="toStringFunc">The delegate that will create the string representation for a <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <param name="isValidPairPredicate">The delegate that checks if the string is a valid key/value pair</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.KeyValue.IKeyValueSerializerConfigurator.ConvertKeyValuePairUsing(System.Object)">
            <summary>
            Key/value strings will be split/joined using the <see cref="M:System.Object.ToString"/> on <paramref name="splitAndJoinValue"/>.
            </summary>
            <param name="splitAndJoinValue">The object to get the string to join/split from</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializerSettings">
            <summary>
            Exposes extra settings for <see cref="T:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializer"/>.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializerSettings.None">
            <summary>
            No selected settings.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializerSettings.IgnoreUnconvertable">
            <summary>
            If no exceptions should be thrown when either the conversion for a property fails or when no converters are available to do the conversion. 
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.KeyValue.KeyValueSerializerSettings.UseDefaultConverter">
            <summary>
            If <see cref="P:Sels.Core.Conversion.Converters.GenericConverter.DefaultConverter"/> should be added as a converter.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Serializers.Table.TableSerializer">
            <summary>
            Serializer that divides a string into columns and rows where the header row text/index determines what property is used.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.Table.TableSerializer.ColumnSeparator">
            <summary>
            The default substring that is used to separate columns.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Serializers.Table.TableSerializer.RowSeparator">
            <summary>
            The default substring that will be used to join/split rows.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.Table.TableSerializer.ElementSeparator">
            <summary>
            The default substring that will be used to join/split elements.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.TableSerializer.#ctor(Sels.Core.Conversion.Serializers.Table.TableSerializerSettings)">
            <inheritdoc cref="T:Sels.Core.Conversion.Serializers.Table.TableSerializer"/>
            <param name="settings">Optional settings for this serializer</param>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.TableSerializer.#ctor(System.Action{Sels.Core.Conversion.Serializers.Table.ITableSerializerConfigurator},Sels.Core.Conversion.Serializers.Table.TableSerializerSettings)">
            <inheritdoc cref="T:Sels.Core.Conversion.Serializers.Table.TableSerializer"/>
            <param name="configurator">Delegate for configuring this serializer</param>
            <param name="settings">Optional settings for this serializer</param>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.TableSerializer.Deserialize(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes the rows and columns in <paramref name="value"/> to an instance of type <paramref name="type"/>.
            </summary>
            <param name="value">The string containing the rows and columns</param>
            <param name="type">The type to deserialize to</param>
            <param name="hasHeaderRow">If <paramref name="value"/> has a header row to take into account</param>
            <returns>The instance deserialized from <paramref name="value"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.TableSerializer.Deserialize``1(System.String,System.Boolean)">
            <summary>
            Deserializes the rows and columns in <paramref name="value"/> to an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="value">The string containing the rows and columns</param>
            <param name="hasHeaderRow">If <paramref name="value"/> has a header row to take into account</param>
            <returns>The instance deserialized from <paramref name="value"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.TableSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            Serializes <paramref name="instance"/> to a string containing key/value pairs.
            </summary>
            <param name="instance">The instance to serialize</param>
            <param name="includeHeaderRow">If the header row should be included in the serialized string</param>
            <returns>String containing key/value pairs representing <paramref name="instance"/></returns>
        </member>
        <member name="T:Sels.Core.Conversion.Serializers.Table.ITableSerializerConfigurator">
            <summary>
            Exposes extra configuration for <see cref="T:Sels.Core.Conversion.Serializers.Table.TableSerializer"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.ITableSerializerConfigurator.SplitAndJoinColummsUsing(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Defines delegates for splitting the string into multiple columns and joining multiple columns.
            </summary>
            <param name="splitter">The delegate that will split the string into multiple columns</param>
            <param name="joiner">The delegate that will join the columns into a string</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.ITableSerializerConfigurator.SplitAndJoinColumnsUsing(System.Object)">
            <summary>
            Columns will be split/joined using the <see cref="M:System.Object.ToString"/> on <paramref name="splitAndJoinValue"/>.
            </summary>
            <param name="splitAndJoinValue">The object to get the string to join/split from</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.ITableSerializerConfigurator.SplitAndJoinRowsUsing(System.Func{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Func{System.Collections.Generic.IEnumerable{System.String},System.String})">
            <summary>
            Defines delegates for splitting the string to deserialize into multiple rows and joining the serialized rows.
            </summary>
            <param name="splitter">The delegate that will split the string into multiple rows</param>
            <param name="joiner">The delegate that will join the rows into a string</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Serializers.Table.ITableSerializerConfigurator.SplitAndJoinRowsUsing(System.Object)">
            <summary>
            Rows will be split/joined using the <see cref="M:System.Object.ToString"/> on <paramref name="splitAndJoinValue"/>.
            </summary>
            <param name="splitAndJoinValue">The object to get the string to join/split from</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Serializers.Table.TableSerializerSettings">
            <summary>
            Exposes extra settings for <see cref="T:Sels.Core.Conversion.Serializers.Table.TableSerializer"/>.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.Table.TableSerializerSettings.None">
            <summary>
            No selected settings.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.Table.TableSerializerSettings.IgnoreUnconvertable">
            <summary>
            If no exceptions should be thrown when either the conversion for a property fails or when no converters are available to do the conversion. 
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Serializers.Table.TableSerializerSettings.UseDefaultConverter">
            <summary>
            If <see cref="P:Sels.Core.Conversion.Converters.GenericConverter.DefaultConverter"/> should be added as a converter.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.BaseSerializer`2">
            <summary>
            Template for creating serializers. Exposes type handlers for serializing/deserializing certain types in a different way.
            </summary>
            <typeparam name="TSerializerSource">The type to serialize to</typeparam>
            <typeparam name="TDeserializerSource">The type to deserialze from</typeparam>
        </member>
        <member name="F:Sels.Core.Conversion.Templates.BaseSerializer`2._loggers">
            <summary>
            Optional loggers for tracing.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializer`2.AddTypeHandler(System.Action{Sels.Core.Conversion.Templates.ITypeHandlerConfigurator{`0,`1}})">
            <summary>
            Adds a new type handler configured through <paramref name="configurator"/>. The type handler will be used when calling either <see cref="M:Sels.Core.Conversion.Templates.BaseSerializer`2.SerializeFrom(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})"/> or <see cref="M:Sels.Core.Conversion.Templates.BaseSerializer`2.DeserializeTo(`1,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </summary>
            <param name="configurator">The delegate to configure the new type handler</param>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializer`2.SerializeFrom(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Serializes <paramref name="instance"/> to an instance of <typeparamref name="TSerializerSource"/>.
            </summary>
            <param name="instance">The instance with the data to serialize</param>
            <param name="arguments">Optional arguments to pass down to the type handles</param>
            <returns>The serialized data from <paramref name="instance"/></returns>
            <exception cref="T:System.NotSupportedException">Thrown when no type handler has been registered that can handle the type of <paramref name="instance"/></exception>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializer`2.DeserializeTo(`1,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Deserializes <paramref name="source"/> to <paramref name="instance"/>.
            </summary>
            <param name="source">The object with the data to deserialize</param>
            <param name="instance">The instance to deserialize the data to</param>
            <param name="arguments">Optional arguments to pass down to the type handles</param>
            <returns>The object with the deserialized data</returns>
            <exception cref="T:System.NotSupportedException">Thrown when no type handler has been registered that can handle the type of <paramref name="instance"/></exception>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.BaseSerializer`1">
            <summary>
            Template for creating serializers. Exposes type handlers for serializing/deserializing certain types in a different way.
            </summary>
            <typeparam name="TSource">The type to serialize to and deserialize from.</typeparam>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.BaseSerializer">
            <summary>
            Template for creating serializers. Exposes type handlers for serializing/deserializing certain types in a different way.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2">
            <summary>
            Exposes configuration when creating a new type handler using <see cref="T:Sels.Core.Conversion.Templates.BaseSerializer`2"/>.
            </summary>
            <typeparam name="TSerializerSource">The type to serialize to</typeparam>
            <typeparam name="TDeserializerSource">The type to deserialze from</typeparam>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.Handles(System.Predicate{System.Type})">
            <summary>
            Defines that the type handler can handle types passing <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The predicate that checks if the type handler can handle the supplied type</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.Handles(System.Type)">
            <summary>
            Defines that the type handler can handle type <paramref name="type"/>.
            </summary>
            <param name="type">The type that can be handled</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.Handles``1">
            <summary>
            Defines that the type handler can handle type <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType">The type that can be handled</typeparam>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.SerializeUsing(System.Func{System.Type,System.Object,`0})">
            <summary>
            Defines the delegate that will be used to serialize the supplied object.
            </summary>
            <param name="serializer">Delegate that will serialize the supplied object. First arg is the object type and the second arg is the object to serialize</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.DeserializeUsing(System.Func{`1,System.Object,System.Object})">
            <summary>
            Defines the delegate that will be used to deserialize the supplied <typeparamref name="TDeserializerSource"/> to the supplied object instance.
            </summary>
            <param name="deserializer">Delegate that will deserialize an instance of <typeparamref name="TDeserializerSource"/> to the supplied object. First arg is the object holding the data to deserialize and the second arg is the instance to deserialize to (if applicable)</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.SerializeUsing(System.Func{System.Type,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},`0})">
            <summary>
            Defines the delegate that will be used to serialize the supplied object.
            </summary>
            <param name="serializer">Delegate that will serialize the supplied object. First arg is the object type, the second arg is the object to serialize and the third are optional arguments</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.ITypeHandlerConfigurator`2.DeserializeUsing(System.Func{`1,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object})">
            <summary>
            Defines the delegate that will be used to deserialize the supplied <typeparamref name="TDeserializerSource"/> to the supplied object instance.
            </summary>
            <param name="deserializer">Delegate that will deserialize an instance of <typeparamref name="TDeserializerSource"/> to the supplied object. First arg is the object holding the data to deserialize, the second arg is the instance to deserialize to (if applicable) and the third are optional arguments</param>
            <returns>Current configurator for method chaining</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1">
            <summary>
            Template for creating new configurators.
            </summary>
            <typeparam name="TConfigurator">The type of the configurator inheriting from this class</typeparam>
        </member>
        <member name="F:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1._loggers">
            <summary>
            The registered loggers.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1._converters">
            <summary>
            The registered converters.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1._filters">
            <summary>
            The registered filters.
            </summary>
        </member>
        <member name="F:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1._elementFilters">
            <summary>
            The registered element filters.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.Loggers">
            <summary>
            The configured loggers.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.Converters">
            <summary>
            The configured converters.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.Filters">
            <summary>
            The configured filters.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.ElementFilters">
            <summary>
            The configured element filters.
            </summary>
        </member>
        <member name="P:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.PropertyFlags">
            <summary>
            The configured binding flags.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.UseConverters(Sels.Core.Conversion.Contracts.ITypeConverter[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.UseFilters(Sels.Core.Conversion.Contracts.ISerializationFilter[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.UseElementFilters(Sels.Core.Conversion.Contracts.ISerializationFilter[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.UseLoggers(Microsoft.Extensions.Logging.ILogger[])">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.ForProperties(System.Reflection.BindingFlags)">
            <inheritdoc/>
        </member>
        <member name="P:Sels.Core.Conversion.Templates.BaseSerializerConfigurator`1.Instance">
            <summary>
            The instance to return for the method chaining.
            </summary>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.BaseTypeConverter">
            <summary>
            Template for creating new type converters. Validates input so derived classes do not need to check for nulls and provides some helper methods.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseTypeConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseTypeConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseTypeConverter.CanConvertObject(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:Sels.Core.Conversion.Contracts.ITypeConverter.CanConvert(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseTypeConverter.ConvertObjectTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:Sels.Core.Conversion.Contracts.ITypeConverter.ConvertTo(System.Object,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseTypeConverter.AreTypePair``2(System.Type,System.Type,System.Boolean)">
            <summary>
            Checks if <paramref name="left"/> and <paramref name="right"/> are a pair of <typeparamref name="TLeft"/> and <typeparamref name="TRight"/>. Useful when creating a converter that can convert between 2 types.
            </summary>
            <typeparam name="TLeft">First type that can be converted from/to</typeparam>
            <typeparam name="TRight">Second type that can be converted from/to</typeparam>
            <param name="left">First type to check</param>
            <param name="right">Second type to check</param>
            <param name="getNullableType">Set to true to get the underlying type if any of the types is nullable</param>
            <returns>Whether or not <paramref name="left"/> and <paramref name="right"/> are a pair of <typeparamref name="TLeft"/> and <typeparamref name="TRight"/></returns>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.BaseTypeConverter.AreTypePair(System.Type,System.Type,System.Predicate{System.Type},System.Predicate{System.Type},System.Boolean)">
            <summary>
            Checks if <paramref name="left"/> and <paramref name="right"/> are a pair of based on conditions <paramref name="leftCondition"/> and <paramref name="rightCondition"/>. Useful when creating a converter that can convert between 2 types.
            </summary>
            <param name="left">First type to check</param>
            <param name="right">Second type to check</param>
            <param name="leftCondition">First condition for the type that can be converted from/to</param>
            <param name="rightCondition">Second condition for the type that can be converted from/to</param>
            <param name="getNullableType">Set to true to get the underlying type if any of the types is nullable</param>
            <returns>Whether or not <paramref name="left"/> and <paramref name="right"/> are a pair based on <paramref name="leftCondition"/> and <paramref name="rightCondition"/></returns>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.Filters.BaseEndTrimFilter">
            <summary>
            Filter that will trim a char from the end of a string and adds them on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseEndTrimFilter.#ctor(System.Char)">
            <summary>
            Filter that will trim a char from the end of a string and adds them on write.
            </summary>
            <param name="valueToTrim">The char to trim</param>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseEndTrimFilter.ModifyOnRead(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseEndTrimFilter.ModifyOnWrite(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.Filters.BaseStartTrimFilter">
            <summary>
            Filter that will trim a char from the start of a string and adds them on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseStartTrimFilter.#ctor(System.Char)">
            <summary>
            Filter that will trim a char from the start of a string and adds them on write.
            </summary>
            <param name="valueToTrim">The char to trim</param>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseStartTrimFilter.ModifyOnRead(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseStartTrimFilter.ModifyOnWrite(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.Filters.BaseTrimFilter">
            <summary>
            Filter that will trim a char on read and adds them on write.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseTrimFilter.#ctor(System.Char)">
            <summary>
            Filter that will trim a char on read and adds them on write.
            </summary>
            <param name="valueToTrim">The char to trim</param>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseTrimFilter.ModifyOnRead(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Filters.BaseTrimFilter.ModifyOnWrite(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.Table.BaseColumnAttribute">
            <summary>
            Template for creating attributes that dictate what column should be used to serialize the property from or deserialize to.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Table.BaseColumnAttribute.GetColumnIndex(System.String[])">
            <summary>
            Returns the index in <paramref name="headerRow"/> of the column to use.
            </summary>
            <param name="headerRow">The header row to get the index from</param>
            <returns>The index of the column or a negative number when no column could be selected</returns>
        </member>
        <member name="T:Sels.Core.Conversion.Templates.Table.BaseColumnAttributeExtensions">
            <summary>
            Contains extension methods for working with <see cref="T:Sels.Core.Conversion.Templates.Table.BaseColumnAttribute"/>.
            </summary>
        </member>
        <member name="M:Sels.Core.Conversion.Templates.Table.BaseColumnAttributeExtensions.GetColumnAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns the first attriute that is assignable to <see cref="T:Sels.Core.Conversion.Templates.Table.BaseColumnAttribute"/> on <paramref name="member"/>.
            </summary>
            <param name="member">The member to get the attribute from</param>
            <returns>The first attribute assignable to <see cref="T:Sels.Core.Conversion.Templates.Table.BaseColumnAttribute"/> or null if none is found</returns>
        </member>
    </members>
</doc>
